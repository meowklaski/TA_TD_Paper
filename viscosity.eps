%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: viscosity.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: Vy
%%CreationDate: 4/6/2015, 2:55:38 PM
%%BoundingBox: 0 0 576 576
%%HiResBoundingBox: 0 0 576 576
%%CropBox: 0 0 576 576
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 565 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2015-01-30T14:25:15-05:00"
   xmp:CreatorTool="matplotlib 1.4.2, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -576 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 576 li
576 576 li
576 0 li
cp
clp
gsave
0 576 mo
576 576 li
576 0 li
0 0 li
cp
clp
0 576 mo
576 576 li
576 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
89.3204 476.372 mo
548.55 476.372 li
548.55 23.61 li
89.3204 23.61 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.0556344 .0660105 .0526436 0 cmyk
f
2 lw
0 lc
1 lj
10 ml
[6 6 ] 0 dsh
true sadj
186.341 429.35 mo
217.387 409.373 li
242.789 392.867 li
263.957 378.118 li
276.212 372.878 li
289.829 363.919 li
297.221 359.965 li
305.048 354.119 li
313.349 347.698 li
322.169 342.959 li
331.558 335.523 li
341.573 326.622 li
352.279 319.535 li
363.749 311.729 li
376.069 300.585 li
389.337 289.351 li
403.666 279.541 li
419.189 260.279 li
436.062 244.626 li
454.469 224.91 li
474.629 196.659 li
496.806 164.535 li
508.746 143.341 li
521.316 108.445 li
1 /0 /CSD get_res sepcs
1 sep
@
gsave
182.091 433.6 mo
190.591 433.6 li
190.591 425.1 li
182.091 425.1 li
cp
clp
182.341 433.35 mo
190.341 433.35 li
190.341 425.35 li
182.341 425.35 li
cp
f
.5 lw
0 lj
[] 0 dsh
182.341 433.35 mo
190.341 433.35 li
190.341 425.35 li
182.341 425.35 li
cp
@
grestore
gsave
213.137 413.623 mo
221.637 413.623 li
221.637 405.123 li
213.137 405.123 li
cp
clp
213.387 413.373 mo
221.387 413.373 li
221.387 405.373 li
213.387 405.373 li
cp
f
.5 lw
0 lj
[] 0 dsh
213.387 413.373 mo
221.387 413.373 li
221.387 405.373 li
213.387 405.373 li
cp
@
grestore
gsave
238.539 397.117 mo
247.039 397.117 li
247.039 388.617 li
238.539 388.617 li
cp
clp
238.789 396.867 mo
246.789 396.867 li
246.789 388.867 li
238.789 388.867 li
cp
f
.5 lw
0 lj
[] 0 dsh
238.789 396.867 mo
246.789 396.867 li
246.789 388.867 li
238.789 388.867 li
cp
@
grestore
gsave
259.707 382.368 mo
268.207 382.368 li
268.207 373.868 li
259.707 373.868 li
cp
clp
259.957 382.118 mo
267.957 382.118 li
267.957 374.118 li
259.957 374.118 li
cp
f
.5 lw
0 lj
[] 0 dsh
259.957 382.118 mo
267.957 382.118 li
267.957 374.118 li
259.957 374.118 li
cp
@
grestore
gsave
271.962 377.128 mo
280.462 377.128 li
280.462 368.628 li
271.962 368.628 li
cp
clp
272.212 376.878 mo
280.212 376.878 li
280.212 368.878 li
272.212 368.878 li
cp
f
.5 lw
0 lj
[] 0 dsh
272.212 376.878 mo
280.212 376.878 li
280.212 368.878 li
272.212 368.878 li
cp
@
grestore
gsave
285.579 368.169 mo
294.079 368.169 li
294.079 359.669 li
285.579 359.669 li
cp
clp
285.829 367.919 mo
293.829 367.919 li
293.829 359.919 li
285.829 359.919 li
cp
f
.5 lw
0 lj
[] 0 dsh
285.829 367.919 mo
293.829 367.919 li
293.829 359.919 li
285.829 359.919 li
cp
@
grestore
gsave
292.971 364.215 mo
301.471 364.215 li
301.471 355.715 li
292.971 355.715 li
cp
clp
293.221 363.965 mo
301.221 363.965 li
301.221 355.965 li
293.221 355.965 li
cp
f
.5 lw
0 lj
[] 0 dsh
293.221 363.965 mo
301.221 363.965 li
301.221 355.965 li
293.221 355.965 li
cp
@
grestore
gsave
300.798 358.369 mo
309.298 358.369 li
309.298 349.869 li
300.798 349.869 li
cp
clp
301.048 358.119 mo
309.048 358.119 li
309.048 350.119 li
301.048 350.119 li
cp
f
.5 lw
0 lj
[] 0 dsh
301.048 358.119 mo
309.048 358.119 li
309.048 350.119 li
301.048 350.119 li
cp
@
grestore
gsave
309.099 351.948 mo
317.599 351.948 li
317.599 343.448 li
309.099 343.448 li
cp
clp
309.349 351.698 mo
317.349 351.698 li
317.349 343.698 li
309.349 343.698 li
cp
f
.5 lw
0 lj
[] 0 dsh
309.349 351.698 mo
317.349 351.698 li
317.349 343.698 li
309.349 343.698 li
cp
@
grestore
gsave
317.919 347.209 mo
326.419 347.209 li
326.419 338.709 li
317.919 338.709 li
cp
clp
318.169 346.959 mo
326.169 346.959 li
326.169 338.959 li
318.169 338.959 li
cp
f
.5 lw
0 lj
[] 0 dsh
318.169 346.959 mo
326.169 346.959 li
326.169 338.959 li
318.169 338.959 li
cp
@
grestore
gsave
327.308 339.773 mo
335.808 339.773 li
335.808 331.273 li
327.308 331.273 li
cp
clp
327.558 339.523 mo
335.558 339.523 li
335.558 331.523 li
327.558 331.523 li
cp
f
.5 lw
0 lj
[] 0 dsh
327.558 339.523 mo
335.558 339.523 li
335.558 331.523 li
327.558 331.523 li
cp
@
grestore
gsave
337.323 330.872 mo
345.823 330.872 li
345.823 322.372 li
337.323 322.372 li
cp
clp
337.573 330.622 mo
345.573 330.622 li
345.573 322.622 li
337.573 322.622 li
cp
f
.5 lw
0 lj
[] 0 dsh
337.573 330.622 mo
345.573 330.622 li
345.573 322.622 li
337.573 322.622 li
cp
@
grestore
gsave
348.029 323.785 mo
356.529 323.785 li
356.529 315.285 li
348.029 315.285 li
cp
clp
348.279 323.535 mo
356.279 323.535 li
356.279 315.535 li
348.279 315.535 li
cp
f
.5 lw
0 lj
[] 0 dsh
348.279 323.535 mo
356.279 323.535 li
356.279 315.535 li
348.279 315.535 li
cp
@
grestore
gsave
359.499 315.979 mo
367.999 315.979 li
367.999 307.479 li
359.499 307.479 li
cp
clp
359.749 315.729 mo
367.749 315.729 li
367.749 307.729 li
359.749 307.729 li
cp
f
.5 lw
0 lj
[] 0 dsh
359.749 315.729 mo
367.749 315.729 li
367.749 307.729 li
359.749 307.729 li
cp
@
grestore
gsave
371.819 304.835 mo
380.319 304.835 li
380.319 296.335 li
371.819 296.335 li
cp
clp
372.069 304.585 mo
380.069 304.585 li
380.069 296.585 li
372.069 296.585 li
cp
f
.5 lw
0 lj
[] 0 dsh
372.069 304.585 mo
380.069 304.585 li
380.069 296.585 li
372.069 296.585 li
cp
@
grestore
gsave
385.087 293.601 mo
393.587 293.601 li
393.587 285.101 li
385.087 285.101 li
cp
clp
385.337 293.351 mo
393.337 293.351 li
393.337 285.351 li
385.337 285.351 li
cp
f
.5 lw
0 lj
[] 0 dsh
385.337 293.351 mo
393.337 293.351 li
393.337 285.351 li
385.337 285.351 li
cp
@
grestore
gsave
399.416 283.791 mo
407.916 283.791 li
407.916 275.291 li
399.416 275.291 li
cp
clp
399.666 283.541 mo
407.666 283.541 li
407.666 275.541 li
399.666 275.541 li
cp
f
.5 lw
0 lj
[] 0 dsh
399.666 283.541 mo
407.666 283.541 li
407.666 275.541 li
399.666 275.541 li
cp
@
grestore
gsave
414.939 264.529 mo
423.439 264.529 li
423.439 256.029 li
414.939 256.029 li
cp
clp
415.189 264.279 mo
423.189 264.279 li
423.189 256.279 li
415.189 256.279 li
cp
f
.5 lw
0 lj
[] 0 dsh
415.189 264.279 mo
423.189 264.279 li
423.189 256.279 li
415.189 256.279 li
cp
@
grestore
gsave
431.812 248.876 mo
440.312 248.876 li
440.312 240.376 li
431.812 240.376 li
cp
clp
432.062 248.626 mo
440.062 248.626 li
440.062 240.626 li
432.062 240.626 li
cp
f
.5 lw
0 lj
[] 0 dsh
432.062 248.626 mo
440.062 248.626 li
440.062 240.626 li
432.062 240.626 li
cp
@
grestore
gsave
450.219 229.16 mo
458.719 229.16 li
458.719 220.66 li
450.219 220.66 li
cp
clp
450.469 228.91 mo
458.469 228.91 li
458.469 220.91 li
450.469 220.91 li
cp
f
.5 lw
0 lj
[] 0 dsh
450.469 228.91 mo
458.469 228.91 li
458.469 220.91 li
450.469 220.91 li
cp
@
grestore
gsave
470.38 200.909 mo
478.88 200.909 li
478.88 192.409 li
470.38 192.409 li
cp
clp
470.63 200.659 mo
478.63 200.659 li
478.63 192.659 li
470.63 192.659 li
cp
f
.5 lw
0 lj
[] 0 dsh
470.63 200.659 mo
478.63 200.659 li
478.63 192.659 li
470.63 192.659 li
cp
@
grestore
gsave
492.556 168.785 mo
501.056 168.785 li
501.056 160.285 li
492.556 160.285 li
cp
clp
492.806 168.535 mo
500.806 168.535 li
500.806 160.535 li
492.806 160.535 li
cp
f
.5 lw
0 lj
[] 0 dsh
492.806 168.535 mo
500.806 168.535 li
500.806 160.535 li
492.806 160.535 li
cp
@
grestore
gsave
504.497 147.591 mo
512.997 147.591 li
512.997 139.091 li
504.497 139.091 li
cp
clp
504.747 147.341 mo
512.747 147.341 li
512.747 139.341 li
504.747 139.341 li
cp
f
.5 lw
0 lj
[] 0 dsh
504.747 147.341 mo
512.747 147.341 li
512.747 139.341 li
504.747 139.341 li
cp
@
grestore
gsave
517.066 112.695 mo
525.566 112.695 li
525.566 104.195 li
517.066 104.195 li
cp
clp
517.316 112.445 mo
525.316 112.445 li
525.316 104.445 li
517.316 104.445 li
cp
f
.5 lw
0 lj
[] 0 dsh
517.316 112.445 mo
525.316 112.445 li
525.316 104.445 li
517.316 104.445 li
cp
@
grestore
gsave
89.3204 476.372 mo
548.55 476.372 li
548.55 23.61 li
89.3204 23.61 li
cp
clp
3 lw
186.341 429.35 mo
217.387 409.373 li
242.789 393.029 li
263.957 379.408 li
276.212 371.523 li
289.829 362.761 li
297.221 358.004 li
305.048 352.968 li
313.349 347.627 li
322.169 341.952 li
331.558 335.91 li
341.573 329.466 li
352.279 322.578 li
363.749 315.197 li
376.069 307.27 li
389.337 298.733 li
403.666 289.513 li
419.189 279.524 li
436.062 268.667 li
454.469 256.823 li
474.629 243.851 li
496.806 229.582 li
508.746 221.899 li
521.316 213.811 li
534.565 205.286 li
548.55 196.288 li
0 1 1 0 cmyk
@
grestore
1 lw
2 lc
0 lj
[] 0 dsh
89.3204 23.61 mo
548.55 23.61 li
@
548.55 476.372 mo
548.55 23.61 li
@
89.3204 476.372 mo
548.55 476.372 li
@
89.3204 476.372 mo
89.3204 23.61 li
@
gsave
89.3204 476.372 mo
548.55 476.372 li
548.55 23.61 li
89.3204 23.61 li
cp
clp
.5 lw
0 lc
1 lj
[1 3 ] 0 dsh
548.55 476.372 mo
548.55 23.61 li
@
grestore
548.55 476.372 mo
548.55 472.372 li
f
.5 lw
0 lc
1 lj
548.55 476.372 mo
548.55 472.372 li
@
548.55 23.61 mo
548.55 27.61 li
f
548.55 23.61 mo
548.55 27.61 li
@
542.503 494.362 mo
542.503 493.627 li
544.246 493.627 545.128 493.417 545.128 492.955 cv
545.128 481.93 li
544.393 482.287 543.469 482.455 542.377 482.455 cv
542.377 481.72 li
544.078 481.72 545.38 481.279 546.262 480.376 cv
546.556 480.376 li
546.703 480.439 li
546.766 480.565 li
546.766 492.955 li
546.766 493.417 547.627 493.627 549.391 493.627 cv
549.391 494.362 li
542.503 494.362 li
f
532.923 516.844 mo
533.301 517.306 533.952 517.516 534.918 517.516 cv
535.443 517.516 535.947 517.348 536.409 516.97 cv
536.871 516.613 537.228 516.172 537.48 515.647 cv
537.774 515.059 537.963 514.408 538.047 513.736 cv
538.131 513.064 538.173 512.245 538.173 511.237 cv
537.921 511.804 537.585 512.266 537.144 512.623 cv
536.682 513.001 536.178 513.169 535.59 513.169 cv
534.771 513.169 534.036 512.959 533.406 512.518 cv
532.776 512.077 532.272 511.489 531.936 510.775 cv
531.6 510.061 531.432 509.284 531.432 508.465 cv
531.432 507.625 531.621 506.848 531.999 506.113 cv
532.377 505.399 532.923 504.811 533.595 504.391 cv
534.267 503.971 535.023 503.74 535.905 503.74 cv
536.745 503.74 537.438 503.971 538.026 504.433 cv
538.593 504.895 539.034 505.504 539.328 506.218 cv
539.622 506.953 539.832 507.73 539.958 508.528 cv
540.084 509.347 540.147 510.145 540.147 510.943 cv
540.147 512.035 539.937 513.127 539.538 514.261 cv
539.139 515.395 538.551 516.319 537.774 517.054 cv
536.976 517.789 536.031 518.167 534.918 518.167 cv
534.078 518.167 533.385 517.978 532.818 517.6 cv
532.23 517.222 531.957 516.634 531.957 515.836 cv
531.957 515.563 532.041 515.332 532.251 515.122 cv
532.44 514.933 532.671 514.828 532.965 514.828 cv
533.238 514.828 533.469 514.933 533.679 515.122 cv
533.868 515.332 533.973 515.563 533.973 515.836 cv
533.973 516.13 533.868 516.361 533.679 516.55 cv
533.469 516.76 533.238 516.844 532.965 516.844 cv
532.923 516.844 li
535.674 512.623 mo
536.241 512.623 536.703 512.434 537.081 512.056 cv
537.438 511.678 537.711 511.195 537.879 510.607 cv
538.047 510.04 538.131 509.473 538.131 508.885 cv
538.131 508.486 li
538.131 508.402 li
538.131 507.352 537.963 506.428 537.669 505.588 cv
537.354 504.769 536.766 504.349 535.905 504.349 cv
535.338 504.349 534.876 504.475 534.54 504.706 cv
534.204 504.958 533.952 505.273 533.784 505.672 cv
533.616 506.092 533.511 506.512 533.469 506.974 cv
533.427 507.436 533.406 507.94 533.406 508.465 cv
533.406 509.263 533.427 509.956 533.511 510.502 cv
533.595 511.069 533.805 511.573 534.141 511.993 cv
534.477 512.413 534.981 512.623 535.674 512.623 cv
f
546.3 518.167 mo
544.578 518.167 543.402 517.474 542.793 516.067 cv
542.163 514.66 541.869 512.98 541.869 511.027 cv
541.869 509.809 541.974 508.675 542.205 507.604 cv
542.415 506.533 542.856 505.63 543.528 504.874 cv
544.179 504.118 545.103 503.74 546.3 503.74 cv
547.224 503.74 547.98 503.971 548.568 504.412 cv
549.156 504.874 549.597 505.441 549.912 506.155 cv
550.206 506.869 550.416 507.646 550.542 508.465 cv
550.647 509.284 550.71 510.145 550.71 511.027 cv
550.71 512.245 550.584 513.358 550.374 514.408 cv
550.143 515.458 549.702 516.361 549.051 517.075 cv
548.4 517.789 547.476 518.167 546.3 518.167 cv
546.3 517.642 mo
547.077 517.642 547.665 517.243 548.043 516.445 cv
548.421 515.647 548.652 514.765 548.736 513.799 cv
548.82 512.833 548.883 511.783 548.883 510.691 cv
548.883 509.641 548.82 508.675 548.736 507.793 cv
548.652 506.911 548.421 506.092 548.043 505.378 cv
547.665 504.664 547.077 504.286 546.3 504.286 cv
545.502 504.286 544.914 504.664 544.536 505.378 cv
544.158 506.092 543.906 506.911 543.822 507.793 cv
543.738 508.675 543.696 509.641 543.696 510.691 cv
543.696 511.489 543.696 512.224 543.738 512.896 cv
543.78 513.589 543.885 514.303 544.053 515.038 cv
544.221 515.773 544.473 516.382 544.851 516.886 cv
545.208 517.39 545.691 517.642 546.3 517.642 cv
f
556.8 518.167 mo
555.078 518.167 553.902 517.474 553.293 516.067 cv
552.663 514.66 552.369 512.98 552.369 511.027 cv
552.369 509.809 552.474 508.675 552.705 507.604 cv
552.915 506.533 553.356 505.63 554.028 504.874 cv
554.679 504.118 555.603 503.74 556.8 503.74 cv
557.724 503.74 558.48 503.971 559.068 504.412 cv
559.656 504.874 560.097 505.441 560.412 506.155 cv
560.706 506.869 560.916 507.646 561.042 508.465 cv
561.147 509.284 561.21 510.145 561.21 511.027 cv
561.21 512.245 561.084 513.358 560.874 514.408 cv
560.643 515.458 560.202 516.361 559.551 517.075 cv
558.9 517.789 557.976 518.167 556.8 518.167 cv
556.8 517.642 mo
557.577 517.642 558.165 517.243 558.543 516.445 cv
558.921 515.647 559.152 514.765 559.236 513.799 cv
559.32 512.833 559.383 511.783 559.383 510.691 cv
559.383 509.641 559.32 508.675 559.236 507.793 cv
559.152 506.911 558.921 506.092 558.543 505.378 cv
558.165 504.664 557.577 504.286 556.8 504.286 cv
556.002 504.286 555.414 504.664 555.036 505.378 cv
554.658 506.092 554.406 506.911 554.322 507.793 cv
554.238 508.675 554.196 509.641 554.196 510.691 cv
554.196 511.489 554.196 512.224 554.238 512.896 cv
554.28 513.589 554.385 514.303 554.553 515.038 cv
554.721 515.773 554.973 516.382 555.351 516.886 cv
555.708 517.39 556.191 517.642 556.8 517.642 cv
f
530.55 501.862 mo
562.05 501.862 li
562.05 499.987 li
530.55 499.987 li
cp
f
gsave
89.3204 476.372 mo
548.55 476.372 li
548.55 23.61 li
89.3204 23.61 li
cp
clp
[1 3 ] 0 dsh
474.629 476.372 mo
474.629 23.61 li
@
grestore
474.629 476.372 mo
474.629 472.372 li
f
474.629 476.372 mo
474.629 472.372 li
@
474.629 23.61 mo
474.629 27.61 li
f
474.629 23.61 mo
474.629 27.61 li
@
469.582 494.362 mo
469.582 493.627 li
471.326 493.627 472.207 493.417 472.207 492.955 cv
472.207 481.93 li
471.472 482.287 470.548 482.455 469.456 482.455 cv
469.456 481.72 li
471.158 481.72 472.459 481.279 473.341 480.376 cv
473.635 480.376 li
473.783 480.439 li
473.845 480.565 li
473.845 492.955 li
473.845 493.417 474.706 493.627 476.47 493.627 cv
476.47 494.362 li
469.582 494.362 li
f
453.582 517.726 mo
453.582 516.991 li
455.326 516.991 456.207 516.781 456.207 516.319 cv
456.207 505.294 li
455.472 505.651 454.548 505.819 453.456 505.819 cv
453.456 505.084 li
455.158 505.084 456.459 504.643 457.341 503.74 cv
457.635 503.74 li
457.783 503.803 li
457.845 503.929 li
457.845 516.319 li
457.845 516.781 458.706 516.991 460.47 516.991 cv
460.47 517.726 li
453.582 517.726 li
f
467.379 518.167 mo
465.658 518.167 464.481 517.474 463.872 516.067 cv
463.242 514.66 462.948 512.98 462.948 511.027 cv
462.948 509.809 463.053 508.675 463.284 507.604 cv
463.494 506.533 463.935 505.63 464.607 504.874 cv
465.258 504.118 466.182 503.74 467.379 503.74 cv
468.303 503.74 469.059 503.971 469.647 504.412 cv
470.235 504.874 470.676 505.441 470.991 506.155 cv
471.285 506.869 471.495 507.646 471.621 508.465 cv
471.727 509.284 471.789 510.145 471.789 511.027 cv
471.789 512.245 471.663 513.358 471.453 514.408 cv
471.222 515.458 470.781 516.361 470.13 517.075 cv
469.479 517.789 468.555 518.167 467.379 518.167 cv
467.379 517.642 mo
468.156 517.642 468.744 517.243 469.122 516.445 cv
469.5 515.647 469.731 514.765 469.815 513.799 cv
469.899 512.833 469.962 511.783 469.962 510.691 cv
469.962 509.641 469.899 508.675 469.815 507.793 cv
469.731 506.911 469.5 506.092 469.122 505.378 cv
468.744 504.664 468.156 504.286 467.379 504.286 cv
466.581 504.286 465.993 504.664 465.615 505.378 cv
465.237 506.092 464.985 506.911 464.901 507.793 cv
464.817 508.675 464.775 509.641 464.775 510.691 cv
464.775 511.489 464.775 512.224 464.817 512.896 cv
464.859 513.589 464.964 514.303 465.132 515.038 cv
465.3 515.773 465.552 516.382 465.93 516.886 cv
466.287 517.39 466.77 517.642 467.379 517.642 cv
f
474.456 515.332 mo
474.582 515.752 474.813 516.13 475.107 516.466 cv
475.401 516.802 475.758 517.054 476.178 517.243 cv
476.577 517.432 476.997 517.516 477.438 517.516 cv
478.446 517.516 479.139 517.138 479.517 516.34 cv
479.895 515.563 480.105 514.618 480.105 513.484 cv
480.105 513.001 480.084 512.602 480.084 512.266 cv
480.063 511.93 480.021 511.615 479.938 511.3 cv
479.811 510.817 479.58 510.397 479.244 510.019 cv
478.908 509.641 478.53 509.452 478.068 509.452 cv
477.585 509.452 477.186 509.536 476.85 509.662 cv
476.514 509.809 476.22 509.977 476.01 510.166 cv
475.8 510.376 475.611 510.565 475.443 510.775 cv
475.275 510.985 475.191 511.111 475.149 511.111 cv
474.918 511.111 li
474.771 511.048 li
474.708 510.922 li
474.708 503.908 li
474.771 503.803 li
474.918 503.74 li
474.981 503.74 li
475.905 504.202 476.913 504.412 477.984 504.412 cv
479.013 504.412 480.021 504.202 480.987 503.74 cv
481.05 503.74 li
481.176 503.803 li
481.24 503.908 li
481.24 504.097 li
481.197 504.202 li
480.714 504.832 480.105 505.336 479.391 505.693 cv
478.677 506.05 477.921 506.218 477.165 506.218 cv
476.598 506.218 476.031 506.155 475.443 505.987 cv
475.443 509.956 li
475.905 509.578 476.304 509.326 476.682 509.158 cv
477.039 508.99 477.501 508.906 478.089 508.906 cv
478.845 508.906 479.538 509.137 480.147 509.578 cv
480.757 510.04 481.218 510.607 481.554 511.321 cv
481.89 512.035 482.058 512.77 482.058 513.505 cv
482.058 514.345 481.848 515.122 481.428 515.836 cv
481.008 516.55 480.462 517.117 479.748 517.537 cv
479.034 517.957 478.278 518.167 477.438 518.167 cv
476.745 518.167 476.115 517.978 475.527 517.642 cv
474.939 517.306 474.498 516.823 474.162 516.214 cv
473.826 515.626 473.679 514.975 473.679 514.303 cv
473.679 513.988 473.763 513.736 473.973 513.526 cv
474.183 513.337 474.435 513.232 474.75 513.232 cv
475.044 513.232 475.317 513.337 475.527 513.547 cv
475.737 513.757 475.842 514.009 475.842 514.303 cv
475.842 514.597 475.737 514.849 475.527 515.059 cv
475.317 515.269 475.044 515.374 474.75 515.374 cv
474.582 515.374 li
474.456 515.332 li
f
488.379 518.167 mo
486.658 518.167 485.481 517.474 484.872 516.067 cv
484.242 514.66 483.948 512.98 483.948 511.027 cv
483.948 509.809 484.053 508.675 484.284 507.604 cv
484.494 506.533 484.935 505.63 485.607 504.874 cv
486.258 504.118 487.182 503.74 488.379 503.74 cv
489.303 503.74 490.059 503.971 490.647 504.412 cv
491.235 504.874 491.676 505.441 491.991 506.155 cv
492.285 506.869 492.495 507.646 492.621 508.465 cv
492.727 509.284 492.789 510.145 492.789 511.027 cv
492.789 512.245 492.663 513.358 492.453 514.408 cv
492.222 515.458 491.781 516.361 491.13 517.075 cv
490.479 517.789 489.555 518.167 488.379 518.167 cv
488.379 517.642 mo
489.156 517.642 489.744 517.243 490.122 516.445 cv
490.5 515.647 490.731 514.765 490.815 513.799 cv
490.899 512.833 490.962 511.783 490.962 510.691 cv
490.962 509.641 490.899 508.675 490.815 507.793 cv
490.731 506.911 490.5 506.092 490.122 505.378 cv
489.744 504.664 489.156 504.286 488.379 504.286 cv
487.581 504.286 486.993 504.664 486.615 505.378 cv
486.237 506.092 485.985 506.911 485.901 507.793 cv
485.817 508.675 485.775 509.641 485.775 510.691 cv
485.775 511.489 485.775 512.224 485.817 512.896 cv
485.859 513.589 485.964 514.303 486.132 515.038 cv
486.3 515.773 486.552 516.382 486.93 516.886 cv
487.287 517.39 487.77 517.642 488.379 517.642 cv
f
451.629 501.862 mo
493.629 501.862 li
493.629 499.987 li
451.629 499.987 li
cp
f
gsave
89.3204 476.372 mo
548.55 476.372 li
548.55 23.61 li
89.3204 23.61 li
cp
clp
[1 3 ] 0 dsh
331.558 476.372 mo
331.558 23.61 li
@
grestore
331.558 476.372 mo
331.558 472.372 li
f
331.558 476.372 mo
331.558 472.372 li
@
331.558 23.61 mo
331.558 27.61 li
f
331.558 23.61 mo
331.558 27.61 li
@
326.511 494.362 mo
326.511 493.627 li
328.254 493.627 329.136 493.417 329.136 492.955 cv
329.136 481.93 li
328.401 482.287 327.477 482.455 326.385 482.455 cv
326.385 481.72 li
328.086 481.72 329.388 481.279 330.27 480.376 cv
330.564 480.376 li
330.711 480.439 li
330.774 480.565 li
330.774 492.955 li
330.774 493.417 331.635 493.627 333.399 493.627 cv
333.399 494.362 li
326.511 494.362 li
f
310.511 517.726 mo
310.511 516.991 li
312.254 516.991 313.136 516.781 313.136 516.319 cv
313.136 505.294 li
312.401 505.651 311.477 505.819 310.385 505.819 cv
310.385 505.084 li
312.086 505.084 313.388 504.643 314.27 503.74 cv
314.564 503.74 li
314.711 503.803 li
314.774 503.929 li
314.774 516.319 li
314.774 516.781 315.635 516.991 317.399 516.991 cv
317.399 517.726 li
310.511 517.726 li
f
320.885 515.332 mo
321.011 515.752 321.242 516.13 321.536 516.466 cv
321.83 516.802 322.187 517.054 322.607 517.243 cv
323.006 517.432 323.426 517.516 323.867 517.516 cv
324.875 517.516 325.568 517.138 325.946 516.34 cv
326.324 515.563 326.534 514.618 326.534 513.484 cv
326.534 513.001 326.513 512.602 326.513 512.266 cv
326.492 511.93 326.45 511.615 326.366 511.3 cv
326.24 510.817 326.009 510.397 325.673 510.019 cv
325.337 509.641 324.959 509.452 324.497 509.452 cv
324.014 509.452 323.615 509.536 323.279 509.662 cv
322.943 509.809 322.649 509.977 322.439 510.166 cv
322.229 510.376 322.04 510.565 321.872 510.775 cv
321.704 510.985 321.62 511.111 321.578 511.111 cv
321.347 511.111 li
321.2 511.048 li
321.137 510.922 li
321.137 503.908 li
321.2 503.803 li
321.347 503.74 li
321.41 503.74 li
322.334 504.202 323.342 504.412 324.413 504.412 cv
325.442 504.412 326.45 504.202 327.416 503.74 cv
327.479 503.74 li
327.605 503.803 li
327.668 503.908 li
327.668 504.097 li
327.626 504.202 li
327.143 504.832 326.534 505.336 325.82 505.693 cv
325.106 506.05 324.35 506.218 323.594 506.218 cv
323.027 506.218 322.46 506.155 321.872 505.987 cv
321.872 509.956 li
322.334 509.578 322.733 509.326 323.111 509.158 cv
323.468 508.99 323.93 508.906 324.518 508.906 cv
325.274 508.906 325.967 509.137 326.576 509.578 cv
327.185 510.04 327.647 510.607 327.983 511.321 cv
328.319 512.035 328.487 512.77 328.487 513.505 cv
328.487 514.345 328.277 515.122 327.857 515.836 cv
327.437 516.55 326.891 517.117 326.177 517.537 cv
325.463 517.957 324.707 518.167 323.867 518.167 cv
323.174 518.167 322.544 517.978 321.956 517.642 cv
321.368 517.306 320.927 516.823 320.591 516.214 cv
320.255 515.626 320.108 514.975 320.108 514.303 cv
320.108 513.988 320.192 513.736 320.402 513.526 cv
320.612 513.337 320.864 513.232 321.179 513.232 cv
321.473 513.232 321.746 513.337 321.956 513.547 cv
322.166 513.757 322.271 514.009 322.271 514.303 cv
322.271 514.597 322.166 514.849 321.956 515.059 cv
321.746 515.269 321.473 515.374 321.179 515.374 cv
321.011 515.374 li
320.885 515.332 li
f
331.385 515.332 mo
331.511 515.752 331.742 516.13 332.036 516.466 cv
332.33 516.802 332.687 517.054 333.107 517.243 cv
333.506 517.432 333.926 517.516 334.367 517.516 cv
335.375 517.516 336.068 517.138 336.446 516.34 cv
336.824 515.563 337.034 514.618 337.034 513.484 cv
337.034 513.001 337.013 512.602 337.013 512.266 cv
336.992 511.93 336.95 511.615 336.866 511.3 cv
336.74 510.817 336.509 510.397 336.173 510.019 cv
335.837 509.641 335.459 509.452 334.997 509.452 cv
334.514 509.452 334.115 509.536 333.779 509.662 cv
333.443 509.809 333.149 509.977 332.939 510.166 cv
332.729 510.376 332.54 510.565 332.372 510.775 cv
332.204 510.985 332.12 511.111 332.078 511.111 cv
331.847 511.111 li
331.7 511.048 li
331.637 510.922 li
331.637 503.908 li
331.7 503.803 li
331.847 503.74 li
331.91 503.74 li
332.834 504.202 333.842 504.412 334.913 504.412 cv
335.942 504.412 336.95 504.202 337.916 503.74 cv
337.979 503.74 li
338.105 503.803 li
338.168 503.908 li
338.168 504.097 li
338.126 504.202 li
337.643 504.832 337.034 505.336 336.32 505.693 cv
335.606 506.05 334.85 506.218 334.094 506.218 cv
333.527 506.218 332.96 506.155 332.372 505.987 cv
332.372 509.956 li
332.834 509.578 333.233 509.326 333.611 509.158 cv
333.968 508.99 334.43 508.906 335.018 508.906 cv
335.774 508.906 336.467 509.137 337.076 509.578 cv
337.685 510.04 338.147 510.607 338.483 511.321 cv
338.819 512.035 338.987 512.77 338.987 513.505 cv
338.987 514.345 338.777 515.122 338.357 515.836 cv
337.937 516.55 337.391 517.117 336.677 517.537 cv
335.963 517.957 335.207 518.167 334.367 518.167 cv
333.674 518.167 333.044 517.978 332.456 517.642 cv
331.868 517.306 331.427 516.823 331.091 516.214 cv
330.755 515.626 330.608 514.975 330.608 514.303 cv
330.608 513.988 330.692 513.736 330.902 513.526 cv
331.112 513.337 331.364 513.232 331.679 513.232 cv
331.973 513.232 332.246 513.337 332.456 513.547 cv
332.666 513.757 332.771 514.009 332.771 514.303 cv
332.771 514.597 332.666 514.849 332.456 515.059 cv
332.246 515.269 331.973 515.374 331.679 515.374 cv
331.511 515.374 li
331.385 515.332 li
f
345.308 518.167 mo
343.586 518.167 342.41 517.474 341.801 516.067 cv
341.171 514.66 340.877 512.98 340.877 511.027 cv
340.877 509.809 340.982 508.675 341.213 507.604 cv
341.423 506.533 341.864 505.63 342.536 504.874 cv
343.187 504.118 344.111 503.74 345.308 503.74 cv
346.232 503.74 346.988 503.971 347.576 504.412 cv
348.164 504.874 348.605 505.441 348.92 506.155 cv
349.214 506.869 349.424 507.646 349.55 508.465 cv
349.655 509.284 349.718 510.145 349.718 511.027 cv
349.718 512.245 349.592 513.358 349.382 514.408 cv
349.151 515.458 348.71 516.361 348.059 517.075 cv
347.408 517.789 346.484 518.167 345.308 518.167 cv
345.308 517.642 mo
346.085 517.642 346.673 517.243 347.051 516.445 cv
347.429 515.647 347.66 514.765 347.744 513.799 cv
347.828 512.833 347.891 511.783 347.891 510.691 cv
347.891 509.641 347.828 508.675 347.744 507.793 cv
347.66 506.911 347.429 506.092 347.051 505.378 cv
346.673 504.664 346.085 504.286 345.308 504.286 cv
344.51 504.286 343.922 504.664 343.544 505.378 cv
343.166 506.092 342.914 506.911 342.83 507.793 cv
342.746 508.675 342.704 509.641 342.704 510.691 cv
342.704 511.489 342.704 512.224 342.746 512.896 cv
342.788 513.589 342.893 514.303 343.061 515.038 cv
343.229 515.773 343.481 516.382 343.859 516.886 cv
344.216 517.39 344.699 517.642 345.308 517.642 cv
f
308.558 501.862 mo
350.558 501.862 li
350.558 499.987 li
308.558 499.987 li
cp
f
gsave
89.3204 476.372 mo
548.55 476.372 li
548.55 23.61 li
89.3204 23.61 li
cp
clp
[1 3 ] 0 dsh
186.341 476.372 mo
186.341 23.61 li
@
grestore
186.341 476.372 mo
186.341 472.372 li
f
186.341 476.372 mo
186.341 472.372 li
@
186.341 23.61 mo
186.341 27.61 li
f
186.341 23.61 mo
186.341 27.61 li
@
181.294 494.362 mo
181.294 493.627 li
183.037 493.627 183.919 493.417 183.919 492.955 cv
183.919 481.93 li
183.184 482.287 182.26 482.455 181.168 482.455 cv
181.168 481.72 li
182.869 481.72 184.171 481.279 185.053 480.376 cv
185.347 480.376 li
185.494 480.439 li
185.557 480.565 li
185.557 492.955 li
185.557 493.417 186.418 493.627 188.182 493.627 cv
188.182 494.362 li
181.294 494.362 li
f
165.336 516.109 mo
165.672 516.592 166.113 516.949 166.659 517.18 cv
167.205 517.411 167.814 517.516 168.444 517.516 cv
169.242 517.516 169.83 517.18 170.166 516.487 cv
170.502 515.794 170.691 514.996 170.691 514.114 cv
170.691 513.736 170.649 513.337 170.586 512.938 cv
170.502 512.539 170.376 512.161 170.208 511.825 cv
170.04 511.489 169.809 511.216 169.515 511.006 cv
169.221 510.796 168.843 510.691 168.423 510.691 cv
167.037 510.691 li
166.911 510.691 166.848 510.628 166.848 510.502 cv
166.848 510.313 li
166.848 510.208 166.911 510.145 167.037 510.145 cv
168.192 510.061 li
168.675 510.061 169.074 509.893 169.41 509.515 cv
169.746 509.137 169.977 508.696 170.124 508.15 cv
170.271 507.625 170.355 507.121 170.355 506.638 cv
170.355 505.966 170.187 505.42 169.872 505 cv
169.557 504.58 169.074 504.349 168.444 504.349 cv
167.898 504.349 167.394 504.454 166.911 504.664 cv
166.428 504.874 166.05 505.168 165.756 505.567 cv
165.819 505.546 li
165.903 505.546 li
166.218 505.546 166.491 505.672 166.701 505.882 cv
166.911 506.092 167.016 506.365 167.016 506.659 cv
167.016 506.974 166.911 507.247 166.701 507.457 cv
166.491 507.667 166.218 507.772 165.903 507.772 cv
165.588 507.772 165.315 507.667 165.105 507.457 cv
164.895 507.247 164.79 506.974 164.79 506.659 cv
164.79 506.071 164.958 505.546 165.336 505.105 cv
165.693 504.664 166.155 504.328 166.722 504.097 cv
167.289 503.866 167.856 503.74 168.444 503.74 cv
168.864 503.74 169.305 503.803 169.788 503.929 cv
170.25 504.055 170.691 504.244 171.069 504.475 cv
171.447 504.727 171.762 505.021 172.014 505.378 cv
172.245 505.756 172.371 506.176 172.371 506.638 cv
172.371 507.226 172.224 507.772 171.972 508.276 cv
171.72 508.78 171.363 509.2 170.901 509.557 cv
170.439 509.935 169.935 510.208 169.389 510.376 cv
169.998 510.502 170.586 510.733 171.132 511.069 cv
171.678 511.405 172.098 511.846 172.434 512.371 cv
172.77 512.917 172.938 513.484 172.938 514.093 cv
172.938 514.87 172.707 515.563 172.287 516.193 cv
171.867 516.823 171.3 517.327 170.628 517.663 cv
169.935 517.999 169.2 518.167 168.444 518.167 cv
167.772 518.167 167.121 518.041 166.47 517.789 cv
165.798 517.558 165.273 517.201 164.853 516.697 cv
164.433 516.193 164.223 515.605 164.223 514.891 cv
164.223 514.555 164.328 514.261 164.559 514.03 cv
164.79 513.799 165.084 513.673 165.441 513.673 cv
165.651 513.673 165.861 513.736 166.05 513.841 cv
166.239 513.946 166.386 514.093 166.491 514.282 cv
166.596 514.492 166.659 514.681 166.659 514.891 cv
166.659 515.248 166.533 515.542 166.302 515.773 cv
166.05 516.004 165.777 516.109 165.441 516.109 cv
165.336 516.109 li
f
179.091 518.167 mo
177.369 518.167 176.193 517.474 175.584 516.067 cv
174.954 514.66 174.66 512.98 174.66 511.027 cv
174.66 509.809 174.765 508.675 174.996 507.604 cv
175.206 506.533 175.647 505.63 176.319 504.874 cv
176.97 504.118 177.894 503.74 179.091 503.74 cv
180.015 503.74 180.771 503.971 181.359 504.412 cv
181.947 504.874 182.388 505.441 182.703 506.155 cv
182.997 506.869 183.207 507.646 183.333 508.465 cv
183.438 509.284 183.501 510.145 183.501 511.027 cv
183.501 512.245 183.375 513.358 183.165 514.408 cv
182.934 515.458 182.493 516.361 181.842 517.075 cv
181.191 517.789 180.267 518.167 179.091 518.167 cv
179.091 517.642 mo
179.868 517.642 180.456 517.243 180.834 516.445 cv
181.212 515.647 181.443 514.765 181.527 513.799 cv
181.611 512.833 181.674 511.783 181.674 510.691 cv
181.674 509.641 181.611 508.675 181.527 507.793 cv
181.443 506.911 181.212 506.092 180.834 505.378 cv
180.456 504.664 179.868 504.286 179.091 504.286 cv
178.293 504.286 177.705 504.664 177.327 505.378 cv
176.949 506.092 176.697 506.911 176.613 507.793 cv
176.529 508.675 176.487 509.641 176.487 510.691 cv
176.487 511.489 176.487 512.224 176.529 512.896 cv
176.571 513.589 176.676 514.303 176.844 515.038 cv
177.012 515.773 177.264 516.382 177.642 516.886 cv
177.999 517.39 178.482 517.642 179.091 517.642 cv
f
189.591 518.167 mo
187.869 518.167 186.693 517.474 186.084 516.067 cv
185.454 514.66 185.16 512.98 185.16 511.027 cv
185.16 509.809 185.265 508.675 185.496 507.604 cv
185.706 506.533 186.147 505.63 186.819 504.874 cv
187.47 504.118 188.394 503.74 189.591 503.74 cv
190.515 503.74 191.271 503.971 191.859 504.412 cv
192.447 504.874 192.888 505.441 193.203 506.155 cv
193.497 506.869 193.707 507.646 193.833 508.465 cv
193.938 509.284 194.001 510.145 194.001 511.027 cv
194.001 512.245 193.875 513.358 193.665 514.408 cv
193.434 515.458 192.993 516.361 192.342 517.075 cv
191.691 517.789 190.767 518.167 189.591 518.167 cv
189.591 517.642 mo
190.368 517.642 190.956 517.243 191.334 516.445 cv
191.712 515.647 191.943 514.765 192.027 513.799 cv
192.111 512.833 192.174 511.783 192.174 510.691 cv
192.174 509.641 192.111 508.675 192.027 507.793 cv
191.943 506.911 191.712 506.092 191.334 505.378 cv
190.956 504.664 190.368 504.286 189.591 504.286 cv
188.793 504.286 188.205 504.664 187.827 505.378 cv
187.449 506.092 187.197 506.911 187.113 507.793 cv
187.029 508.675 186.987 509.641 186.987 510.691 cv
186.987 511.489 186.987 512.224 187.029 512.896 cv
187.071 513.589 187.176 514.303 187.344 515.038 cv
187.512 515.773 187.764 516.382 188.142 516.886 cv
188.499 517.39 188.982 517.642 189.591 517.642 cv
f
200.091 518.167 mo
198.369 518.167 197.193 517.474 196.584 516.067 cv
195.954 514.66 195.66 512.98 195.66 511.027 cv
195.66 509.809 195.765 508.675 195.996 507.604 cv
196.206 506.533 196.647 505.63 197.319 504.874 cv
197.97 504.118 198.894 503.74 200.091 503.74 cv
201.015 503.74 201.771 503.971 202.359 504.412 cv
202.947 504.874 203.388 505.441 203.703 506.155 cv
203.997 506.869 204.207 507.646 204.333 508.465 cv
204.438 509.284 204.501 510.145 204.501 511.027 cv
204.501 512.245 204.375 513.358 204.165 514.408 cv
203.934 515.458 203.493 516.361 202.842 517.075 cv
202.191 517.789 201.267 518.167 200.091 518.167 cv
200.091 517.642 mo
200.868 517.642 201.456 517.243 201.834 516.445 cv
202.212 515.647 202.443 514.765 202.527 513.799 cv
202.611 512.833 202.674 511.783 202.674 510.691 cv
202.674 509.641 202.611 508.675 202.527 507.793 cv
202.443 506.911 202.212 506.092 201.834 505.378 cv
201.456 504.664 200.868 504.286 200.091 504.286 cv
199.293 504.286 198.705 504.664 198.327 505.378 cv
197.949 506.092 197.697 506.911 197.613 507.793 cv
197.529 508.675 197.487 509.641 197.487 510.691 cv
197.487 511.489 197.487 512.224 197.529 512.896 cv
197.571 513.589 197.676 514.303 197.844 515.038 cv
198.012 515.773 198.264 516.382 198.642 516.886 cv
198.999 517.39 199.482 517.642 200.091 517.642 cv
f
163.341 501.862 mo
205.341 501.862 li
205.341 499.987 li
163.341 499.987 li
cp
f
298.563 536.032 mo
298.563 535.419 li
300.015 535.419 300.75 535.244 300.75 534.859 cv
300.75 525.672 li
300.138 525.969 299.368 526.109 298.458 526.109 cv
298.458 525.497 li
299.875 525.497 300.96 525.129 301.695 524.377 cv
301.94 524.377 li
302.063 524.429 li
302.115 524.534 li
302.115 534.859 li
302.115 535.244 302.833 535.419 304.303 535.419 cv
304.303 536.032 li
298.563 536.032 li
f
296.74 555.572 mo
296.775 555.414 li
296.845 555.257 li
296.985 555.187 li
297.983 555.187 298.648 555.169 298.98 555.099 cv
299.295 555.029 299.47 554.854 299.54 554.592 cv
301.938 544.984 li
301.973 544.844 302.008 544.722 302.008 544.599 cv
302.008 544.512 301.798 544.459 301.395 544.459 cv
300.38 544.459 li
299.593 544.459 298.98 544.582 298.56 544.827 cv
298.14 545.072 297.825 545.387 297.633 545.772 cv
297.423 546.157 297.178 546.804 296.863 547.697 cv
296.828 547.802 296.758 547.854 296.688 547.854 cv
296.53 547.854 li
296.408 547.854 296.355 547.784 296.355 547.627 cv
297.598 544.004 li
297.615 543.899 297.668 543.847 297.773 543.847 cv
308.115 543.847 li
308.22 543.847 308.29 543.934 308.29 544.074 cv
307.713 547.697 li
307.643 547.802 li
307.538 547.854 li
307.38 547.854 li
307.258 547.854 307.205 547.784 307.205 547.627 cv
307.328 546.804 307.398 546.227 307.398 545.877 cv
307.398 545.474 307.31 545.159 307.135 544.949 cv
306.96 544.739 306.733 544.617 306.47 544.547 cv
306.19 544.494 305.84 544.459 305.403 544.459 cv
304.37 544.459 li
304.055 544.459 303.845 544.494 303.74 544.547 cv
303.635 544.617 303.53 544.774 303.46 545.054 cv
301.063 554.662 li
301.045 554.732 li
301.028 554.819 li
301.028 554.977 301.115 555.064 301.29 555.099 cv
301.588 555.169 302.235 555.187 303.233 555.187 cv
303.338 555.187 303.408 555.274 303.408 555.414 cv
303.355 555.589 303.32 555.694 303.303 555.729 cv
303.268 555.782 303.215 555.799 303.11 555.799 cv
296.915 555.799 li
296.793 555.799 296.74 555.729 296.74 555.572 cv
f
312.23 551.64 mo
312.23 526.665 li
315.655 526.665 li
315.655 527.665 li
313.23 527.665 li
313.23 550.64 li
315.655 550.64 li
315.655 551.64 li
312.23 551.64 li
f
320.829 536.032 mo
320.829 535.419 li
322.281 535.419 323.016 535.244 323.016 534.859 cv
323.016 525.672 li
322.404 525.969 321.634 526.109 320.724 526.109 cv
320.724 525.497 li
322.141 525.497 323.226 525.129 323.961 524.377 cv
324.206 524.377 li
324.329 524.429 li
324.381 524.534 li
324.381 534.859 li
324.381 535.244 325.099 535.419 326.569 535.419 cv
326.569 536.032 li
320.829 536.032 li
f
317.024 555.799 mo
316.901 555.799 316.849 555.729 316.849 555.572 cv
316.884 555.414 li
316.954 555.257 li
317.076 555.187 li
317.776 555.187 318.284 555.152 318.564 555.064 cv
318.704 555.029 318.826 554.872 318.896 554.592 cv
321.294 544.984 li
321.311 544.879 321.329 544.792 321.329 544.739 cv
321.329 544.617 321.259 544.547 321.119 544.529 cv
320.891 544.494 320.471 544.459 319.859 544.459 cv
319.736 544.459 319.684 544.389 319.684 544.232 cv
319.719 544.092 319.754 543.987 319.789 543.934 cv
319.806 543.882 319.876 543.847 319.981 543.847 cv
324.689 543.847 li
324.794 543.847 324.864 543.934 324.864 544.074 cv
324.829 544.232 li
324.759 544.389 li
324.636 544.459 li
323.919 544.459 323.429 544.512 323.149 544.582 cv
322.991 544.652 322.886 544.809 322.816 545.054 cv
321.399 550.724 li
328.259 545.422 li
328.259 545.404 328.329 545.334 328.469 545.194 cv
328.609 545.054 328.679 544.932 328.679 544.792 cv
328.679 544.582 328.469 544.459 328.084 544.459 cv
327.961 544.459 327.909 544.389 327.909 544.232 cv
327.961 544.022 li
328.031 543.899 li
328.206 543.847 li
331.601 543.847 li
331.724 543.917 li
331.776 544.074 li
331.741 544.232 li
331.654 544.407 li
331.531 544.459 li
330.674 544.459 329.746 544.862 328.731 545.649 cv
328.696 545.667 li
328.661 545.667 li
328.644 545.684 li
325.039 548.484 li
327.664 554.627 li
327.804 554.889 327.979 555.047 328.171 555.099 cv
328.346 555.169 328.626 555.187 329.011 555.187 cv
329.116 555.187 329.186 555.274 329.186 555.414 cv
329.151 555.554 329.116 555.659 329.081 555.712 cv
328.889 555.799 li
324.829 555.799 li
324.724 555.799 324.671 555.729 324.671 555.572 cv
324.671 555.467 324.689 555.362 324.724 555.292 cv
324.741 555.222 324.794 555.187 324.899 555.187 cv
325.179 555.187 325.441 555.169 325.651 555.099 cv
325.861 555.047 325.966 554.907 325.966 554.679 cv
325.949 554.504 li
323.779 549.447 li
321.224 551.424 li
320.419 554.662 li
320.384 554.802 320.384 554.889 320.384 554.907 cv
320.384 555.029 320.454 555.099 320.594 555.117 cv
320.804 555.169 321.224 555.187 321.854 555.187 cv
321.959 555.187 322.029 555.274 322.029 555.414 cv
321.994 555.589 321.959 555.694 321.941 555.729 cv
321.906 555.782 321.836 555.799 321.731 555.799 cv
317.024 555.799 li
f
334.736 551.64 mo
334.736 550.64 li
337.161 550.64 li
337.161 527.665 li
334.736 527.665 li
334.736 526.665 li
338.161 526.665 li
338.161 551.64 li
334.736 551.64 li
f
295.935 542.282 mo
306.155 542.282 li
306.155 540.719 li
295.935 540.719 li
cp
f
316.201 542.282 mo
331.061 542.282 li
331.061 540.719 li
316.201 540.719 li
cp
f
gsave
89.3204 476.372 mo
548.55 476.372 li
548.55 23.61 li
89.3204 23.61 li
cp
clp
[1 3 ] 0 dsh
89.3204 476.372 mo
548.55 476.372 li
@
grestore
89.3204 476.372 mo
93.3204 476.372 li
f
89.3204 476.372 mo
93.3204 476.372 li
@
548.55 476.372 mo
544.55 476.372 li
f
548.55 476.372 mo
544.55 476.372 li
@
43.8004 481.447 mo
47.0204 481.447 li
47.0204 470.327 li
43.5204 471.027 li
43.5204 469.227 li
47.0004 468.527 li
48.9804 468.527 li
48.9804 481.447 li
52.2004 481.447 li
52.2004 483.107 li
43.8004 483.107 li
43.8004 481.447 li
f
60.405 469.827 mo
59.385 469.827 58.625 470.327 58.105 471.327 cv
57.585 472.327 57.345 473.827 57.345 475.827 cv
57.345 477.827 57.585 479.327 58.105 480.327 cv
58.625 481.327 59.385 481.827 60.405 481.827 cv
61.425 481.827 62.185 481.327 62.705 480.327 cv
63.205 479.327 63.465 477.827 63.465 475.827 cv
63.465 473.827 63.205 472.327 62.705 471.327 cv
62.185 470.327 61.425 469.827 60.405 469.827 cv
60.405 468.267 mo
62.025 468.267 63.265 468.927 64.145 470.207 cv
65.005 471.507 65.445 473.387 65.445 475.827 cv
65.445 478.287 65.005 480.167 64.145 481.447 cv
63.265 482.727 62.025 483.367 60.405 483.367 cv
58.765 483.367 57.505 482.727 56.645 481.447 cv
55.785 480.167 55.365 478.287 55.365 475.827 cv
55.365 473.387 55.785 471.507 56.645 470.207 cv
57.505 468.927 58.765 468.267 60.405 468.267 cv
f
67.4556 468.211 mo
71.1376 468.211 li
71.1376 469.331 li
67.4556 469.331 li
67.4556 468.211 li
f
77.5053 467.105 mo
78.1633 467.245 78.6813 467.539 79.0453 467.987 cv
79.4093 468.435 79.6053 468.995 79.6053 469.639 cv
79.6053 470.647 79.2553 471.431 78.5693 471.977 cv
77.8693 472.523 76.8893 472.789 75.6153 472.789 cv
75.1813 472.789 74.7333 472.747 74.2853 472.663 cv
73.8373 472.593 73.3613 472.467 72.8853 472.299 cv
72.8853 470.969 li
73.2633 471.193 73.6833 471.361 74.1453 471.473 cv
74.5933 471.585 75.0693 471.641 75.5733 471.641 cv
76.4413 471.641 77.0993 471.473 77.5473 471.137 cv
77.9953 470.801 78.2333 470.297 78.2333 469.639 cv
78.2333 469.051 78.0233 468.575 77.6033 468.239 cv
77.1833 467.903 76.5953 467.721 75.8393 467.721 cv
74.6493 467.721 li
74.6493 466.587 li
75.8953 466.587 li
76.5673 466.587 77.0853 466.461 77.4493 466.181 cv
77.8133 465.915 77.9953 465.523 77.9953 465.005 cv
77.9953 464.487 77.7993 464.081 77.4353 463.801 cv
77.0573 463.521 76.5253 463.381 75.8393 463.381 cv
75.4613 463.381 75.0553 463.423 74.6213 463.507 cv
74.1873 463.591 73.7113 463.717 73.1933 463.885 cv
73.1933 462.653 li
73.7113 462.513 74.2013 462.401 74.6633 462.331 cv
75.1113 462.261 75.5453 462.219 75.9653 462.219 cv
77.0013 462.219 77.8273 462.457 78.4433 462.933 cv
79.0593 463.409 79.3673 464.053 79.3673 464.865 cv
79.3673 465.425 79.1993 465.901 78.8773 466.293 cv
78.5553 466.685 78.0933 466.965 77.5053 467.105 cv
f
gsave
89.3204 476.372 mo
548.55 476.372 li
548.55 23.61 li
89.3204 23.61 li
cp
clp
[1 3 ] 0 dsh
89.3204 249.991 mo
548.55 249.991 li
@
grestore
89.3204 249.991 mo
93.3204 249.991 li
f
89.3204 249.991 mo
93.3204 249.991 li
@
548.55 249.991 mo
544.55 249.991 li
f
548.55 249.991 mo
544.55 249.991 li
@
43.8004 255.066 mo
47.0204 255.066 li
47.0204 243.946 li
43.5204 244.646 li
43.5204 242.846 li
47.0004 242.146 li
48.9804 242.146 li
48.9804 255.066 li
52.2004 255.066 li
52.2004 256.726 li
43.8004 256.726 li
43.8004 255.066 li
f
60.405 243.446 mo
59.385 243.446 58.625 243.946 58.105 244.946 cv
57.585 245.946 57.345 247.446 57.345 249.446 cv
57.345 251.446 57.585 252.946 58.105 253.946 cv
58.625 254.946 59.385 255.446 60.405 255.446 cv
61.425 255.446 62.185 254.946 62.705 253.946 cv
63.205 252.946 63.465 251.446 63.465 249.446 cv
63.465 247.446 63.205 245.946 62.705 244.946 cv
62.185 243.946 61.425 243.446 60.405 243.446 cv
60.405 241.886 mo
62.025 241.886 63.265 242.546 64.145 243.826 cv
65.005 245.126 65.445 247.006 65.445 249.446 cv
65.445 251.906 65.005 253.786 64.145 255.066 cv
63.265 256.346 62.025 256.986 60.405 256.986 cv
58.765 256.986 57.505 256.346 56.645 255.066 cv
55.785 253.786 55.365 251.906 55.365 249.446 cv
55.365 247.006 55.785 245.126 56.645 243.826 cv
57.505 242.546 58.765 241.886 60.405 241.886 cv
f
67.4556 241.83 mo
71.1376 241.83 li
71.1376 242.95 li
67.4556 242.95 li
67.4556 241.83 li
f
74.5093 245.064 mo
79.3253 245.064 li
79.3253 246.226 li
72.8433 246.226 li
72.8433 245.064 li
73.3613 244.532 74.0753 243.804 74.9853 242.88 cv
75.8813 241.97 76.4553 241.382 76.6933 241.116 cv
77.1413 240.626 77.4493 240.206 77.6173 239.856 cv
77.7853 239.52 77.8833 239.17 77.8833 238.834 cv
77.8833 238.302 77.6873 237.854 77.3093 237.518 cv
76.9313 237.182 76.4413 237 75.8253 237 cv
75.3913 237 74.9293 237.084 74.4533 237.224 cv
73.9773 237.378 73.4593 237.602 72.9133 237.91 cv
72.9133 236.51 li
73.4733 236.286 73.9913 236.118 74.4673 236.006 cv
74.9433 235.894 75.3913 235.838 75.7973 235.838 cv
76.8473 235.838 77.6873 236.104 78.3173 236.636 cv
78.9473 237.168 79.2693 237.868 79.2693 238.75 cv
79.2693 239.17 79.1853 239.576 79.0313 239.94 cv
78.8773 240.318 78.5973 240.766 78.1773 241.27 cv
78.0653 241.41 77.7013 241.788 77.0853 242.418 cv
76.4693 243.048 75.6153 243.93 74.5093 245.064 cv
f
gsave
89.3204 476.372 mo
548.55 476.372 li
548.55 23.61 li
89.3204 23.61 li
cp
clp
[1 3 ] 0 dsh
89.3204 23.61 mo
548.55 23.61 li
@
grestore
89.3204 23.61 mo
93.3204 23.61 li
f
89.3204 23.61 mo
93.3204 23.61 li
@
548.55 23.61 mo
544.55 23.61 li
f
548.55 23.61 mo
544.55 23.61 li
@
43.8004 28.4984 mo
47.0204 28.4984 li
47.0204 17.3784 li
43.5204 18.0784 li
43.5204 16.2784 li
47.0004 15.5784 li
48.9804 15.5784 li
48.9804 28.4984 li
52.2004 28.4984 li
52.2004 30.1584 li
43.8004 30.1584 li
43.8004 28.4984 li
f
60.405 16.8784 mo
59.385 16.8784 58.625 17.3784 58.105 18.3784 cv
57.585 19.3784 57.345 20.8784 57.345 22.8784 cv
57.345 24.8784 57.585 26.3784 58.105 27.3784 cv
58.625 28.3784 59.385 28.8784 60.405 28.8784 cv
61.425 28.8784 62.185 28.3784 62.705 27.3784 cv
63.205 26.3784 63.465 24.8784 63.465 22.8784 cv
63.465 20.8784 63.205 19.3784 62.705 18.3784 cv
62.185 17.3784 61.425 16.8784 60.405 16.8784 cv
60.405 15.3184 mo
62.025 15.3184 63.265 15.9784 64.145 17.2584 cv
65.005 18.5584 65.445 20.4384 65.445 22.8784 cv
65.445 25.3384 65.005 27.2184 64.145 28.4984 cv
63.265 29.7784 62.025 30.4184 60.405 30.4184 cv
58.765 30.4184 57.505 29.7784 56.645 28.4984 cv
55.785 27.2184 55.365 25.3384 55.365 22.8784 cv
55.365 20.4384 55.785 18.5584 56.645 17.2584 cv
57.505 15.9784 58.765 15.3184 60.405 15.3184 cv
f
67.4556 15.2624 mo
71.1376 15.2624 li
71.1376 16.3824 li
67.4556 16.3824 li
67.4556 15.2624 li
f
73.5573 18.4964 mo
75.8113 18.4964 li
75.8113 10.7124 li
73.3613 11.2024 li
73.3613 9.94242 li
75.7973 9.45242 li
77.1833 9.45242 li
77.1833 18.4964 li
79.4373 18.4964 li
79.4373 19.6584 li
73.5573 19.6584 li
73.5573 18.4964 li
f
89.3204 408.225 mo
91.3204 408.225 li
f
89.3204 408.225 mo
91.3204 408.225 li
@
548.55 408.225 mo
546.55 408.225 li
f
548.55 408.225 mo
546.55 408.225 li
@
89.3204 368.361 mo
91.3204 368.361 li
f
89.3204 368.361 mo
91.3204 368.361 li
@
548.55 368.361 mo
546.55 368.361 li
f
548.55 368.361 mo
546.55 368.361 li
@
89.3204 340.077 mo
91.3204 340.077 li
f
89.3204 340.077 mo
91.3204 340.077 li
@
548.55 340.077 mo
546.55 340.077 li
f
548.55 340.077 mo
546.55 340.077 li
@
89.3204 318.139 mo
91.3204 318.139 li
f
89.3204 318.139 mo
91.3204 318.139 li
@
548.55 318.139 mo
546.55 318.139 li
f
548.55 318.139 mo
546.55 318.139 li
@
89.3204 300.214 mo
91.3204 300.214 li
f
89.3204 300.214 mo
91.3204 300.214 li
@
548.55 300.214 mo
546.55 300.214 li
f
548.55 300.214 mo
546.55 300.214 li
@
89.3204 285.058 mo
91.3204 285.058 li
f
89.3204 285.058 mo
91.3204 285.058 li
@
548.55 285.058 mo
546.55 285.058 li
f
548.55 285.058 mo
546.55 285.058 li
@
89.3204 271.93 mo
91.3204 271.93 li
f
89.3204 271.93 mo
91.3204 271.93 li
@
548.55 271.93 mo
546.55 271.93 li
f
548.55 271.93 mo
546.55 271.93 li
@
89.3204 260.35 mo
91.3204 260.35 li
f
89.3204 260.35 mo
91.3204 260.35 li
@
548.55 260.35 mo
546.55 260.35 li
f
548.55 260.35 mo
546.55 260.35 li
@
89.3204 181.844 mo
91.3204 181.844 li
f
89.3204 181.844 mo
91.3204 181.844 li
@
548.55 181.844 mo
546.55 181.844 li
f
548.55 181.844 mo
546.55 181.844 li
@
89.3204 141.98 mo
91.3204 141.98 li
f
89.3204 141.98 mo
91.3204 141.98 li
@
548.55 141.98 mo
546.55 141.98 li
f
548.55 141.98 mo
546.55 141.98 li
@
89.3204 113.696 mo
91.3204 113.696 li
f
89.3204 113.696 mo
91.3204 113.696 li
@
548.55 113.696 mo
546.55 113.696 li
f
548.55 113.696 mo
546.55 113.696 li
@
89.3204 91.7575 mo
91.3204 91.7575 li
f
89.3204 91.7575 mo
91.3204 91.7575 li
@
548.55 91.7575 mo
546.55 91.7575 li
f
548.55 91.7575 mo
546.55 91.7575 li
@
89.3204 73.8324 mo
91.3204 73.8324 li
f
89.3204 73.8324 mo
91.3204 73.8324 li
@
548.55 73.8324 mo
546.55 73.8324 li
f
548.55 73.8324 mo
546.55 73.8324 li
@
89.3204 58.6769 mo
91.3204 58.6769 li
f
89.3204 58.6769 mo
91.3204 58.6769 li
@
548.55 58.6769 mo
546.55 58.6769 li
f
548.55 58.6769 mo
546.55 58.6769 li
@
89.3204 45.5486 mo
91.3204 45.5486 li
f
89.3204 45.5486 mo
91.3204 45.5486 li
@
548.55 45.5486 mo
546.55 45.5486 li
f
548.55 45.5486 mo
546.55 45.5486 li
@
89.3204 33.9686 mo
91.3204 33.9686 li
f
89.3204 33.9686 mo
91.3204 33.9686 li
@
548.55 33.9686 mo
546.55 33.9686 li
f
548.55 33.9686 mo
546.55 33.9686 li
@
29.3204 291.316 mo
29.3204 291.516 29.2454 291.691 29.1454 291.841 cv
29.0454 291.991 28.8704 292.066 28.6454 292.066 cv
28.5454 292.066 28.4704 292.066 28.4204 292.041 cv
20.9704 290.166 li
20.5204 290.066 20.0954 289.991 19.7454 289.991 cv
19.0454 289.991 18.6704 290.241 18.6704 290.716 cv
18.6704 291.241 18.9954 291.641 19.6204 291.891 cv
20.2454 292.141 21.0204 292.391 21.9704 292.616 cv
22.0954 292.691 li
22.1204 292.816 li
22.1204 293.116 li
22.0454 293.266 li
21.8704 293.316 li
21.1454 293.141 20.5204 292.966 20.0204 292.791 cv
19.5204 292.641 19.0704 292.366 18.6454 292.016 cv
18.2454 291.666 18.0204 291.241 18.0204 290.691 cv
18.0204 290.091 18.2204 289.541 18.6204 289.041 cv
19.0204 288.566 19.5204 288.316 20.1204 288.316 cv
19.4704 287.841 18.9704 287.266 18.5954 286.616 cv
18.2204 285.966 18.0204 285.241 18.0204 284.441 cv
18.0204 283.591 18.2704 282.891 18.7204 282.366 cv
19.1954 281.841 19.8704 281.566 20.7204 281.566 cv
21.2204 281.566 21.6954 281.641 22.0954 281.741 cv
33.6454 284.641 li
33.8704 284.691 34.0704 284.816 34.2204 285.016 cv
34.3704 285.216 34.4454 285.416 34.4454 285.666 cv
34.4454 285.866 34.3704 286.041 34.2454 286.191 cv
34.1204 286.341 33.9454 286.416 33.7454 286.416 cv
33.6454 286.416 33.5704 286.416 33.5454 286.391 cv
22.0454 283.516 li
21.3704 283.366 20.7954 283.266 20.3454 283.266 cv
19.8954 283.266 19.4954 283.366 19.1704 283.566 cv
18.8454 283.766 18.6704 284.066 18.6704 284.491 cv
18.6704 286.141 19.6954 287.491 21.6954 288.566 cv
28.5204 290.266 li
28.7704 290.316 28.9454 290.441 29.0954 290.641 cv
29.2454 290.841 29.3204 291.066 29.3204 291.316 cv
f
35.2954 269.86 mo
10.3204 269.86 li
10.3204 266.435 li
11.3204 266.435 li
11.3204 268.86 li
34.2954 268.86 li
34.2954 266.435 li
35.2954 266.435 li
35.2954 269.86 li
f
29.0704 264.663 mo
29.0704 264.838 28.9704 264.913 28.7454 264.913 cv
28.6954 264.913 28.6204 264.888 28.5204 264.863 cv
28.4204 264.863 28.3454 264.813 28.2954 264.763 cv
28.1954 264.588 li
28.1954 263.588 28.1454 262.863 28.0204 262.463 cv
27.9704 262.263 27.7454 262.088 27.3454 261.988 cv
13.6204 258.563 li
13.4704 258.538 13.3454 258.513 13.2704 258.513 cv
13.0954 258.513 12.9954 258.613 12.9704 258.813 cv
12.9204 259.138 12.8704 259.738 12.8704 260.613 cv
12.8704 260.788 12.7704 260.863 12.5454 260.863 cv
12.4954 260.863 12.4204 260.838 12.3204 260.813 cv
12.2204 260.788 12.1454 260.763 12.0954 260.713 cv
11.9954 260.538 li
11.9954 251.913 li
11.9954 251.138 12.1454 250.388 12.4204 249.638 cv
12.7204 248.888 13.1454 248.288 13.7204 247.813 cv
14.2954 247.338 14.9954 247.088 15.7954 247.088 cv
16.8704 247.088 17.8204 247.463 18.6454 248.213 cv
19.4704 248.963 20.1204 249.888 20.5704 250.988 cv
21.0454 252.113 21.2704 253.188 21.2704 254.213 cv
21.2704 258.288 li
27.4454 259.813 li
27.6204 259.863 27.7454 259.863 27.7954 259.863 cv
27.9704 259.838 li
28.0454 259.738 li
28.0704 259.713 28.0954 259.663 28.0954 259.563 cv
28.1704 259.263 28.1954 258.663 28.1954 257.763 cv
28.1954 257.613 28.3204 257.513 28.5204 257.513 cv
28.7704 257.563 28.9204 257.613 28.9704 257.638 cv
29.0454 257.688 29.0704 257.788 29.0704 257.938 cv
29.0704 264.663 li
20.5204 258.163 mo
20.5204 254.663 li
20.5204 253.063 20.0954 251.813 19.2204 250.963 cv
18.7954 250.538 18.1704 250.188 17.3454 249.913 cv
16.5454 249.638 15.7954 249.488 15.1454 249.488 cv
14.3454 249.488 13.7454 249.813 13.3954 250.438 cv
13.0454 251.063 12.8704 251.838 12.8704 252.763 cv
12.8704 255.163 li
12.8704 255.613 12.9204 255.913 12.9954 256.063 cv
13.0704 256.213 13.3204 256.363 13.7204 256.463 cv
20.5204 258.163 li
f
29.3204 245.486 mo
29.3204 246.536 28.9454 247.386 28.1454 247.986 cv
27.3704 248.586 26.4454 248.886 25.3454 248.886 cv
24.2954 248.886 23.1704 248.611 22.0204 248.061 cv
20.8704 247.511 19.9204 246.786 19.1704 245.836 cv
18.4204 244.886 18.0204 243.886 18.0204 242.786 cv
18.0204 242.286 18.1704 241.861 18.4204 241.461 cv
18.6954 241.061 19.0704 240.761 19.5204 240.536 cv
18.8704 240.361 18.5204 239.986 18.5204 239.436 cv
18.5204 239.236 18.5954 239.061 18.7204 238.911 cv
18.8454 238.761 19.0204 238.686 19.2204 238.686 cv
19.3454 238.711 li
19.4204 238.711 li
26.3954 240.461 li
26.8954 240.586 27.3204 240.636 27.6204 240.636 cv
28.3454 240.636 28.6954 240.411 28.6954 239.911 cv
28.6954 239.411 28.3704 239.011 27.6954 238.736 cv
27.0454 238.461 26.2704 238.236 25.3954 238.036 cv
25.2954 238.011 25.2454 237.936 25.2454 237.836 cv
25.2454 237.536 li
25.3454 237.386 li
25.4954 237.311 li
26.6704 237.611 27.5954 237.936 28.2954 238.286 cv
28.9954 238.636 29.3204 239.186 29.3204 239.961 cv
29.3204 240.536 29.1454 241.036 28.8454 241.461 cv
28.5454 241.886 28.0954 242.161 27.5454 242.261 cv
28.7454 243.336 29.3204 244.411 29.3204 245.486 cv
28.6954 245.461 mo
28.6954 244.861 28.4704 244.286 28.0204 243.711 cv
27.5704 243.161 27.0454 242.661 26.4204 242.261 cv
26.3454 242.236 li
20.9204 240.886 li
20.8454 240.861 li
20.2454 240.961 19.7454 241.186 19.3204 241.511 cv
18.8954 241.861 18.6704 242.286 18.6704 242.836 cv
18.6704 243.411 18.9204 243.936 19.3704 244.411 cv
19.8204 244.911 20.3704 245.311 20.9954 245.636 cv
21.6704 245.986 22.5954 246.286 23.7454 246.586 cv
24.8954 246.886 25.7954 247.011 26.4454 247.011 cv
27.0454 247.011 27.5704 246.886 28.0204 246.636 cv
28.4704 246.386 28.6954 246.011 28.6954 245.461 cv
f
22.8204 230.151 mo
22.5954 230.151 22.3704 230.101 22.1454 229.976 cv
21.9454 229.851 21.7704 229.676 21.6454 229.451 cv
21.5204 229.251 21.4454 229.026 21.4454 228.776 cv
21.4454 228.551 21.5204 228.326 21.6454 228.101 cv
21.7704 227.901 21.9454 227.726 22.1454 227.601 cv
22.3704 227.476 22.5954 227.401 22.8204 227.401 cv
23.1954 227.401 23.5204 227.551 23.7954 227.801 cv
24.0704 228.076 24.1954 228.401 24.1954 228.776 cv
24.1954 229.151 24.0704 229.476 23.7954 229.751 cv
23.5204 230.026 23.1954 230.151 22.8204 230.151 cv
f
27.5454 222.951 mo
28.3204 222.501 28.6954 221.602 28.6954 220.251 cv
28.6954 219.676 28.5954 219.126 28.3954 218.602 cv
28.1954 218.076 27.8954 217.626 27.4954 217.276 cv
27.0954 216.926 26.6204 216.751 26.0454 216.751 cv
25.6204 216.751 25.2704 216.926 24.9954 217.227 cv
24.7204 217.526 24.5204 217.901 24.4204 218.352 cv
24.1454 219.701 li
23.9954 220.326 23.7204 220.826 23.2954 221.227 cv
22.8704 221.626 22.3454 221.826 21.7454 221.826 cv
21.0204 221.826 20.3704 221.626 19.7954 221.227 cv
19.2204 220.826 18.7704 220.301 18.4704 219.651 cv
18.1704 219.001 18.0204 218.301 18.0204 217.576 cv
18.0204 216.826 18.2204 216.151 18.5704 215.551 cv
18.9454 214.951 19.4704 214.651 20.1704 214.651 cv
20.5704 214.651 20.8954 214.776 21.1954 214.977 cv
21.4954 215.201 21.6204 215.501 21.6204 215.876 cv
21.6204 216.102 21.5704 216.301 21.4204 216.451 cv
21.2704 216.602 21.0954 216.676 20.8704 216.676 cv
20.6704 216.676 20.4954 216.626 20.2954 216.526 cv
20.1204 216.426 19.9704 216.276 19.8704 216.076 cv
19.7704 215.901 19.6954 215.701 19.6954 215.501 cv
19.3454 215.651 19.0954 215.926 18.9204 216.326 cv
18.7704 216.727 18.6704 217.176 18.6704 217.626 cv
18.6704 218.076 18.7704 218.501 18.9204 218.901 cv
19.0954 219.326 19.3454 219.676 19.6704 219.926 cv
20.0204 220.176 20.3954 220.301 20.8454 220.301 cv
21.1454 220.301 21.4204 220.201 21.6454 220.001 cv
21.8704 219.801 22.0204 219.526 22.1204 219.201 cv
22.4204 217.751 li
22.5204 217.301 22.6954 216.876 22.9454 216.477 cv
23.1954 216.102 23.5204 215.801 23.8954 215.576 cv
24.2704 215.352 24.6954 215.227 25.1704 215.227 cv
25.7954 215.227 26.4204 215.401 27.0204 215.751 cv
27.6204 216.102 28.0954 216.526 28.4454 217.026 cv
29.0454 217.926 29.3204 219.001 29.3204 220.276 cv
29.3204 221.176 29.1204 221.977 28.7204 222.727 cv
28.3204 223.477 27.7204 223.826 26.9204 223.826 cv
26.4704 223.826 26.0954 223.701 25.7454 223.451 cv
25.3954 223.201 25.2204 222.826 25.2204 222.352 cv
25.2204 222.102 25.3204 221.876 25.4704 221.676 cv
25.6454 221.501 25.8704 221.401 26.1204 221.401 cv
26.5204 221.401 26.8454 221.551 27.1204 221.826 cv
27.4204 222.126 27.5454 222.451 27.5454 222.826 cv
27.5454 222.951 li
f
35.2954 212.882 mo
34.2954 212.882 li
34.2954 210.457 li
11.3204 210.457 li
11.3204 212.882 li
10.3204 212.882 li
10.3204 209.457 li
35.2954 209.457 li
35.2954 212.882 li
f
323.319 449.331 mo
323.319 449.281 323.319 449.206 323.369 449.106 cv
323.394 449.006 323.419 448.931 323.469 448.881 cv
323.519 448.831 323.569 448.781 323.669 448.781 cv
325.094 448.781 326.044 448.756 326.519 448.656 cv
326.969 448.556 327.219 448.306 327.319 447.931 cv
330.744 434.206 li
330.794 434.006 330.844 433.831 330.844 433.656 cv
330.844 433.531 330.544 433.456 329.969 433.456 cv
328.519 433.456 li
327.394 433.456 326.519 433.631 325.919 433.981 cv
325.319 434.331 324.869 434.781 324.594 435.331 cv
324.294 435.881 323.944 436.806 323.494 438.081 cv
323.444 438.231 323.344 438.306 323.244 438.306 cv
323.019 438.306 li
322.844 438.306 322.769 438.206 322.769 437.981 cv
324.544 432.806 li
324.569 432.656 324.644 432.581 324.794 432.581 cv
339.569 432.581 li
339.719 432.581 339.819 432.706 339.819 432.906 cv
338.994 438.081 li
338.894 438.231 li
338.744 438.306 li
338.519 438.306 li
338.344 438.306 338.269 438.206 338.269 437.981 cv
338.444 436.806 338.544 435.981 338.544 435.481 cv
338.544 434.906 338.419 434.456 338.169 434.156 cv
337.919 433.856 337.594 433.681 337.219 433.581 cv
336.819 433.506 336.319 433.456 335.694 433.456 cv
334.219 433.456 li
333.769 433.456 333.469 433.506 333.319 433.581 cv
333.169 433.681 333.019 433.906 332.919 434.306 cv
329.494 448.031 li
329.469 448.131 li
329.444 448.256 li
329.444 448.481 329.569 448.606 329.819 448.656 cv
330.244 448.756 331.169 448.781 332.594 448.781 cv
332.744 448.781 332.844 448.906 332.844 449.106 cv
332.769 449.356 332.719 449.506 332.694 449.556 cv
332.644 449.631 332.569 449.656 332.419 449.656 cv
323.569 449.656 li
323.394 449.656 323.319 449.556 323.319 449.331 cv
f
337.556 456.033 mo
337.434 456.033 337.381 455.963 337.381 455.806 cv
337.416 455.561 337.504 455.421 337.609 455.421 cv
338.064 455.421 338.466 455.333 338.816 455.141 cv
339.166 454.966 339.464 454.668 339.726 454.266 cv
339.761 454.231 li
346.009 443.696 li
346.096 443.573 346.201 443.503 346.341 443.503 cv
346.569 443.503 li
346.674 443.538 li
346.761 443.608 li
346.796 443.696 li
347.864 455.001 li
347.864 455.053 347.881 455.123 347.934 455.228 cv
348.039 455.368 348.476 455.421 349.246 455.421 cv
349.351 455.421 349.421 455.508 349.421 455.648 cv
349.386 455.806 349.351 455.911 349.316 455.963 cv
349.281 456.016 349.229 456.033 349.124 456.033 cv
344.749 456.033 li
344.644 456.033 344.591 455.963 344.591 455.806 cv
344.644 455.561 344.714 455.421 344.819 455.421 cv
345.729 455.421 346.219 455.263 346.289 454.948 cv
346.026 452.061 li
341.704 452.061 li
340.304 454.406 li
340.216 454.546 340.181 454.686 340.181 454.843 cv
340.181 455.053 340.269 455.211 340.479 455.298 cv
340.671 455.386 340.881 455.421 341.126 455.421 cv
341.231 455.421 341.301 455.508 341.301 455.648 cv
341.249 455.823 341.214 455.928 341.196 455.963 cv
341.161 456.016 341.109 456.033 341.004 456.033 cv
337.556 456.033 li
342.054 451.448 mo
345.956 451.448 li
345.431 445.778 li
342.054 451.448 li
f
372.459 467.872 mo
540.05 467.872 li
540.05 437.819 li
372.459 437.819 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
372.459 467.872 mo
540.05 467.872 li
540.05 437.819 li
372.459 437.819 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
3 lw
1 lj
[6 6 ] 0 dsh
384.359 451.591 mo
408.159 451.591 li
0 1 1 0 cmyk
@
432.673 446.797 mo
430.395 452.968 li
434.951 452.968 li
432.673 446.797 li
431.721 445.148 mo
433.625 445.148 li
438.351 457.541 li
436.6 457.541 li
435.478 454.362 li
429.885 454.362 li
428.763 457.541 li
426.995 457.541 li
431.721 445.148 li
1 /0 /CSD get_res sepcs
1 sep
f
445.474 449.67 mo
445.304 449.568 445.117 449.5 444.913 449.449 cv
444.709 449.415 444.488 449.381 444.25 449.381 cv
443.383 449.381 442.72 449.67 442.261 450.231 cv
441.785 450.792 441.564 451.591 441.564 452.645 cv
441.564 457.541 li
440.034 457.541 li
440.034 448.242 li
441.564 448.242 li
441.564 449.687 li
441.87 449.126 442.295 448.701 442.805 448.429 cv
443.315 448.157 443.944 448.021 444.692 448.021 cv
444.794 448.021 444.913 448.038 445.049 448.038 cv
445.168 448.055 445.304 448.072 445.474 448.106 cv
445.474 449.67 li
f
452.461 449.67 mo
452.291 449.568 452.104 449.5 451.9 449.449 cv
451.696 449.415 451.475 449.381 451.237 449.381 cv
450.37 449.381 449.707 449.67 449.248 450.231 cv
448.772 450.792 448.551 451.591 448.551 452.645 cv
448.551 457.541 li
447.021 457.541 li
447.021 448.242 li
448.551 448.242 li
448.551 449.687 li
448.857 449.126 449.282 448.701 449.792 448.429 cv
450.302 448.157 450.931 448.021 451.679 448.021 cv
451.781 448.021 451.9 448.038 452.036 448.038 cv
452.155 448.055 452.291 448.072 452.461 448.106 cv
452.461 449.67 li
f
461.794 451.931 mo
461.794 457.541 li
460.264 457.541 li
460.264 451.982 li
460.264 451.098 460.077 450.452 459.737 450.01 cv
459.397 449.568 458.887 449.347 458.207 449.347 cv
457.374 449.347 456.728 449.619 456.252 450.146 cv
455.776 450.673 455.538 451.387 455.538 452.288 cv
455.538 457.541 li
454.008 457.541 li
454.008 444.621 li
455.538 444.621 li
455.538 449.687 li
455.895 449.143 456.32 448.718 456.83 448.446 cv
457.323 448.174 457.901 448.021 458.547 448.021 cv
459.601 448.021 460.417 448.361 460.961 449.024 cv
461.505 449.687 461.794 450.656 461.794 451.931 cv
f
472.793 452.509 mo
472.793 453.257 li
465.772 453.257 li
465.84 454.311 466.146 455.127 466.724 455.671 cv
467.285 456.215 468.067 456.487 469.087 456.487 cv
469.665 456.487 470.243 456.419 470.787 456.283 cv
471.331 456.147 471.892 455.926 472.436 455.62 cv
472.436 457.065 li
471.892 457.303 471.331 457.49 470.753 457.592 cv
470.175 457.694 469.58 457.762 469.002 457.762 cv
467.506 457.762 466.333 457.337 465.466 456.487 cv
464.599 455.637 464.174 454.464 464.174 452.985 cv
464.174 451.472 464.582 450.265 465.398 449.364 cv
466.214 448.48 467.336 448.021 468.73 448.021 cv
469.988 448.021 470.974 448.429 471.705 449.228 cv
472.419 450.044 472.793 451.132 472.793 452.509 cv
471.263 452.067 mo
471.246 451.234 471.008 450.571 470.566 450.061 cv
470.107 449.568 469.495 449.313 468.747 449.313 cv
467.897 449.313 467.217 449.568 466.707 450.044 cv
466.197 450.52 465.891 451.2 465.823 452.067 cv
471.263 452.067 li
f
483.027 451.931 mo
483.027 457.541 li
481.497 457.541 li
481.497 451.982 li
481.497 451.098 481.31 450.452 480.97 450.01 cv
480.63 449.568 480.12 449.347 479.44 449.347 cv
478.607 449.347 477.961 449.619 477.485 450.146 cv
477.009 450.673 476.771 451.387 476.771 452.288 cv
476.771 457.541 li
475.241 457.541 li
475.241 448.242 li
476.771 448.242 li
476.771 449.687 li
477.128 449.143 477.553 448.718 478.063 448.446 cv
478.556 448.174 479.134 448.021 479.78 448.021 cv
480.834 448.021 481.65 448.361 482.194 449.024 cv
482.738 449.687 483.027 450.656 483.027 451.931 cv
f
486.07 448.242 mo
487.6 448.242 li
487.6 457.541 li
486.07 457.541 li
486.07 448.242 li
486.07 444.621 mo
487.6 444.621 li
487.6 446.559 li
486.07 446.559 li
486.07 444.621 li
f
490.643 453.869 mo
490.643 448.242 li
492.173 448.242 li
492.173 453.818 li
492.173 454.702 492.343 455.348 492.683 455.79 cv
493.023 456.232 493.533 456.453 494.23 456.453 cv
495.046 456.453 495.709 456.198 496.185 455.671 cv
496.661 455.144 496.899 454.43 496.899 453.512 cv
496.899 448.242 li
498.429 448.242 li
498.429 457.541 li
496.899 457.541 li
496.899 456.113 li
496.525 456.691 496.083 457.099 495.607 457.371 cv
495.114 457.626 494.553 457.762 493.907 457.762 cv
492.836 457.762 492.02 457.439 491.476 456.776 cv
490.915 456.13 490.643 455.161 490.643 453.869 cv
f
507.507 448.514 mo
507.507 449.959 li
507.065 449.755 506.623 449.585 506.164 449.466 cv
505.688 449.364 505.212 449.296 504.719 449.296 cv
503.954 449.296 503.376 449.415 503.002 449.653 cv
502.628 449.891 502.441 450.231 502.441 450.69 cv
502.441 451.047 502.577 451.319 502.849 451.523 cv
503.121 451.727 503.665 451.931 504.481 452.101 cv
505.008 452.22 li
506.096 452.458 506.861 452.798 507.32 453.206 cv
507.762 453.631 508 454.226 508 454.974 cv
508 455.841 507.66 456.521 506.98 457.014 cv
506.3 457.524 505.348 457.762 504.158 457.762 cv
503.648 457.762 503.138 457.711 502.594 457.626 cv
502.05 457.541 501.489 457.405 500.894 457.201 cv
500.894 455.62 li
501.455 455.926 502.016 456.147 502.56 456.283 cv
503.104 456.436 503.648 456.504 504.192 456.504 cv
504.906 456.504 505.467 456.385 505.858 456.147 cv
506.232 455.909 506.436 455.552 506.436 455.093 cv
506.436 454.685 506.283 454.362 506.011 454.141 cv
505.739 453.92 505.127 453.699 504.175 453.495 cv
503.648 453.376 li
502.696 453.172 501.999 452.866 501.591 452.458 cv
501.166 452.05 500.962 451.489 500.962 450.758 cv
500.962 449.891 501.268 449.211 501.88 448.735 cv
502.492 448.259 503.376 448.021 504.532 448.021 cv
505.093 448.021 505.62 448.072 506.13 448.157 cv
506.623 448.242 507.082 448.361 507.507 448.514 cv
f
515.905 445.148 mo
523.028 445.148 li
523.028 446.559 li
517.588 446.559 li
517.588 450.214 li
522.501 450.214 li
522.501 451.625 li
517.588 451.625 li
517.588 457.541 li
515.905 457.541 li
515.905 445.148 li
f
525.612 448.242 mo
527.142 448.242 li
527.142 457.541 li
525.612 457.541 li
525.612 448.242 li
525.612 444.621 mo
527.142 444.621 li
527.142 446.559 li
525.612 446.559 li
525.612 444.621 li
f
531.851 445.607 mo
531.851 448.242 li
534.996 448.242 li
534.996 449.432 li
531.851 449.432 li
531.851 454.481 li
531.851 455.246 531.953 455.739 532.157 455.943 cv
532.361 456.164 532.786 456.266 533.432 456.266 cv
534.996 456.266 li
534.996 457.541 li
533.432 457.541 li
532.242 457.541 531.426 457.32 530.984 456.878 cv
530.542 456.436 530.321 455.637 530.321 454.481 cv
530.321 449.432 li
529.199 449.432 li
529.199 448.242 li
530.321 448.242 li
530.321 445.607 li
531.851 445.607 li
f
331.776 350.208 mo
333.965 356.774 li
331.885 356.774 li
331.885 426.816 li
331.667 426.816 li
331.667 356.774 li
329.587 356.774 li
cp
.930816 .793027 0 0 cmyk
f
1.5 lw
0 lj
[] 0 dsh
331.776 350.208 mo
333.965 356.774 li
331.885 356.774 li
331.885 426.816 li
331.667 426.816 li
331.667 356.774 li
329.587 356.774 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
1 /0 /CSD get_res sepcs
.0431373 sep
f
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
1 lw
2 lc
1 lj
152.64 245.897 mo
169.947 245.897 li
184.107 245.726 li
195.907 244.52 li
202.739 247.324 li
210.329 247.118 li
214.45 247.955 li
218.813 247.11 li
223.441 245.972 li
228.357 246.959 li
233.591 245.485 li
239.174 242.837 li
245.142 242.621 li
251.536 242.155 li
258.404 238.564 li
265.8 235.461 li
273.788 234.771 li
282.441 223.361 li
291.847 217.024 li
302.108 205.928 li
313.346 181.684 li
325.708 148.139 li
332.364 118.384 li
339.371 45.7396 li
.930816 .793027 0 0 cmyk
@
gsave
149.89 248.647 mo
155.39 248.647 li
155.39 243.147 li
149.89 243.147 li
cp
clp
152.64 248.397 mo
153.303 248.397 153.939 248.134 154.408 247.665 cv
154.877 247.196 155.14 246.56 155.14 245.897 cv
155.14 245.234 154.877 244.598 154.408 244.129 cv
153.939 243.661 153.303 243.397 152.64 243.397 cv
151.977 243.397 151.341 243.661 150.872 244.129 cv
150.403 244.598 150.14 245.234 150.14 245.897 cv
150.14 246.56 150.403 247.196 150.872 247.665 cv
151.341 248.134 151.977 248.397 152.64 248.397 cv
cp
f
.5 lw
0 lc
152.64 248.397 mo
153.303 248.397 153.939 248.134 154.408 247.665 cv
154.877 247.196 155.14 246.56 155.14 245.897 cv
155.14 245.234 154.877 244.598 154.408 244.129 cv
153.939 243.661 153.303 243.397 152.64 243.397 cv
151.977 243.397 151.341 243.661 150.872 244.129 cv
150.403 244.598 150.14 245.234 150.14 245.897 cv
150.14 246.56 150.403 247.196 150.872 247.665 cv
151.341 248.134 151.977 248.397 152.64 248.397 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
167.197 248.647 mo
172.697 248.647 li
172.697 243.147 li
167.197 243.147 li
cp
clp
169.947 248.397 mo
170.61 248.397 171.246 248.134 171.715 247.665 cv
172.183 247.196 172.447 246.56 172.447 245.897 cv
172.447 245.234 172.183 244.598 171.715 244.129 cv
171.246 243.661 170.61 243.397 169.947 243.397 cv
169.284 243.397 168.648 243.661 168.179 244.129 cv
167.71 244.598 167.447 245.234 167.447 245.897 cv
167.447 246.56 167.71 247.196 168.179 247.665 cv
168.648 248.134 169.284 248.397 169.947 248.397 cv
cp
f
.5 lw
0 lc
169.947 248.397 mo
170.61 248.397 171.246 248.134 171.715 247.665 cv
172.183 247.196 172.447 246.56 172.447 245.897 cv
172.447 245.234 172.183 244.598 171.715 244.129 cv
171.246 243.661 170.61 243.397 169.947 243.397 cv
169.284 243.397 168.648 243.661 168.179 244.129 cv
167.71 244.598 167.447 245.234 167.447 245.897 cv
167.447 246.56 167.71 247.196 168.179 247.665 cv
168.648 248.134 169.284 248.397 169.947 248.397 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
181.357 248.476 mo
186.857 248.476 li
186.857 242.976 li
181.357 242.976 li
cp
clp
184.107 248.226 mo
184.77 248.226 185.406 247.963 185.875 247.494 cv
186.343 247.025 186.607 246.389 186.607 245.726 cv
186.607 245.063 186.343 244.427 185.875 243.958 cv
185.406 243.489 184.77 243.226 184.107 243.226 cv
183.444 243.226 182.808 243.489 182.339 243.958 cv
181.87 244.427 181.607 245.063 181.607 245.726 cv
181.607 246.389 181.87 247.025 182.339 247.494 cv
182.808 247.963 183.444 248.226 184.107 248.226 cv
cp
f
.5 lw
0 lc
184.107 248.226 mo
184.77 248.226 185.406 247.963 185.875 247.494 cv
186.343 247.025 186.607 246.389 186.607 245.726 cv
186.607 245.063 186.343 244.427 185.875 243.958 cv
185.406 243.489 184.77 243.226 184.107 243.226 cv
183.444 243.226 182.808 243.489 182.339 243.958 cv
181.87 244.427 181.607 245.063 181.607 245.726 cv
181.607 246.389 181.87 247.025 182.339 247.494 cv
182.808 247.963 183.444 248.226 184.107 248.226 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
193.157 247.27 mo
198.657 247.27 li
198.657 241.77 li
193.157 241.77 li
cp
clp
195.907 247.02 mo
196.57 247.02 197.206 246.757 197.675 246.288 cv
198.144 245.819 198.407 245.183 198.407 244.52 cv
198.407 243.857 198.144 243.221 197.675 242.752 cv
197.206 242.283 196.57 242.02 195.907 242.02 cv
195.244 242.02 194.608 242.283 194.139 242.752 cv
193.67 243.221 193.407 243.857 193.407 244.52 cv
193.407 245.183 193.67 245.819 194.139 246.288 cv
194.608 246.757 195.244 247.02 195.907 247.02 cv
cp
f
.5 lw
0 lc
195.907 247.02 mo
196.57 247.02 197.206 246.757 197.675 246.288 cv
198.144 245.819 198.407 245.183 198.407 244.52 cv
198.407 243.857 198.144 243.221 197.675 242.752 cv
197.206 242.283 196.57 242.02 195.907 242.02 cv
195.244 242.02 194.608 242.283 194.139 242.752 cv
193.67 243.221 193.407 243.857 193.407 244.52 cv
193.407 245.183 193.67 245.819 194.139 246.288 cv
194.608 246.757 195.244 247.02 195.907 247.02 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
199.989 250.074 mo
205.489 250.074 li
205.489 244.574 li
199.989 244.574 li
cp
clp
202.739 249.824 mo
203.402 249.824 204.038 249.56 204.506 249.092 cv
204.975 248.623 205.239 247.987 205.239 247.324 cv
205.239 246.661 204.975 246.025 204.506 245.556 cv
204.038 245.087 203.402 244.824 202.739 244.824 cv
202.076 244.824 201.44 245.087 200.971 245.556 cv
200.502 246.025 200.239 246.661 200.239 247.324 cv
200.239 247.987 200.502 248.623 200.971 249.092 cv
201.44 249.56 202.076 249.824 202.739 249.824 cv
cp
f
.5 lw
0 lc
202.739 249.824 mo
203.402 249.824 204.038 249.56 204.506 249.092 cv
204.975 248.623 205.239 247.987 205.239 247.324 cv
205.239 246.661 204.975 246.025 204.506 245.556 cv
204.038 245.087 203.402 244.824 202.739 244.824 cv
202.076 244.824 201.44 245.087 200.971 245.556 cv
200.502 246.025 200.239 246.661 200.239 247.324 cv
200.239 247.987 200.502 248.623 200.971 249.092 cv
201.44 249.56 202.076 249.824 202.739 249.824 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
207.579 249.868 mo
213.079 249.868 li
213.079 244.368 li
207.579 244.368 li
cp
clp
210.329 249.618 mo
210.992 249.618 211.628 249.355 212.097 248.886 cv
212.566 248.417 212.829 247.781 212.829 247.118 cv
212.829 246.455 212.566 245.819 212.097 245.35 cv
211.628 244.882 210.992 244.618 210.329 244.618 cv
209.666 244.618 209.03 244.882 208.562 245.35 cv
208.093 245.819 207.829 246.455 207.829 247.118 cv
207.829 247.781 208.093 248.417 208.562 248.886 cv
209.03 249.355 209.666 249.618 210.329 249.618 cv
cp
f
.5 lw
0 lc
210.329 249.618 mo
210.992 249.618 211.628 249.355 212.097 248.886 cv
212.566 248.417 212.829 247.781 212.829 247.118 cv
212.829 246.455 212.566 245.819 212.097 245.35 cv
211.628 244.882 210.992 244.618 210.329 244.618 cv
209.666 244.618 209.03 244.882 208.562 245.35 cv
208.093 245.819 207.829 246.455 207.829 247.118 cv
207.829 247.781 208.093 248.417 208.562 248.886 cv
209.03 249.355 209.666 249.618 210.329 249.618 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
211.7 250.705 mo
217.2 250.705 li
217.2 245.205 li
211.7 245.205 li
cp
clp
214.45 250.455 mo
215.113 250.455 215.749 250.191 216.218 249.722 cv
216.687 249.254 216.95 248.618 216.95 247.955 cv
216.95 247.292 216.687 246.656 216.218 246.187 cv
215.749 245.718 215.113 245.455 214.45 245.455 cv
213.787 245.455 213.151 245.718 212.682 246.187 cv
212.213 246.656 211.95 247.292 211.95 247.955 cv
211.95 248.618 212.213 249.254 212.682 249.722 cv
213.151 250.191 213.787 250.455 214.45 250.455 cv
cp
f
.5 lw
0 lc
214.45 250.455 mo
215.113 250.455 215.749 250.191 216.218 249.722 cv
216.687 249.254 216.95 248.618 216.95 247.955 cv
216.95 247.292 216.687 246.656 216.218 246.187 cv
215.749 245.718 215.113 245.455 214.45 245.455 cv
213.787 245.455 213.151 245.718 212.682 246.187 cv
212.213 246.656 211.95 247.292 211.95 247.955 cv
211.95 248.618 212.213 249.254 212.682 249.722 cv
213.151 250.191 213.787 250.455 214.45 250.455 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
216.063 249.86 mo
221.563 249.86 li
221.563 244.36 li
216.063 244.36 li
cp
clp
218.813 249.61 mo
219.476 249.61 220.112 249.346 220.581 248.878 cv
221.05 248.409 221.313 247.773 221.313 247.11 cv
221.313 246.447 221.05 245.811 220.581 245.342 cv
220.112 244.873 219.476 244.61 218.813 244.61 cv
218.15 244.61 217.514 244.873 217.045 245.342 cv
216.576 245.811 216.313 246.447 216.313 247.11 cv
216.313 247.773 216.576 248.409 217.045 248.878 cv
217.514 249.346 218.15 249.61 218.813 249.61 cv
cp
f
.5 lw
0 lc
218.813 249.61 mo
219.476 249.61 220.112 249.346 220.581 248.878 cv
221.05 248.409 221.313 247.773 221.313 247.11 cv
221.313 246.447 221.05 245.811 220.581 245.342 cv
220.112 244.873 219.476 244.61 218.813 244.61 cv
218.15 244.61 217.514 244.873 217.045 245.342 cv
216.576 245.811 216.313 246.447 216.313 247.11 cv
216.313 247.773 216.576 248.409 217.045 248.878 cv
217.514 249.346 218.15 249.61 218.813 249.61 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
220.691 248.722 mo
226.191 248.722 li
226.191 243.222 li
220.691 243.222 li
cp
clp
223.441 248.472 mo
224.104 248.472 224.739 248.209 225.208 247.74 cv
225.677 247.271 225.941 246.635 225.941 245.972 cv
225.941 245.309 225.677 244.673 225.208 244.205 cv
224.739 243.736 224.104 243.472 223.441 243.472 cv
222.777 243.472 222.142 243.736 221.673 244.205 cv
221.204 244.673 220.941 245.309 220.941 245.972 cv
220.941 246.635 221.204 247.271 221.673 247.74 cv
222.142 248.209 222.777 248.472 223.441 248.472 cv
cp
f
.5 lw
0 lc
223.441 248.472 mo
224.104 248.472 224.739 248.209 225.208 247.74 cv
225.677 247.271 225.941 246.635 225.941 245.972 cv
225.941 245.309 225.677 244.673 225.208 244.205 cv
224.739 243.736 224.104 243.472 223.441 243.472 cv
222.777 243.472 222.142 243.736 221.673 244.205 cv
221.204 244.673 220.941 245.309 220.941 245.972 cv
220.941 246.635 221.204 247.271 221.673 247.74 cv
222.142 248.209 222.777 248.472 223.441 248.472 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
225.607 249.709 mo
231.107 249.709 li
231.107 244.209 li
225.607 244.209 li
cp
clp
228.357 249.459 mo
229.02 249.459 229.656 249.196 230.125 248.727 cv
230.594 248.258 230.857 247.622 230.857 246.959 cv
230.857 246.296 230.594 245.66 230.125 245.192 cv
229.656 244.723 229.02 244.459 228.357 244.459 cv
227.694 244.459 227.058 244.723 226.589 245.192 cv
226.121 245.66 225.857 246.296 225.857 246.959 cv
225.857 247.622 226.121 248.258 226.589 248.727 cv
227.058 249.196 227.694 249.459 228.357 249.459 cv
cp
f
.5 lw
0 lc
228.357 249.459 mo
229.02 249.459 229.656 249.196 230.125 248.727 cv
230.594 248.258 230.857 247.622 230.857 246.959 cv
230.857 246.296 230.594 245.66 230.125 245.192 cv
229.656 244.723 229.02 244.459 228.357 244.459 cv
227.694 244.459 227.058 244.723 226.589 245.192 cv
226.121 245.66 225.857 246.296 225.857 246.959 cv
225.857 247.622 226.121 248.258 226.589 248.727 cv
227.058 249.196 227.694 249.459 228.357 249.459 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
230.841 248.235 mo
236.341 248.235 li
236.341 242.735 li
230.841 242.735 li
cp
clp
233.591 247.985 mo
234.254 247.985 234.89 247.722 235.359 247.253 cv
235.828 246.784 236.091 246.148 236.091 245.485 cv
236.091 244.822 235.828 244.186 235.359 243.717 cv
234.89 243.249 234.254 242.985 233.591 242.985 cv
232.928 242.985 232.292 243.249 231.823 243.717 cv
231.355 244.186 231.091 244.822 231.091 245.485 cv
231.091 246.148 231.355 246.784 231.823 247.253 cv
232.292 247.722 232.928 247.985 233.591 247.985 cv
cp
f
.5 lw
0 lc
233.591 247.985 mo
234.254 247.985 234.89 247.722 235.359 247.253 cv
235.828 246.784 236.091 246.148 236.091 245.485 cv
236.091 244.822 235.828 244.186 235.359 243.717 cv
234.89 243.249 234.254 242.985 233.591 242.985 cv
232.928 242.985 232.292 243.249 231.823 243.717 cv
231.355 244.186 231.091 244.822 231.091 245.485 cv
231.091 246.148 231.355 246.784 231.823 247.253 cv
232.292 247.722 232.928 247.985 233.591 247.985 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
236.424 245.587 mo
241.924 245.587 li
241.924 240.087 li
236.424 240.087 li
cp
clp
239.174 245.337 mo
239.837 245.337 240.473 245.074 240.942 244.605 cv
241.411 244.136 241.674 243.5 241.674 242.837 cv
241.674 242.174 241.411 241.539 240.942 241.07 cv
240.473 240.601 239.837 240.337 239.174 240.337 cv
238.511 240.337 237.875 240.601 237.406 241.07 cv
236.937 241.539 236.674 242.174 236.674 242.837 cv
236.674 243.5 236.937 244.136 237.406 244.605 cv
237.875 245.074 238.511 245.337 239.174 245.337 cv
cp
f
.5 lw
0 lc
239.174 245.337 mo
239.837 245.337 240.473 245.074 240.942 244.605 cv
241.411 244.136 241.674 243.5 241.674 242.837 cv
241.674 242.174 241.411 241.539 240.942 241.07 cv
240.473 240.601 239.837 240.337 239.174 240.337 cv
238.511 240.337 237.875 240.601 237.406 241.07 cv
236.937 241.539 236.674 242.174 236.674 242.837 cv
236.674 243.5 236.937 244.136 237.406 244.605 cv
237.875 245.074 238.511 245.337 239.174 245.337 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
242.392 245.371 mo
247.892 245.371 li
247.892 239.871 li
242.392 239.871 li
cp
clp
245.142 245.121 mo
245.805 245.121 246.441 244.857 246.91 244.389 cv
247.378 243.92 247.642 243.284 247.642 242.621 cv
247.642 241.958 247.378 241.322 246.91 240.853 cv
246.441 240.384 245.805 240.121 245.142 240.121 cv
244.479 240.121 243.843 240.384 243.374 240.853 cv
242.905 241.322 242.642 241.958 242.642 242.621 cv
242.642 243.284 242.905 243.92 243.374 244.389 cv
243.843 244.857 244.479 245.121 245.142 245.121 cv
cp
f
.5 lw
0 lc
245.142 245.121 mo
245.805 245.121 246.441 244.857 246.91 244.389 cv
247.378 243.92 247.642 243.284 247.642 242.621 cv
247.642 241.958 247.378 241.322 246.91 240.853 cv
246.441 240.384 245.805 240.121 245.142 240.121 cv
244.479 240.121 243.843 240.384 243.374 240.853 cv
242.905 241.322 242.642 241.958 242.642 242.621 cv
242.642 243.284 242.905 243.92 243.374 244.389 cv
243.843 244.857 244.479 245.121 245.142 245.121 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
248.786 244.905 mo
254.286 244.905 li
254.286 239.405 li
248.786 239.405 li
cp
clp
251.536 244.655 mo
252.199 244.655 252.835 244.391 253.304 243.923 cv
253.773 243.454 254.036 242.818 254.036 242.155 cv
254.036 241.492 253.773 240.856 253.304 240.387 cv
252.835 239.918 252.199 239.655 251.536 239.655 cv
250.873 239.655 250.237 239.918 249.768 240.387 cv
249.299 240.856 249.036 241.492 249.036 242.155 cv
249.036 242.818 249.299 243.454 249.768 243.923 cv
250.237 244.391 250.873 244.655 251.536 244.655 cv
cp
f
.5 lw
0 lc
251.536 244.655 mo
252.199 244.655 252.835 244.391 253.304 243.923 cv
253.773 243.454 254.036 242.818 254.036 242.155 cv
254.036 241.492 253.773 240.856 253.304 240.387 cv
252.835 239.918 252.199 239.655 251.536 239.655 cv
250.873 239.655 250.237 239.918 249.768 240.387 cv
249.299 240.856 249.036 241.492 249.036 242.155 cv
249.036 242.818 249.299 243.454 249.768 243.923 cv
250.237 244.391 250.873 244.655 251.536 244.655 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
255.654 241.314 mo
261.154 241.314 li
261.154 235.814 li
255.654 235.814 li
cp
clp
258.404 241.064 mo
259.067 241.064 259.703 240.8 260.171 240.331 cv
260.64 239.862 260.904 239.227 260.904 238.564 cv
260.904 237.9 260.64 237.265 260.171 236.796 cv
259.703 236.327 259.067 236.064 258.404 236.064 cv
257.741 236.064 257.105 236.327 256.636 236.796 cv
256.167 237.265 255.904 237.9 255.904 238.564 cv
255.904 239.227 256.167 239.862 256.636 240.331 cv
257.105 240.8 257.741 241.064 258.404 241.064 cv
cp
f
.5 lw
0 lc
258.404 241.064 mo
259.067 241.064 259.703 240.8 260.171 240.331 cv
260.64 239.862 260.904 239.227 260.904 238.564 cv
260.904 237.9 260.64 237.265 260.171 236.796 cv
259.703 236.327 259.067 236.064 258.404 236.064 cv
257.741 236.064 257.105 236.327 256.636 236.796 cv
256.167 237.265 255.904 237.9 255.904 238.564 cv
255.904 239.227 256.167 239.862 256.636 240.331 cv
257.105 240.8 257.741 241.064 258.404 241.064 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
263.05 238.211 mo
268.55 238.211 li
268.55 232.711 li
263.05 232.711 li
cp
clp
265.8 237.961 mo
266.463 237.961 267.099 237.698 267.568 237.229 cv
268.036 236.76 268.3 236.124 268.3 235.461 cv
268.3 234.798 268.036 234.162 267.568 233.694 cv
267.099 233.225 266.463 232.961 265.8 232.961 cv
265.137 232.961 264.501 233.225 264.032 233.694 cv
263.563 234.162 263.3 234.798 263.3 235.461 cv
263.3 236.124 263.563 236.76 264.032 237.229 cv
264.501 237.698 265.137 237.961 265.8 237.961 cv
cp
f
.5 lw
0 lc
265.8 237.961 mo
266.463 237.961 267.099 237.698 267.568 237.229 cv
268.036 236.76 268.3 236.124 268.3 235.461 cv
268.3 234.798 268.036 234.162 267.568 233.694 cv
267.099 233.225 266.463 232.961 265.8 232.961 cv
265.137 232.961 264.501 233.225 264.032 233.694 cv
263.563 234.162 263.3 234.798 263.3 235.461 cv
263.3 236.124 263.563 236.76 264.032 237.229 cv
264.501 237.698 265.137 237.961 265.8 237.961 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
271.038 237.521 mo
276.538 237.521 li
276.538 232.021 li
271.038 232.021 li
cp
clp
273.788 237.271 mo
274.451 237.271 275.086 237.008 275.555 236.539 cv
276.024 236.07 276.288 235.434 276.288 234.771 cv
276.288 234.108 276.024 233.472 275.555 233.003 cv
275.086 232.535 274.451 232.271 273.788 232.271 cv
273.125 232.271 272.489 232.535 272.02 233.003 cv
271.551 233.472 271.288 234.108 271.288 234.771 cv
271.288 235.434 271.551 236.07 272.02 236.539 cv
272.489 237.008 273.125 237.271 273.788 237.271 cv
cp
f
.5 lw
0 lc
273.788 237.271 mo
274.451 237.271 275.086 237.008 275.555 236.539 cv
276.024 236.07 276.288 235.434 276.288 234.771 cv
276.288 234.108 276.024 233.472 275.555 233.003 cv
275.086 232.535 274.451 232.271 273.788 232.271 cv
273.125 232.271 272.489 232.535 272.02 233.003 cv
271.551 233.472 271.288 234.108 271.288 234.771 cv
271.288 235.434 271.551 236.07 272.02 236.539 cv
272.489 237.008 273.125 237.271 273.788 237.271 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
279.691 226.111 mo
285.191 226.111 li
285.191 220.611 li
279.691 220.611 li
cp
clp
282.441 225.861 mo
283.104 225.861 283.74 225.598 284.209 225.129 cv
284.677 224.66 284.941 224.024 284.941 223.361 cv
284.941 222.698 284.677 222.062 284.209 221.593 cv
283.74 221.125 283.104 220.861 282.441 220.861 cv
281.778 220.861 281.142 221.125 280.673 221.593 cv
280.204 222.062 279.941 222.698 279.941 223.361 cv
279.941 224.024 280.204 224.66 280.673 225.129 cv
281.142 225.598 281.778 225.861 282.441 225.861 cv
cp
f
.5 lw
0 lc
282.441 225.861 mo
283.104 225.861 283.74 225.598 284.209 225.129 cv
284.677 224.66 284.941 224.024 284.941 223.361 cv
284.941 222.698 284.677 222.062 284.209 221.593 cv
283.74 221.125 283.104 220.861 282.441 220.861 cv
281.778 220.861 281.142 221.125 280.673 221.593 cv
280.204 222.062 279.941 222.698 279.941 223.361 cv
279.941 224.024 280.204 224.66 280.673 225.129 cv
281.142 225.598 281.778 225.861 282.441 225.861 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
289.097 219.774 mo
294.597 219.774 li
294.597 214.274 li
289.097 214.274 li
cp
clp
291.847 219.524 mo
292.51 219.524 293.146 219.261 293.615 218.792 cv
294.083 218.323 294.347 217.687 294.347 217.024 cv
294.347 216.361 294.083 215.725 293.615 215.257 cv
293.146 214.788 292.51 214.524 291.847 214.524 cv
291.184 214.524 290.548 214.788 290.079 215.257 cv
289.61 215.725 289.347 216.361 289.347 217.024 cv
289.347 217.687 289.61 218.323 290.079 218.792 cv
290.548 219.261 291.184 219.524 291.847 219.524 cv
cp
f
.5 lw
0 lc
291.847 219.524 mo
292.51 219.524 293.146 219.261 293.615 218.792 cv
294.083 218.323 294.347 217.687 294.347 217.024 cv
294.347 216.361 294.083 215.725 293.615 215.257 cv
293.146 214.788 292.51 214.524 291.847 214.524 cv
291.184 214.524 290.548 214.788 290.079 215.257 cv
289.61 215.725 289.347 216.361 289.347 217.024 cv
289.347 217.687 289.61 218.323 290.079 218.792 cv
290.548 219.261 291.184 219.524 291.847 219.524 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
299.358 208.678 mo
304.858 208.678 li
304.858 203.178 li
299.358 203.178 li
cp
clp
302.108 208.428 mo
302.771 208.428 303.407 208.164 303.875 207.696 cv
304.344 207.227 304.608 206.591 304.608 205.928 cv
304.608 205.265 304.344 204.629 303.875 204.16 cv
303.407 203.691 302.771 203.428 302.108 203.428 cv
301.445 203.428 300.809 203.691 300.34 204.16 cv
299.871 204.629 299.608 205.265 299.608 205.928 cv
299.608 206.591 299.871 207.227 300.34 207.696 cv
300.809 208.164 301.445 208.428 302.108 208.428 cv
cp
f
.5 lw
0 lc
302.108 208.428 mo
302.771 208.428 303.407 208.164 303.875 207.696 cv
304.344 207.227 304.608 206.591 304.608 205.928 cv
304.608 205.265 304.344 204.629 303.875 204.16 cv
303.407 203.691 302.771 203.428 302.108 203.428 cv
301.445 203.428 300.809 203.691 300.34 204.16 cv
299.871 204.629 299.608 205.265 299.608 205.928 cv
299.608 206.591 299.871 207.227 300.34 207.696 cv
300.809 208.164 301.445 208.428 302.108 208.428 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
310.596 184.434 mo
316.096 184.434 li
316.096 178.934 li
310.596 178.934 li
cp
clp
313.346 184.184 mo
314.009 184.184 314.645 183.92 315.114 183.452 cv
315.582 182.983 315.846 182.347 315.846 181.684 cv
315.846 181.021 315.582 180.385 315.114 179.916 cv
314.645 179.447 314.009 179.184 313.346 179.184 cv
312.683 179.184 312.047 179.447 311.578 179.916 cv
311.109 180.385 310.846 181.021 310.846 181.684 cv
310.846 182.347 311.109 182.983 311.578 183.452 cv
312.047 183.92 312.683 184.184 313.346 184.184 cv
cp
f
.5 lw
0 lc
313.346 184.184 mo
314.009 184.184 314.645 183.92 315.114 183.452 cv
315.582 182.983 315.846 182.347 315.846 181.684 cv
315.846 181.021 315.582 180.385 315.114 179.916 cv
314.645 179.447 314.009 179.184 313.346 179.184 cv
312.683 179.184 312.047 179.447 311.578 179.916 cv
311.109 180.385 310.846 181.021 310.846 181.684 cv
310.846 182.347 311.109 182.983 311.578 183.452 cv
312.047 183.92 312.683 184.184 313.346 184.184 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
322.958 150.889 mo
328.458 150.889 li
328.458 145.389 li
322.958 145.389 li
cp
clp
325.708 150.639 mo
326.371 150.639 327.007 150.376 327.476 149.907 cv
327.944 149.438 328.208 148.802 328.208 148.139 cv
328.208 147.476 327.944 146.84 327.476 146.372 cv
327.007 145.903 326.371 145.639 325.708 145.639 cv
325.045 145.639 324.409 145.903 323.94 146.372 cv
323.471 146.84 323.208 147.476 323.208 148.139 cv
323.208 148.802 323.471 149.438 323.94 149.907 cv
324.409 150.376 325.045 150.639 325.708 150.639 cv
cp
f
.5 lw
0 lc
325.708 150.639 mo
326.371 150.639 327.007 150.376 327.476 149.907 cv
327.944 149.438 328.208 148.802 328.208 148.139 cv
328.208 147.476 327.944 146.84 327.476 146.372 cv
327.007 145.903 326.371 145.639 325.708 145.639 cv
325.045 145.639 324.409 145.903 323.94 146.372 cv
323.471 146.84 323.208 147.476 323.208 148.139 cv
323.208 148.802 323.471 149.438 323.94 149.907 cv
324.409 150.376 325.045 150.639 325.708 150.639 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
329.614 121.134 mo
335.114 121.134 li
335.114 115.634 li
329.614 115.634 li
cp
clp
332.364 120.884 mo
333.027 120.884 333.663 120.621 334.132 120.152 cv
334.601 119.683 334.864 119.047 334.864 118.384 cv
334.864 117.721 334.601 117.085 334.132 116.616 cv
333.663 116.148 333.027 115.884 332.364 115.884 cv
331.701 115.884 331.065 116.148 330.597 116.616 cv
330.128 117.085 329.864 117.721 329.864 118.384 cv
329.864 119.047 330.128 119.683 330.597 120.152 cv
331.065 120.621 331.701 120.884 332.364 120.884 cv
cp
f
.5 lw
0 lc
332.364 120.884 mo
333.027 120.884 333.663 120.621 334.132 120.152 cv
334.601 119.683 334.864 119.047 334.864 118.384 cv
334.864 117.721 334.601 117.085 334.132 116.616 cv
333.663 116.148 333.027 115.884 332.364 115.884 cv
331.701 115.884 331.065 116.148 330.597 116.616 cv
330.128 117.085 329.864 117.721 329.864 118.384 cv
329.864 119.047 330.128 119.683 330.597 120.152 cv
331.065 120.621 331.701 120.884 332.364 120.884 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
336.621 48.4896 mo
342.121 48.4896 li
342.121 42.9896 li
336.621 42.9896 li
cp
clp
339.371 48.2396 mo
340.034 48.2396 340.67 47.9761 341.139 47.5073 cv
341.608 47.0385 341.871 46.4026 341.871 45.7396 cv
341.871 45.0766 341.608 44.4406 341.139 43.9718 cv
340.67 43.503 340.034 43.2396 339.371 43.2396 cv
338.708 43.2396 338.072 43.503 337.603 43.9718 cv
337.135 44.4406 336.871 45.0766 336.871 45.7396 cv
336.871 46.4026 337.135 47.0385 337.603 47.5073 cv
338.072 47.9761 338.708 48.2396 339.371 48.2396 cv
cp
f
.5 lw
0 lc
339.371 48.2396 mo
340.034 48.2396 340.67 47.9761 341.139 47.5073 cv
341.608 47.0385 341.871 46.4026 341.871 45.7396 cv
341.871 45.0766 341.608 44.4406 341.139 43.9718 cv
340.67 43.503 340.034 43.2396 339.371 43.2396 cv
338.708 43.2396 338.072 43.503 337.603 43.9718 cv
337.135 44.4406 336.871 45.0766 336.871 45.7396 cv
336.871 46.4026 337.135 47.0385 337.603 47.5073 cv
338.072 47.9761 338.708 48.2396 339.371 48.2396 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
grestore
1 lw
2 lc
152.64 37.44 mo
371.52 37.44 li
1 /0 /CSD get_res sepcs
1 sep
@
371.52 256.32 mo
371.52 37.44 li
@
152.64 256.32 mo
371.52 256.32 li
@
152.64 256.32 mo
152.64 37.44 li
@
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
.5 lw
0 lc
1 lj
[1 3 ] 0 dsh
354.553 256.32 mo
354.553 37.44 li
@
grestore
354.553 256.32 mo
354.553 252.32 li
f
.5 lw
0 lc
1 lj
354.553 256.32 mo
354.553 252.32 li
@
354.553 37.44 mo
354.553 41.44 li
f
354.553 37.44 mo
354.553 41.44 li
@
350.18 271.979 mo
350.18 271.367 li
351.633 271.367 352.368 271.192 352.368 270.807 cv
352.368 261.619 li
351.755 261.917 350.985 262.057 350.075 262.057 cv
350.075 261.444 li
351.493 261.444 352.578 261.077 353.313 260.324 cv
353.558 260.324 li
353.68 260.377 li
353.733 260.482 li
353.733 270.807 li
353.733 271.192 354.45 271.367 355.92 271.367 cv
355.92 271.979 li
350.18 271.979 li
f
341.53 290.716 mo
341.845 291.101 342.388 291.276 343.193 291.276 cv
343.63 291.276 344.05 291.136 344.435 290.821 cv
344.82 290.524 345.118 290.156 345.328 289.719 cv
345.573 289.229 345.73 288.686 345.8 288.126 cv
345.87 287.566 345.905 286.884 345.905 286.044 cv
345.695 286.516 345.415 286.901 345.048 287.199 cv
344.663 287.514 344.243 287.654 343.753 287.654 cv
343.07 287.654 342.458 287.479 341.933 287.111 cv
341.408 286.744 340.988 286.254 340.708 285.659 cv
340.428 285.064 340.288 284.416 340.288 283.734 cv
340.288 283.034 340.445 282.386 340.76 281.774 cv
341.075 281.179 341.53 280.689 342.09 280.339 cv
342.65 279.989 343.28 279.796 344.015 279.796 cv
344.715 279.796 345.293 279.989 345.783 280.374 cv
346.255 280.759 346.623 281.266 346.868 281.861 cv
347.113 282.474 347.288 283.121 347.393 283.786 cv
347.498 284.469 347.55 285.134 347.55 285.799 cv
347.55 286.709 347.375 287.619 347.043 288.564 cv
346.71 289.509 346.22 290.279 345.573 290.891 cv
344.908 291.504 344.12 291.819 343.193 291.819 cv
342.493 291.819 341.915 291.661 341.443 291.346 cv
340.953 291.031 340.725 290.541 340.725 289.876 cv
340.725 289.649 340.795 289.456 340.97 289.281 cv
341.128 289.124 341.32 289.036 341.565 289.036 cv
341.793 289.036 341.985 289.124 342.16 289.281 cv
342.318 289.456 342.405 289.649 342.405 289.876 cv
342.405 290.121 342.318 290.314 342.16 290.471 cv
341.985 290.646 341.793 290.716 341.565 290.716 cv
341.53 290.716 li
343.823 287.199 mo
344.295 287.199 344.68 287.041 344.995 286.726 cv
345.293 286.411 345.52 286.009 345.66 285.519 cv
345.8 285.046 345.87 284.574 345.87 284.084 cv
345.87 283.751 li
345.87 283.681 li
345.87 282.806 345.73 282.036 345.485 281.336 cv
345.223 280.654 344.733 280.304 344.015 280.304 cv
343.543 280.304 343.158 280.409 342.878 280.601 cv
342.598 280.811 342.388 281.074 342.248 281.406 cv
342.108 281.756 342.02 282.106 341.985 282.491 cv
341.95 282.876 341.933 283.296 341.933 283.734 cv
341.933 284.399 341.95 284.976 342.02 285.431 cv
342.09 285.904 342.265 286.324 342.545 286.674 cv
342.825 287.024 343.245 287.199 343.823 287.199 cv
f
352.678 291.819 mo
351.243 291.819 350.263 291.241 349.755 290.069 cv
349.23 288.896 348.985 287.496 348.985 285.869 cv
348.985 284.854 349.073 283.909 349.265 283.016 cv
349.44 282.124 349.808 281.371 350.368 280.741 cv
350.91 280.111 351.68 279.796 352.678 279.796 cv
353.448 279.796 354.078 279.989 354.568 280.356 cv
355.058 280.741 355.425 281.214 355.688 281.809 cv
355.933 282.404 356.108 283.051 356.213 283.734 cv
356.3 284.416 356.353 285.134 356.353 285.869 cv
356.353 286.884 356.248 287.811 356.073 288.686 cv
355.88 289.561 355.513 290.314 354.97 290.909 cv
354.428 291.504 353.658 291.819 352.678 291.819 cv
352.678 291.381 mo
353.325 291.381 353.815 291.049 354.13 290.384 cv
354.445 289.719 354.638 288.984 354.708 288.179 cv
354.778 287.374 354.83 286.499 354.83 285.589 cv
354.83 284.714 354.778 283.909 354.708 283.174 cv
354.638 282.439 354.445 281.756 354.13 281.161 cv
353.815 280.566 353.325 280.251 352.678 280.251 cv
352.013 280.251 351.523 280.566 351.208 281.161 cv
350.893 281.756 350.683 282.439 350.613 283.174 cv
350.543 283.909 350.508 284.714 350.508 285.589 cv
350.508 286.254 350.508 286.866 350.543 287.426 cv
350.578 288.004 350.665 288.599 350.805 289.211 cv
350.945 289.824 351.155 290.331 351.47 290.751 cv
351.768 291.171 352.17 291.381 352.678 291.381 cv
f
361.428 291.819 mo
359.993 291.819 359.013 291.241 358.505 290.069 cv
357.98 288.896 357.735 287.496 357.735 285.869 cv
357.735 284.854 357.823 283.909 358.015 283.016 cv
358.19 282.124 358.558 281.371 359.118 280.741 cv
359.66 280.111 360.43 279.796 361.428 279.796 cv
362.198 279.796 362.828 279.989 363.318 280.356 cv
363.808 280.741 364.175 281.214 364.438 281.809 cv
364.683 282.404 364.858 283.051 364.963 283.734 cv
365.05 284.416 365.103 285.134 365.103 285.869 cv
365.103 286.884 364.998 287.811 364.823 288.686 cv
364.63 289.561 364.263 290.314 363.72 290.909 cv
363.178 291.504 362.408 291.819 361.428 291.819 cv
361.428 291.381 mo
362.075 291.381 362.565 291.049 362.88 290.384 cv
363.195 289.719 363.388 288.984 363.458 288.179 cv
363.528 287.374 363.58 286.499 363.58 285.589 cv
363.58 284.714 363.528 283.909 363.458 283.174 cv
363.388 282.439 363.195 281.756 362.88 281.161 cv
362.565 280.566 362.075 280.251 361.428 280.251 cv
360.763 280.251 360.273 280.566 359.958 281.161 cv
359.643 281.756 359.433 282.439 359.363 283.174 cv
359.293 283.909 359.258 284.714 359.258 285.589 cv
359.258 286.254 359.258 286.866 359.293 287.426 cv
359.328 288.004 359.415 288.599 359.555 289.211 cv
359.695 289.824 359.905 290.331 360.22 290.751 cv
360.518 291.171 360.92 291.381 361.428 291.381 cv
f
339.553 278.229 mo
365.803 278.229 li
365.803 276.667 li
339.553 276.667 li
cp
f
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
[1 3 ] 0 dsh
313.346 256.32 mo
313.346 37.44 li
@
grestore
313.346 256.32 mo
313.346 252.32 li
f
313.346 256.32 mo
313.346 252.32 li
@
313.346 37.44 mo
313.346 41.44 li
f
313.346 37.44 mo
313.346 41.44 li
@
308.473 271.979 mo
308.473 271.367 li
309.926 271.367 310.661 271.192 310.661 270.807 cv
310.661 261.619 li
310.048 261.917 309.278 262.057 308.368 262.057 cv
308.368 261.444 li
309.786 261.444 310.871 261.077 311.606 260.324 cv
311.851 260.324 li
311.973 260.377 li
312.026 260.482 li
312.026 270.807 li
312.026 271.192 312.743 271.367 314.213 271.367 cv
314.213 271.979 li
308.473 271.979 li
f
295.473 291.451 mo
295.473 290.839 li
296.926 290.839 297.661 290.664 297.661 290.279 cv
297.661 281.091 li
297.048 281.389 296.278 281.529 295.368 281.529 cv
295.368 280.916 li
296.786 280.916 297.871 280.549 298.606 279.796 cv
298.851 279.796 li
298.973 279.849 li
299.026 279.954 li
299.026 290.279 li
299.026 290.664 299.743 290.839 301.213 290.839 cv
301.213 291.451 li
295.473 291.451 li
f
306.971 291.819 mo
305.536 291.819 304.556 291.241 304.048 290.069 cv
303.523 288.896 303.278 287.496 303.278 285.869 cv
303.278 284.854 303.366 283.909 303.558 283.016 cv
303.733 282.124 304.101 281.371 304.661 280.741 cv
305.203 280.111 305.973 279.796 306.971 279.796 cv
307.741 279.796 308.371 279.989 308.861 280.356 cv
309.351 280.741 309.718 281.214 309.981 281.809 cv
310.226 282.404 310.401 283.051 310.506 283.734 cv
310.593 284.416 310.646 285.134 310.646 285.869 cv
310.646 286.884 310.541 287.811 310.366 288.686 cv
310.173 289.561 309.806 290.314 309.263 290.909 cv
308.721 291.504 307.951 291.819 306.971 291.819 cv
306.971 291.381 mo
307.618 291.381 308.108 291.049 308.423 290.384 cv
308.738 289.719 308.931 288.984 309.001 288.179 cv
309.071 287.374 309.123 286.499 309.123 285.589 cv
309.123 284.714 309.071 283.909 309.001 283.174 cv
308.931 282.439 308.738 281.756 308.423 281.161 cv
308.108 280.566 307.618 280.251 306.971 280.251 cv
306.306 280.251 305.816 280.566 305.501 281.161 cv
305.186 281.756 304.976 282.439 304.906 283.174 cv
304.836 283.909 304.801 284.714 304.801 285.589 cv
304.801 286.254 304.801 286.866 304.836 287.426 cv
304.871 288.004 304.958 288.599 305.098 289.211 cv
305.238 289.824 305.448 290.331 305.763 290.751 cv
306.061 291.171 306.463 291.381 306.971 291.381 cv
f
312.868 289.456 mo
312.973 289.806 313.166 290.121 313.411 290.401 cv
313.656 290.681 313.953 290.891 314.303 291.049 cv
314.636 291.206 314.986 291.276 315.353 291.276 cv
316.193 291.276 316.771 290.961 317.086 290.296 cv
317.401 289.649 317.576 288.861 317.576 287.916 cv
317.576 287.514 317.558 287.181 317.558 286.901 cv
317.541 286.621 317.506 286.359 317.436 286.096 cv
317.331 285.694 317.138 285.344 316.858 285.029 cv
316.578 284.714 316.263 284.556 315.878 284.556 cv
315.476 284.556 315.143 284.626 314.863 284.731 cv
314.583 284.854 314.338 284.994 314.163 285.151 cv
313.988 285.326 313.831 285.484 313.691 285.659 cv
313.551 285.834 313.481 285.939 313.446 285.939 cv
313.253 285.939 li
313.131 285.886 li
313.078 285.781 li
313.078 279.936 li
313.131 279.849 li
313.253 279.796 li
313.306 279.796 li
314.076 280.181 314.916 280.356 315.808 280.356 cv
316.666 280.356 317.506 280.181 318.311 279.796 cv
318.363 279.796 li
318.468 279.849 li
318.521 279.936 li
318.521 280.094 li
318.486 280.181 li
318.083 280.706 317.576 281.126 316.981 281.424 cv
316.386 281.721 315.756 281.861 315.126 281.861 cv
314.653 281.861 314.181 281.809 313.691 281.669 cv
313.691 284.976 li
314.076 284.661 314.408 284.451 314.723 284.311 cv
315.021 284.171 315.406 284.101 315.896 284.101 cv
316.526 284.101 317.103 284.294 317.611 284.661 cv
318.118 285.046 318.503 285.519 318.783 286.114 cv
319.063 286.709 319.203 287.321 319.203 287.934 cv
319.203 288.634 319.028 289.281 318.678 289.876 cv
318.328 290.471 317.873 290.944 317.278 291.294 cv
316.683 291.644 316.053 291.819 315.353 291.819 cv
314.776 291.819 314.251 291.661 313.761 291.381 cv
313.271 291.101 312.903 290.699 312.623 290.191 cv
312.343 289.701 312.221 289.159 312.221 288.599 cv
312.221 288.336 312.291 288.126 312.466 287.951 cv
312.641 287.794 312.851 287.706 313.113 287.706 cv
313.358 287.706 313.586 287.794 313.761 287.969 cv
313.936 288.144 314.023 288.354 314.023 288.599 cv
314.023 288.844 313.936 289.054 313.761 289.229 cv
313.586 289.404 313.358 289.491 313.113 289.491 cv
312.973 289.491 li
312.868 289.456 li
f
324.471 291.819 mo
323.036 291.819 322.056 291.241 321.548 290.069 cv
321.023 288.896 320.778 287.496 320.778 285.869 cv
320.778 284.854 320.866 283.909 321.058 283.016 cv
321.233 282.124 321.601 281.371 322.161 280.741 cv
322.703 280.111 323.473 279.796 324.471 279.796 cv
325.241 279.796 325.871 279.989 326.361 280.356 cv
326.851 280.741 327.218 281.214 327.481 281.809 cv
327.726 282.404 327.901 283.051 328.006 283.734 cv
328.093 284.416 328.146 285.134 328.146 285.869 cv
328.146 286.884 328.041 287.811 327.866 288.686 cv
327.673 289.561 327.306 290.314 326.763 290.909 cv
326.221 291.504 325.451 291.819 324.471 291.819 cv
324.471 291.381 mo
325.118 291.381 325.608 291.049 325.923 290.384 cv
326.238 289.719 326.431 288.984 326.501 288.179 cv
326.571 287.374 326.623 286.499 326.623 285.589 cv
326.623 284.714 326.571 283.909 326.501 283.174 cv
326.431 282.439 326.238 281.756 325.923 281.161 cv
325.608 280.566 325.118 280.251 324.471 280.251 cv
323.806 280.251 323.316 280.566 323.001 281.161 cv
322.686 281.756 322.476 282.439 322.406 283.174 cv
322.336 283.909 322.301 284.714 322.301 285.589 cv
322.301 286.254 322.301 286.866 322.336 287.426 cv
322.371 288.004 322.458 288.599 322.598 289.211 cv
322.738 289.824 322.948 290.331 323.263 290.751 cv
323.561 291.171 323.963 291.381 324.471 291.381 cv
f
293.846 278.229 mo
328.846 278.229 li
328.846 276.667 li
293.846 276.667 li
cp
f
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
[1 3 ] 0 dsh
233.591 256.32 mo
233.591 37.44 li
@
grestore
233.591 256.32 mo
233.591 252.32 li
f
233.591 256.32 mo
233.591 252.32 li
@
233.591 37.44 mo
233.591 41.44 li
f
233.591 37.44 mo
233.591 41.44 li
@
228.719 271.979 mo
228.719 271.367 li
230.171 271.367 230.906 271.192 230.906 270.807 cv
230.906 261.619 li
230.294 261.917 229.524 262.057 228.614 262.057 cv
228.614 261.444 li
230.031 261.444 231.116 261.077 231.851 260.324 cv
232.096 260.324 li
232.219 260.377 li
232.271 260.482 li
232.271 270.807 li
232.271 271.192 232.989 271.367 234.459 271.367 cv
234.459 271.979 li
228.719 271.979 li
f
215.719 291.451 mo
215.719 290.839 li
217.171 290.839 217.906 290.664 217.906 290.279 cv
217.906 281.091 li
217.294 281.389 216.524 281.529 215.614 281.529 cv
215.614 280.916 li
217.031 280.916 218.116 280.549 218.851 279.796 cv
219.096 279.796 li
219.219 279.849 li
219.271 279.954 li
219.271 290.279 li
219.271 290.664 219.989 290.839 221.459 290.839 cv
221.459 291.451 li
215.719 291.451 li
f
224.364 289.456 mo
224.469 289.806 224.661 290.121 224.906 290.401 cv
225.151 290.681 225.449 290.891 225.799 291.049 cv
226.131 291.206 226.481 291.276 226.849 291.276 cv
227.689 291.276 228.266 290.961 228.581 290.296 cv
228.896 289.649 229.071 288.861 229.071 287.916 cv
229.071 287.514 229.054 287.181 229.054 286.901 cv
229.036 286.621 229.001 286.359 228.931 286.096 cv
228.826 285.694 228.634 285.344 228.354 285.029 cv
228.074 284.714 227.759 284.556 227.374 284.556 cv
226.971 284.556 226.639 284.626 226.359 284.731 cv
226.079 284.854 225.834 284.994 225.659 285.151 cv
225.484 285.326 225.326 285.484 225.186 285.659 cv
225.046 285.834 224.976 285.939 224.941 285.939 cv
224.749 285.939 li
224.626 285.886 li
224.574 285.781 li
224.574 279.936 li
224.626 279.849 li
224.749 279.796 li
224.801 279.796 li
225.571 280.181 226.411 280.356 227.304 280.356 cv
228.161 280.356 229.001 280.181 229.806 279.796 cv
229.859 279.796 li
229.964 279.849 li
230.016 279.936 li
230.016 280.094 li
229.981 280.181 li
229.579 280.706 229.071 281.126 228.476 281.424 cv
227.881 281.721 227.251 281.861 226.621 281.861 cv
226.149 281.861 225.676 281.809 225.186 281.669 cv
225.186 284.976 li
225.571 284.661 225.904 284.451 226.219 284.311 cv
226.516 284.171 226.901 284.101 227.391 284.101 cv
228.021 284.101 228.599 284.294 229.106 284.661 cv
229.614 285.046 229.999 285.519 230.279 286.114 cv
230.559 286.709 230.699 287.321 230.699 287.934 cv
230.699 288.634 230.524 289.281 230.174 289.876 cv
229.824 290.471 229.369 290.944 228.774 291.294 cv
228.179 291.644 227.549 291.819 226.849 291.819 cv
226.271 291.819 225.746 291.661 225.256 291.381 cv
224.766 291.101 224.399 290.699 224.119 290.191 cv
223.839 289.701 223.716 289.159 223.716 288.599 cv
223.716 288.336 223.786 288.126 223.961 287.951 cv
224.136 287.794 224.346 287.706 224.609 287.706 cv
224.854 287.706 225.081 287.794 225.256 287.969 cv
225.431 288.144 225.519 288.354 225.519 288.599 cv
225.519 288.844 225.431 289.054 225.256 289.229 cv
225.081 289.404 224.854 289.491 224.609 289.491 cv
224.469 289.491 li
224.364 289.456 li
f
233.114 289.456 mo
233.219 289.806 233.411 290.121 233.656 290.401 cv
233.901 290.681 234.199 290.891 234.549 291.049 cv
234.881 291.206 235.231 291.276 235.599 291.276 cv
236.439 291.276 237.016 290.961 237.331 290.296 cv
237.646 289.649 237.821 288.861 237.821 287.916 cv
237.821 287.514 237.804 287.181 237.804 286.901 cv
237.786 286.621 237.751 286.359 237.681 286.096 cv
237.576 285.694 237.384 285.344 237.104 285.029 cv
236.824 284.714 236.509 284.556 236.124 284.556 cv
235.721 284.556 235.389 284.626 235.109 284.731 cv
234.829 284.854 234.584 284.994 234.409 285.151 cv
234.234 285.326 234.076 285.484 233.936 285.659 cv
233.796 285.834 233.726 285.939 233.691 285.939 cv
233.499 285.939 li
233.376 285.886 li
233.324 285.781 li
233.324 279.936 li
233.376 279.849 li
233.499 279.796 li
233.551 279.796 li
234.321 280.181 235.161 280.356 236.054 280.356 cv
236.911 280.356 237.751 280.181 238.556 279.796 cv
238.609 279.796 li
238.714 279.849 li
238.766 279.936 li
238.766 280.094 li
238.731 280.181 li
238.329 280.706 237.821 281.126 237.226 281.424 cv
236.631 281.721 236.001 281.861 235.371 281.861 cv
234.899 281.861 234.426 281.809 233.936 281.669 cv
233.936 284.976 li
234.321 284.661 234.654 284.451 234.969 284.311 cv
235.266 284.171 235.651 284.101 236.141 284.101 cv
236.771 284.101 237.349 284.294 237.856 284.661 cv
238.364 285.046 238.749 285.519 239.029 286.114 cv
239.309 286.709 239.449 287.321 239.449 287.934 cv
239.449 288.634 239.274 289.281 238.924 289.876 cv
238.574 290.471 238.119 290.944 237.524 291.294 cv
236.929 291.644 236.299 291.819 235.599 291.819 cv
235.021 291.819 234.496 291.661 234.006 291.381 cv
233.516 291.101 233.149 290.699 232.869 290.191 cv
232.589 289.701 232.466 289.159 232.466 288.599 cv
232.466 288.336 232.536 288.126 232.711 287.951 cv
232.886 287.794 233.096 287.706 233.359 287.706 cv
233.604 287.706 233.831 287.794 234.006 287.969 cv
234.181 288.144 234.269 288.354 234.269 288.599 cv
234.269 288.844 234.181 289.054 234.006 289.229 cv
233.831 289.404 233.604 289.491 233.359 289.491 cv
233.219 289.491 li
233.114 289.456 li
f
244.716 291.819 mo
243.281 291.819 242.301 291.241 241.794 290.069 cv
241.269 288.896 241.024 287.496 241.024 285.869 cv
241.024 284.854 241.111 283.909 241.304 283.016 cv
241.479 282.124 241.846 281.371 242.406 280.741 cv
242.949 280.111 243.719 279.796 244.716 279.796 cv
245.486 279.796 246.116 279.989 246.606 280.356 cv
247.096 280.741 247.464 281.214 247.726 281.809 cv
247.971 282.404 248.146 283.051 248.251 283.734 cv
248.339 284.416 248.391 285.134 248.391 285.869 cv
248.391 286.884 248.286 287.811 248.111 288.686 cv
247.919 289.561 247.551 290.314 247.009 290.909 cv
246.466 291.504 245.696 291.819 244.716 291.819 cv
244.716 291.381 mo
245.364 291.381 245.854 291.049 246.169 290.384 cv
246.484 289.719 246.676 288.984 246.746 288.179 cv
246.816 287.374 246.869 286.499 246.869 285.589 cv
246.869 284.714 246.816 283.909 246.746 283.174 cv
246.676 282.439 246.484 281.756 246.169 281.161 cv
245.854 280.566 245.364 280.251 244.716 280.251 cv
244.051 280.251 243.561 280.566 243.246 281.161 cv
242.931 281.756 242.721 282.439 242.651 283.174 cv
242.581 283.909 242.546 284.714 242.546 285.589 cv
242.546 286.254 242.546 286.866 242.581 287.426 cv
242.616 288.004 242.704 288.599 242.844 289.211 cv
242.984 289.824 243.194 290.331 243.509 290.751 cv
243.806 291.171 244.209 291.381 244.716 291.381 cv
f
214.091 278.229 mo
249.091 278.229 li
249.091 276.667 li
214.091 276.667 li
cp
f
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
[1 3 ] 0 dsh
152.64 256.32 mo
152.64 37.44 li
@
grestore
152.64 256.32 mo
152.64 252.32 li
f
152.64 256.32 mo
152.64 252.32 li
@
152.64 37.44 mo
152.64 41.44 li
f
152.64 37.44 mo
152.64 41.44 li
@
147.768 271.979 mo
147.768 271.367 li
149.22 271.367 149.955 271.192 149.955 270.807 cv
149.955 261.619 li
149.342 261.917 148.572 262.057 147.663 262.057 cv
147.663 261.444 li
149.08 261.444 150.165 261.077 150.9 260.324 cv
151.145 260.324 li
151.268 260.377 li
151.32 260.482 li
151.32 270.807 li
151.32 271.192 152.038 271.367 153.507 271.367 cv
153.507 271.979 li
147.768 271.979 li
f
134.803 290.104 mo
135.083 290.506 135.45 290.804 135.905 290.996 cv
136.36 291.189 136.867 291.276 137.393 291.276 cv
138.057 291.276 138.548 290.996 138.827 290.419 cv
139.107 289.841 139.265 289.176 139.265 288.441 cv
139.265 288.126 139.23 287.794 139.178 287.461 cv
139.107 287.129 139.003 286.814 138.863 286.534 cv
138.723 286.254 138.53 286.026 138.285 285.851 cv
138.04 285.676 137.725 285.589 137.375 285.589 cv
136.22 285.589 li
136.115 285.589 136.063 285.536 136.063 285.431 cv
136.063 285.274 li
136.063 285.186 136.115 285.134 136.22 285.134 cv
137.182 285.064 li
137.585 285.064 137.917 284.924 138.197 284.609 cv
138.477 284.294 138.67 283.926 138.792 283.471 cv
138.915 283.034 138.985 282.614 138.985 282.211 cv
138.985 281.651 138.845 281.196 138.583 280.846 cv
138.32 280.496 137.917 280.304 137.393 280.304 cv
136.938 280.304 136.518 280.391 136.115 280.566 cv
135.712 280.741 135.398 280.986 135.152 281.319 cv
135.205 281.301 li
135.275 281.301 li
135.538 281.301 135.765 281.406 135.94 281.581 cv
136.115 281.756 136.202 281.984 136.202 282.229 cv
136.202 282.491 136.115 282.719 135.94 282.894 cv
135.765 283.069 135.538 283.156 135.275 283.156 cv
135.012 283.156 134.785 283.069 134.61 282.894 cv
134.435 282.719 134.348 282.491 134.348 282.229 cv
134.348 281.739 134.488 281.301 134.803 280.934 cv
135.1 280.566 135.485 280.286 135.958 280.094 cv
136.43 279.901 136.902 279.796 137.393 279.796 cv
137.742 279.796 138.11 279.849 138.512 279.954 cv
138.898 280.059 139.265 280.216 139.58 280.409 cv
139.895 280.619 140.158 280.864 140.367 281.161 cv
140.56 281.476 140.665 281.826 140.665 282.211 cv
140.665 282.701 140.542 283.156 140.333 283.576 cv
140.122 283.996 139.825 284.346 139.44 284.644 cv
139.055 284.959 138.635 285.186 138.18 285.326 cv
138.688 285.431 139.178 285.624 139.632 285.904 cv
140.087 286.184 140.438 286.551 140.717 286.989 cv
140.997 287.444 141.137 287.916 141.137 288.424 cv
141.137 289.071 140.945 289.649 140.595 290.174 cv
140.245 290.699 139.773 291.119 139.212 291.399 cv
138.635 291.679 138.023 291.819 137.393 291.819 cv
136.833 291.819 136.29 291.714 135.747 291.504 cv
135.188 291.311 134.75 291.014 134.4 290.594 cv
134.05 290.174 133.875 289.684 133.875 289.089 cv
133.875 288.809 133.962 288.564 134.155 288.371 cv
134.348 288.179 134.592 288.074 134.89 288.074 cv
135.065 288.074 135.24 288.126 135.398 288.214 cv
135.555 288.301 135.678 288.424 135.765 288.581 cv
135.852 288.756 135.905 288.914 135.905 289.089 cv
135.905 289.386 135.8 289.631 135.607 289.824 cv
135.398 290.016 135.17 290.104 134.89 290.104 cv
134.803 290.104 li
f
146.265 291.819 mo
144.83 291.819 143.85 291.241 143.342 290.069 cv
142.818 288.896 142.572 287.496 142.572 285.869 cv
142.572 284.854 142.66 283.909 142.852 283.016 cv
143.027 282.124 143.395 281.371 143.955 280.741 cv
144.497 280.111 145.268 279.796 146.265 279.796 cv
147.035 279.796 147.665 279.989 148.155 280.356 cv
148.645 280.741 149.012 281.214 149.275 281.809 cv
149.52 282.404 149.695 283.051 149.8 283.734 cv
149.887 284.416 149.94 285.134 149.94 285.869 cv
149.94 286.884 149.835 287.811 149.66 288.686 cv
149.467 289.561 149.1 290.314 148.557 290.909 cv
148.015 291.504 147.245 291.819 146.265 291.819 cv
146.265 291.381 mo
146.913 291.381 147.402 291.049 147.717 290.384 cv
148.033 289.719 148.225 288.984 148.295 288.179 cv
148.365 287.374 148.417 286.499 148.417 285.589 cv
148.417 284.714 148.365 283.909 148.295 283.174 cv
148.225 282.439 148.033 281.756 147.717 281.161 cv
147.402 280.566 146.913 280.251 146.265 280.251 cv
145.6 280.251 145.11 280.566 144.795 281.161 cv
144.48 281.756 144.27 282.439 144.2 283.174 cv
144.13 283.909 144.095 284.714 144.095 285.589 cv
144.095 286.254 144.095 286.866 144.13 287.426 cv
144.165 288.004 144.253 288.599 144.393 289.211 cv
144.533 289.824 144.742 290.331 145.057 290.751 cv
145.355 291.171 145.757 291.381 146.265 291.381 cv
f
155.015 291.819 mo
153.58 291.819 152.6 291.241 152.092 290.069 cv
151.568 288.896 151.322 287.496 151.322 285.869 cv
151.322 284.854 151.41 283.909 151.602 283.016 cv
151.777 282.124 152.145 281.371 152.705 280.741 cv
153.247 280.111 154.018 279.796 155.015 279.796 cv
155.785 279.796 156.415 279.989 156.905 280.356 cv
157.395 280.741 157.762 281.214 158.025 281.809 cv
158.27 282.404 158.445 283.051 158.55 283.734 cv
158.637 284.416 158.69 285.134 158.69 285.869 cv
158.69 286.884 158.585 287.811 158.41 288.686 cv
158.217 289.561 157.85 290.314 157.307 290.909 cv
156.765 291.504 155.995 291.819 155.015 291.819 cv
155.015 291.381 mo
155.663 291.381 156.152 291.049 156.467 290.384 cv
156.783 289.719 156.975 288.984 157.045 288.179 cv
157.115 287.374 157.167 286.499 157.167 285.589 cv
157.167 284.714 157.115 283.909 157.045 283.174 cv
156.975 282.439 156.783 281.756 156.467 281.161 cv
156.152 280.566 155.663 280.251 155.015 280.251 cv
154.35 280.251 153.86 280.566 153.545 281.161 cv
153.23 281.756 153.02 282.439 152.95 283.174 cv
152.88 283.909 152.845 284.714 152.845 285.589 cv
152.845 286.254 152.845 286.866 152.88 287.426 cv
152.915 288.004 153.003 288.599 153.143 289.211 cv
153.283 289.824 153.492 290.331 153.807 290.751 cv
154.105 291.171 154.507 291.381 155.015 291.381 cv
f
163.765 291.819 mo
162.33 291.819 161.35 291.241 160.842 290.069 cv
160.318 288.896 160.072 287.496 160.072 285.869 cv
160.072 284.854 160.16 283.909 160.352 283.016 cv
160.527 282.124 160.895 281.371 161.455 280.741 cv
161.997 280.111 162.768 279.796 163.765 279.796 cv
164.535 279.796 165.165 279.989 165.655 280.356 cv
166.145 280.741 166.512 281.214 166.775 281.809 cv
167.02 282.404 167.195 283.051 167.3 283.734 cv
167.387 284.416 167.44 285.134 167.44 285.869 cv
167.44 286.884 167.335 287.811 167.16 288.686 cv
166.967 289.561 166.6 290.314 166.057 290.909 cv
165.515 291.504 164.745 291.819 163.765 291.819 cv
163.765 291.381 mo
164.413 291.381 164.902 291.049 165.217 290.384 cv
165.533 289.719 165.725 288.984 165.795 288.179 cv
165.865 287.374 165.917 286.499 165.917 285.589 cv
165.917 284.714 165.865 283.909 165.795 283.174 cv
165.725 282.439 165.533 281.756 165.217 281.161 cv
164.902 280.566 164.413 280.251 163.765 280.251 cv
163.1 280.251 162.61 280.566 162.295 281.161 cv
161.98 281.756 161.77 282.439 161.7 283.174 cv
161.63 283.909 161.595 284.714 161.595 285.589 cv
161.595 286.254 161.595 286.866 161.63 287.426 cv
161.665 288.004 161.753 288.599 161.893 289.211 cv
162.033 289.824 162.242 290.331 162.557 290.751 cv
162.855 291.171 163.257 291.381 163.765 291.381 cv
f
133.14 278.229 mo
168.14 278.229 li
168.14 276.667 li
133.14 276.667 li
cp
f
241.708 309.979 mo
241.708 309.367 li
243.16 309.367 243.895 309.192 243.895 308.807 cv
243.895 299.619 li
243.283 299.917 242.512 300.057 241.603 300.057 cv
241.603 299.444 li
243.02 299.444 244.105 299.077 244.84 298.324 cv
245.085 298.324 li
245.208 298.377 li
245.26 298.482 li
245.26 308.807 li
245.26 309.192 245.978 309.367 247.447 309.367 cv
247.447 309.979 li
241.708 309.979 li
f
239.885 329.519 mo
239.92 329.362 li
239.99 329.204 li
240.13 329.134 li
241.128 329.134 241.792 329.117 242.125 329.047 cv
242.44 328.977 242.615 328.802 242.685 328.539 cv
245.083 318.932 li
245.118 318.792 245.152 318.669 245.152 318.547 cv
245.152 318.459 244.943 318.407 244.54 318.407 cv
243.525 318.407 li
242.738 318.407 242.125 318.529 241.705 318.774 cv
241.285 319.019 240.97 319.334 240.777 319.719 cv
240.568 320.104 240.322 320.752 240.008 321.644 cv
239.973 321.749 239.902 321.802 239.833 321.802 cv
239.675 321.802 li
239.553 321.802 239.5 321.732 239.5 321.574 cv
240.743 317.952 li
240.76 317.847 240.813 317.794 240.917 317.794 cv
251.26 317.794 li
251.365 317.794 251.435 317.882 251.435 318.022 cv
250.857 321.644 li
250.788 321.749 li
250.682 321.802 li
250.525 321.802 li
250.402 321.802 250.35 321.732 250.35 321.574 cv
250.473 320.752 250.542 320.174 250.542 319.824 cv
250.542 319.422 250.455 319.107 250.28 318.897 cv
250.105 318.687 249.878 318.564 249.615 318.494 cv
249.335 318.442 248.985 318.407 248.548 318.407 cv
247.515 318.407 li
247.2 318.407 246.99 318.442 246.885 318.494 cv
246.78 318.564 246.675 318.722 246.605 319.002 cv
244.208 328.609 li
244.19 328.679 li
244.173 328.767 li
244.173 328.924 244.26 329.012 244.435 329.047 cv
244.732 329.117 245.38 329.134 246.378 329.134 cv
246.482 329.134 246.553 329.222 246.553 329.362 cv
246.5 329.537 246.465 329.642 246.447 329.677 cv
246.413 329.729 246.36 329.747 246.255 329.747 cv
240.06 329.747 li
239.938 329.747 239.885 329.677 239.885 329.519 cv
f
255.375 325.587 mo
255.375 300.612 li
258.8 300.612 li
258.8 301.612 li
256.375 301.612 li
256.375 324.587 li
258.8 324.587 li
258.8 325.587 li
255.375 325.587 li
f
263.974 309.979 mo
263.974 309.367 li
265.426 309.367 266.161 309.192 266.161 308.807 cv
266.161 299.619 li
265.549 299.917 264.779 300.057 263.869 300.057 cv
263.869 299.444 li
265.286 299.444 266.371 299.077 267.106 298.324 cv
267.351 298.324 li
267.474 298.377 li
267.526 298.482 li
267.526 308.807 li
267.526 309.192 268.244 309.367 269.714 309.367 cv
269.714 309.979 li
263.974 309.979 li
f
260.169 329.747 mo
260.046 329.747 259.994 329.677 259.994 329.519 cv
260.029 329.362 li
260.099 329.204 li
260.221 329.134 li
260.921 329.134 261.429 329.099 261.709 329.012 cv
261.849 328.977 261.971 328.819 262.041 328.539 cv
264.439 318.932 li
264.456 318.827 264.474 318.739 264.474 318.687 cv
264.474 318.564 264.404 318.494 264.264 318.477 cv
264.036 318.442 263.616 318.407 263.004 318.407 cv
262.881 318.407 262.829 318.337 262.829 318.179 cv
262.864 318.039 262.899 317.934 262.934 317.882 cv
262.951 317.829 263.021 317.794 263.126 317.794 cv
267.834 317.794 li
267.939 317.794 268.009 317.882 268.009 318.022 cv
267.974 318.179 li
267.904 318.337 li
267.781 318.407 li
267.064 318.407 266.574 318.459 266.294 318.529 cv
266.136 318.599 266.031 318.757 265.961 319.002 cv
264.544 324.672 li
271.404 319.369 li
271.404 319.352 271.474 319.282 271.614 319.142 cv
271.754 319.002 271.824 318.879 271.824 318.739 cv
271.824 318.529 271.614 318.407 271.229 318.407 cv
271.106 318.407 271.054 318.337 271.054 318.179 cv
271.106 317.969 li
271.176 317.847 li
271.351 317.794 li
274.746 317.794 li
274.869 317.864 li
274.921 318.022 li
274.886 318.179 li
274.799 318.354 li
274.676 318.407 li
273.819 318.407 272.891 318.809 271.876 319.597 cv
271.841 319.614 li
271.806 319.614 li
271.789 319.632 li
268.184 322.432 li
270.809 328.574 li
270.949 328.837 271.124 328.994 271.316 329.047 cv
271.491 329.117 271.771 329.134 272.156 329.134 cv
272.261 329.134 272.331 329.222 272.331 329.362 cv
272.296 329.502 272.261 329.607 272.226 329.659 cv
272.034 329.747 li
267.974 329.747 li
267.869 329.747 267.816 329.677 267.816 329.519 cv
267.816 329.414 267.834 329.309 267.869 329.239 cv
267.886 329.169 267.939 329.134 268.044 329.134 cv
268.324 329.134 268.586 329.117 268.796 329.047 cv
269.006 328.994 269.111 328.854 269.111 328.627 cv
269.094 328.452 li
266.924 323.394 li
264.369 325.372 li
263.564 328.609 li
263.529 328.749 263.529 328.837 263.529 328.854 cv
263.529 328.977 263.599 329.047 263.739 329.064 cv
263.949 329.117 264.369 329.134 264.999 329.134 cv
265.104 329.134 265.174 329.222 265.174 329.362 cv
265.139 329.537 265.104 329.642 265.086 329.677 cv
265.051 329.729 264.981 329.747 264.876 329.747 cv
260.169 329.747 li
f
277.881 325.587 mo
277.881 324.587 li
280.306 324.587 li
280.306 301.612 li
277.881 301.612 li
277.881 300.612 li
281.306 300.612 li
281.306 325.587 li
277.881 325.587 li
f
239.08 316.229 mo
249.3 316.229 li
249.3 314.667 li
239.08 314.667 li
cp
f
259.346 316.229 mo
274.206 316.229 li
274.206 314.667 li
259.346 314.667 li
cp
f
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
[1 3 ] 0 dsh
152.64 245.897 mo
371.52 245.897 li
@
grestore
152.64 245.897 mo
156.64 245.897 li
f
152.64 245.897 mo
156.64 245.897 li
@
371.52 245.897 mo
367.52 245.897 li
f
371.52 245.897 mo
367.52 245.897 li
@
145.286 238.906 mo
144.368 238.906 143.684 239.356 143.216 240.256 cv
142.748 241.156 142.532 242.506 142.532 244.306 cv
142.532 246.106 142.748 247.456 143.216 248.356 cv
143.684 249.256 144.368 249.706 145.286 249.706 cv
146.204 249.706 146.888 249.256 147.356 248.356 cv
147.806 247.456 148.04 246.106 148.04 244.306 cv
148.04 242.506 147.806 241.156 147.356 240.256 cv
146.888 239.356 146.204 238.906 145.286 238.906 cv
145.286 237.502 mo
146.744 237.502 147.86 238.096 148.652 239.248 cv
149.426 240.418 149.822 242.11 149.822 244.306 cv
149.822 246.52 149.426 248.212 148.652 249.364 cv
147.86 250.516 146.744 251.092 145.286 251.092 cv
143.81 251.092 142.676 250.516 141.902 249.364 cv
141.128 248.212 140.75 246.52 140.75 244.306 cv
140.75 242.11 141.128 240.418 141.902 239.248 cv
142.676 238.096 143.81 237.502 145.286 237.502 cv
f
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
[1 3 ] 0 dsh
152.64 193.783 mo
371.52 193.783 li
@
grestore
152.64 193.783 mo
156.64 193.783 li
f
152.64 193.783 mo
156.64 193.783 li
@
371.52 193.783 mo
367.52 193.783 li
f
371.52 193.783 mo
367.52 193.783 li
@
130.256 185.622 mo
137.222 185.622 li
137.222 187.116 li
131.876 187.116 li
131.876 190.338 li
132.128 190.248 132.398 190.176 132.65 190.14 cv
132.902 190.104 133.172 190.068 133.424 190.068 cv
134.882 190.068 136.034 190.482 136.898 191.274 cv
137.762 192.084 138.194 193.164 138.194 194.532 cv
138.194 195.954 137.744 197.052 136.862 197.826 cv
135.98 198.6 134.738 198.978 133.154 198.978 cv
132.596 198.978 132.038 198.924 131.462 198.852 cv
130.886 198.762 130.31 198.636 129.698 198.438 cv
129.698 196.656 li
130.22 196.944 130.76 197.16 131.336 197.304 cv
131.894 197.448 132.488 197.502 133.118 197.502 cv
134.126 197.502 134.936 197.25 135.53 196.71 cv
136.106 196.17 136.412 195.45 136.412 194.532 cv
136.412 193.632 136.106 192.912 135.53 192.372 cv
134.936 191.832 134.126 191.562 133.118 191.562 cv
132.65 191.562 132.164 191.616 131.696 191.724 cv
131.228 191.832 130.742 191.994 130.256 192.21 cv
130.256 185.622 li
f
145.484 186.792 mo
144.566 186.792 143.882 187.242 143.414 188.142 cv
142.946 189.042 142.73 190.392 142.73 192.192 cv
142.73 193.992 142.946 195.342 143.414 196.242 cv
143.882 197.142 144.566 197.592 145.484 197.592 cv
146.402 197.592 147.086 197.142 147.554 196.242 cv
148.004 195.342 148.238 193.992 148.238 192.192 cv
148.238 190.392 148.004 189.042 147.554 188.142 cv
147.086 187.242 146.402 186.792 145.484 186.792 cv
145.484 185.388 mo
146.942 185.388 148.058 185.982 148.85 187.134 cv
149.624 188.304 150.02 189.996 150.02 192.192 cv
150.02 194.406 149.624 196.098 148.85 197.25 cv
148.058 198.402 146.942 198.978 145.484 198.978 cv
144.008 198.978 142.874 198.402 142.1 197.25 cv
141.326 196.098 140.948 194.406 140.948 192.192 cv
140.948 189.996 141.326 188.304 142.1 187.134 cv
142.874 185.982 144.008 185.388 145.484 185.388 cv
f
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
[1 3 ] 0 dsh
152.64 141.669 mo
371.52 141.669 li
@
grestore
152.64 141.669 mo
156.64 141.669 li
f
152.64 141.669 mo
156.64 141.669 li
@
371.52 141.669 mo
367.52 141.669 li
f
371.52 141.669 mo
367.52 141.669 li
@
119.685 145.136 mo
122.582 145.136 li
122.582 135.128 li
119.433 135.758 li
119.433 134.138 li
122.564 133.508 li
124.346 133.508 li
124.346 145.136 li
127.244 145.136 li
127.244 146.63 li
119.685 146.63 li
119.685 145.136 li
f
134.625 134.678 mo
133.707 134.678 133.023 135.128 132.555 136.028 cv
132.087 136.928 131.871 138.278 131.871 140.078 cv
131.871 141.878 132.087 143.228 132.555 144.128 cv
133.023 145.028 133.707 145.478 134.625 145.478 cv
135.543 145.478 136.227 145.028 136.695 144.128 cv
137.145 143.228 137.379 141.878 137.379 140.078 cv
137.379 138.278 137.145 136.928 136.695 136.028 cv
136.227 135.128 135.543 134.678 134.625 134.678 cv
134.625 133.274 mo
136.083 133.274 137.199 133.868 137.991 135.02 cv
138.765 136.19 139.161 137.882 139.161 140.078 cv
139.161 142.292 138.765 143.984 137.991 145.136 cv
137.199 146.288 136.083 146.864 134.625 146.864 cv
133.149 146.864 132.015 146.288 131.241 145.136 cv
130.467 143.984 130.089 142.292 130.089 140.078 cv
130.089 137.882 130.467 136.19 131.241 135.02 cv
132.015 133.868 133.149 133.274 134.625 133.274 cv
f
146.073 134.678 mo
145.155 134.678 144.471 135.128 144.003 136.028 cv
143.535 136.928 143.319 138.278 143.319 140.078 cv
143.319 141.878 143.535 143.228 144.003 144.128 cv
144.471 145.028 145.155 145.478 146.073 145.478 cv
146.991 145.478 147.675 145.028 148.143 144.128 cv
148.593 143.228 148.827 141.878 148.827 140.078 cv
148.827 138.278 148.593 136.928 148.143 136.028 cv
147.675 135.128 146.991 134.678 146.073 134.678 cv
146.073 133.274 mo
147.531 133.274 148.647 133.868 149.439 135.02 cv
150.213 136.19 150.609 137.882 150.609 140.078 cv
150.609 142.292 150.213 143.984 149.439 145.136 cv
148.647 146.288 147.531 146.864 146.073 146.864 cv
144.597 146.864 143.463 146.288 142.689 145.136 cv
141.915 143.984 141.537 142.292 141.537 140.078 cv
141.537 137.882 141.915 136.19 142.689 135.02 cv
143.463 133.868 144.597 133.274 146.073 133.274 cv
f
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
[1 3 ] 0 dsh
152.64 89.5543 mo
371.52 89.5543 li
@
grestore
152.64 89.5543 mo
156.64 89.5543 li
f
152.64 89.5543 mo
156.64 89.5543 li
@
371.52 89.5543 mo
367.52 89.5543 li
f
371.52 89.5543 mo
367.52 89.5543 li
@
119.685 93.0212 mo
122.582 93.0212 li
122.582 83.0132 li
119.433 83.6432 li
119.433 82.0232 li
122.564 81.3932 li
124.346 81.3932 li
124.346 93.0212 li
127.244 93.0212 li
127.244 94.5152 li
119.685 94.5152 li
119.685 93.0212 li
f
130.845 81.3932 mo
137.811 81.3932 li
137.811 82.8872 li
132.465 82.8872 li
132.465 86.1092 li
132.717 86.0192 132.987 85.9472 133.239 85.9112 cv
133.491 85.8752 133.761 85.8392 134.013 85.8392 cv
135.471 85.8392 136.623 86.2532 137.487 87.0452 cv
138.351 87.8552 138.783 88.9352 138.783 90.3032 cv
138.783 91.7252 138.333 92.8232 137.451 93.5972 cv
136.569 94.3712 135.327 94.7492 133.743 94.7492 cv
133.185 94.7492 132.627 94.6952 132.051 94.6232 cv
131.475 94.5332 130.899 94.4072 130.287 94.2092 cv
130.287 92.4272 li
130.809 92.7152 131.349 92.9312 131.925 93.0752 cv
132.483 93.2192 133.077 93.2732 133.707 93.2732 cv
134.715 93.2732 135.525 93.0212 136.119 92.4812 cv
136.695 91.9412 137.001 91.2212 137.001 90.3032 cv
137.001 89.4032 136.695 88.6832 136.119 88.1432 cv
135.525 87.6032 134.715 87.3332 133.707 87.3332 cv
133.239 87.3332 132.753 87.3872 132.285 87.4952 cv
131.817 87.6032 131.331 87.7652 130.845 87.9812 cv
130.845 81.3932 li
f
146.073 82.5632 mo
145.155 82.5632 144.471 83.0132 144.003 83.9132 cv
143.535 84.8132 143.319 86.1632 143.319 87.9632 cv
143.319 89.7632 143.535 91.1132 144.003 92.0132 cv
144.471 92.9132 145.155 93.3632 146.073 93.3632 cv
146.991 93.3632 147.675 92.9132 148.143 92.0132 cv
148.593 91.1132 148.827 89.7632 148.827 87.9632 cv
148.827 86.1632 148.593 84.8132 148.143 83.9132 cv
147.675 83.0132 146.991 82.5632 146.073 82.5632 cv
146.073 81.1592 mo
147.531 81.1592 148.647 81.7532 149.439 82.9052 cv
150.213 84.0752 150.609 85.7672 150.609 87.9632 cv
150.609 90.1772 150.213 91.8692 149.439 93.0212 cv
148.647 94.1732 147.531 94.7492 146.073 94.7492 cv
144.597 94.7492 143.463 94.1732 142.689 93.0212 cv
141.915 91.8692 141.537 90.1772 141.537 87.9632 cv
141.537 85.7672 141.915 84.0752 142.689 82.9052 cv
143.463 81.7532 144.597 81.1592 146.073 81.1592 cv
f
gsave
152.64 256.32 mo
371.52 256.32 li
371.52 37.44 li
152.64 37.44 li
cp
clp
[1 3 ] 0 dsh
152.64 37.44 mo
371.52 37.44 li
@
grestore
152.64 37.44 mo
156.64 37.44 li
f
152.64 37.44 mo
156.64 37.44 li
@
371.52 37.44 mo
367.52 37.44 li
f
371.52 37.44 mo
367.52 37.44 li
@
120.237 40.9069 mo
126.429 40.9069 li
126.429 42.4009 li
118.095 42.4009 li
118.095 40.9069 li
118.761 40.2229 119.679 39.2869 120.849 38.0989 cv
122.001 36.9289 122.739 36.1729 123.045 35.8309 cv
123.621 35.2009 124.017 34.6609 124.233 34.2109 cv
124.449 33.7789 124.575 33.3289 124.575 32.8969 cv
124.575 32.2129 124.323 31.6369 123.837 31.2049 cv
123.351 30.7729 122.721 30.5389 121.929 30.5389 cv
121.371 30.5389 120.777 30.6469 120.165 30.8269 cv
119.553 31.0249 118.887 31.3129 118.185 31.7089 cv
118.185 29.9089 li
118.905 29.6209 119.571 29.4049 120.183 29.2609 cv
120.795 29.1169 121.371 29.0449 121.893 29.0449 cv
123.243 29.0449 124.323 29.3869 125.133 30.0709 cv
125.943 30.7549 126.357 31.6549 126.357 32.7889 cv
126.357 33.3289 126.249 33.8509 126.051 34.3189 cv
125.853 34.8049 125.493 35.3809 124.953 36.0289 cv
124.809 36.2089 124.341 36.6949 123.549 37.5049 cv
122.757 38.3149 121.659 39.4489 120.237 40.9069 cv
f
133.953 30.4489 mo
133.035 30.4489 132.351 30.8989 131.883 31.7989 cv
131.415 32.6989 131.199 34.0489 131.199 35.8489 cv
131.199 37.6489 131.415 38.9989 131.883 39.8989 cv
132.351 40.7989 133.035 41.2489 133.953 41.2489 cv
134.871 41.2489 135.555 40.7989 136.023 39.8989 cv
136.473 38.9989 136.707 37.6489 136.707 35.8489 cv
136.707 34.0489 136.473 32.6989 136.023 31.7989 cv
135.555 30.8989 134.871 30.4489 133.953 30.4489 cv
133.953 29.0449 mo
135.411 29.0449 136.527 29.6389 137.319 30.7909 cv
138.093 31.9609 138.489 33.6529 138.489 35.8489 cv
138.489 38.0629 138.093 39.7549 137.319 40.9069 cv
136.527 42.0589 135.411 42.6349 133.953 42.6349 cv
132.477 42.6349 131.343 42.0589 130.569 40.9069 cv
129.795 39.7549 129.417 38.0629 129.417 35.8489 cv
129.417 33.6529 129.795 31.9609 130.569 30.7909 cv
131.343 29.6389 132.477 29.0449 133.953 29.0449 cv
f
145.401 30.4489 mo
144.483 30.4489 143.799 30.8989 143.331 31.7989 cv
142.863 32.6989 142.647 34.0489 142.647 35.8489 cv
142.647 37.6489 142.863 38.9989 143.331 39.8989 cv
143.799 40.7989 144.483 41.2489 145.401 41.2489 cv
146.319 41.2489 147.003 40.7989 147.471 39.8989 cv
147.921 38.9989 148.155 37.6489 148.155 35.8489 cv
148.155 34.0489 147.921 32.6989 147.471 31.7989 cv
147.003 30.8989 146.319 30.4489 145.401 30.4489 cv
145.401 29.0449 mo
146.859 29.0449 147.975 29.6389 148.767 30.7909 cv
149.541 31.9609 149.937 33.6529 149.937 35.8489 cv
149.937 38.0629 149.541 39.7549 148.767 40.9069 cv
147.975 42.0589 146.859 42.6349 145.401 42.6349 cv
143.925 42.6349 142.791 42.0589 142.017 40.9069 cv
141.243 39.7549 140.865 38.0629 140.865 35.8489 cv
140.865 33.6529 141.243 31.9609 142.017 30.7909 cv
142.791 29.6389 143.925 29.0449 145.401 29.0449 cv
f
94.9086 233.132 mo
94.9086 225.59 li
96.4026 225.59 li
96.4026 231.35 li
100.273 231.35 li
100.273 226.148 li
101.767 226.148 li
101.767 231.35 li
108.031 231.35 li
108.031 233.132 li
94.9086 233.132 li
f
98.1846 222.854 mo
98.1846 221.234 li
108.031 221.234 li
108.031 222.854 li
98.1846 222.854 li
94.3506 222.854 mo
94.3506 221.234 li
96.4026 221.234 li
96.4026 222.854 li
94.3506 222.854 li
f
95.3946 216.248 mo
98.1846 216.248 li
98.1846 212.918 li
99.4446 212.918 li
99.4446 216.248 li
104.791 216.248 li
105.601 216.248 106.123 216.14 106.339 215.924 cv
106.573 215.708 106.681 215.258 106.681 214.574 cv
106.681 212.918 li
108.031 212.918 li
108.031 214.574 li
108.031 215.834 107.797 216.698 107.329 217.166 cv
106.861 217.634 106.015 217.868 104.791 217.868 cv
99.4446 217.868 li
99.4446 219.056 li
98.1846 219.056 li
98.1846 217.868 li
95.3946 217.868 li
95.3946 216.248 li
f
101.875 198.77 mo
102.019 198.392 102.289 198.014 102.703 197.654 cv
103.135 197.294 103.711 196.934 104.449 196.574 cv
108.031 194.774 li
108.031 196.682 li
104.665 198.356 li
103.801 198.788 103.207 199.22 102.919 199.616 cv
102.631 200.03 102.487 200.588 102.487 201.29 cv
102.487 203.216 li
108.031 203.216 li
108.031 204.998 li
94.9086 204.998 li
94.9086 200.984 li
94.9086 199.49 95.2326 198.374 95.8446 197.636 cv
96.4746 196.898 97.4286 196.52 98.6886 196.52 cv
99.5166 196.52 100.219 196.718 100.759 197.096 cv
101.299 197.492 101.677 198.05 101.875 198.77 cv
96.3666 203.216 mo
101.029 203.216 li
101.029 200.984 li
101.029 200.138 100.831 199.49 100.435 199.058 cv
100.039 198.626 99.4626 198.392 98.6886 198.392 cv
97.9326 198.392 97.3566 198.626 96.9606 199.058 cv
96.5646 199.49 96.3666 200.138 96.3666 200.984 cv
96.3666 203.216 li
f
102.703 184.136 mo
103.495 184.136 li
103.495 191.57 li
104.611 191.498 105.475 191.174 106.051 190.562 cv
106.627 189.968 106.915 189.14 106.915 188.06 cv
106.915 187.448 106.843 186.836 106.699 186.26 cv
106.555 185.684 106.321 185.09 105.997 184.514 cv
107.527 184.514 li
107.779 185.09 107.977 185.684 108.085 186.296 cv
108.193 186.908 108.265 187.538 108.265 188.15 cv
108.265 189.734 107.815 190.976 106.915 191.894 cv
106.015 192.812 104.773 193.262 103.207 193.262 cv
101.605 193.262 100.327 192.83 99.3726 191.966 cv
98.4366 191.102 97.9506 189.914 97.9506 188.438 cv
97.9506 187.106 98.3826 186.062 99.2286 185.288 cv
100.093 184.532 101.245 184.136 102.703 184.136 cv
102.235 185.756 mo
101.353 185.774 100.651 186.026 100.111 186.494 cv
99.5886 186.98 99.3186 187.628 99.3186 188.42 cv
99.3186 189.32 99.5886 190.04 100.093 190.58 cv
100.597 191.12 101.317 191.444 102.235 191.516 cv
102.235 185.756 li
f
98.4726 175.208 mo
100.003 175.208 li
99.7866 175.676 99.6066 176.144 99.4806 176.63 cv
99.3726 177.134 99.3006 177.638 99.3006 178.16 cv
99.3006 178.97 99.4266 179.582 99.6786 179.978 cv
99.9306 180.374 100.291 180.572 100.777 180.572 cv
101.155 180.572 101.443 180.428 101.659 180.14 cv
101.875 179.852 102.091 179.276 102.271 178.412 cv
102.397 177.854 li
102.649 176.702 103.009 175.892 103.441 175.406 cv
103.891 174.938 104.521 174.686 105.313 174.686 cv
106.231 174.686 106.951 175.046 107.473 175.766 cv
108.013 176.486 108.265 177.494 108.265 178.754 cv
108.265 179.294 108.211 179.834 108.121 180.41 cv
108.031 180.986 107.887 181.58 107.671 182.21 cv
105.997 182.21 li
106.321 181.616 106.555 181.022 106.699 180.446 cv
106.861 179.87 106.933 179.294 106.933 178.718 cv
106.933 177.962 106.807 177.368 106.555 176.954 cv
106.303 176.558 105.925 176.342 105.439 176.342 cv
105.007 176.342 104.665 176.504 104.431 176.792 cv
104.197 177.08 103.963 177.728 103.747 178.736 cv
103.621 179.294 li
103.405 180.302 103.081 181.04 102.649 181.472 cv
102.217 181.922 101.623 182.138 100.849 182.138 cv
99.9306 182.138 99.2106 181.814 98.7066 181.166 cv
98.2026 180.518 97.9506 179.582 97.9506 178.358 cv
97.9506 177.764 98.0046 177.206 98.0946 176.666 cv
98.1846 176.144 98.3106 175.658 98.4726 175.208 cv
f
98.1846 172.112 mo
98.1846 170.492 li
108.031 170.492 li
108.031 172.112 li
98.1846 172.112 li
94.3506 172.112 mo
94.3506 170.492 li
96.4026 170.492 li
96.4026 172.112 li
94.3506 172.112 li
f
99.6786 160.628 mo
94.3506 160.628 li
94.3506 159.008 li
108.031 159.008 li
108.031 160.628 li
106.555 160.628 li
107.149 160.97 107.581 161.402 107.851 161.924 cv
108.121 162.446 108.265 163.058 108.265 163.778 cv
108.265 164.966 107.797 165.938 106.861 166.694 cv
105.925 167.45 104.665 167.81 103.117 167.81 cv
101.569 167.81 100.327 167.45 99.3726 166.694 cv
98.4366 165.938 97.9506 164.966 97.9506 163.778 cv
97.9506 163.058 98.0946 162.446 98.3826 161.924 cv
98.6706 161.402 99.1026 160.97 99.6786 160.628 cv
103.117 166.136 mo
104.305 166.136 105.241 165.902 105.925 165.416 cv
106.609 164.93 106.933 164.246 106.933 163.382 cv
106.933 162.536 106.609 161.87 105.925 161.366 cv
105.241 160.88 104.305 160.628 103.117 160.628 cv
101.929 160.628 101.011 160.88 100.327 161.366 cv
99.6426 161.87 99.3006 162.536 99.3006 163.382 cv
99.3006 164.246 99.6426 164.93 100.327 165.416 cv
101.011 165.902 101.929 166.136 103.117 166.136 cv
f
104.143 155.84 mo
98.1846 155.84 li
98.1846 154.22 li
104.089 154.22 li
105.025 154.22 105.709 154.04 106.177 153.68 cv
106.645 153.32 106.879 152.78 106.879 152.042 cv
106.879 151.178 106.609 150.476 106.051 149.972 cv
105.493 149.468 104.737 149.216 103.765 149.216 cv
98.1846 149.216 li
98.1846 147.596 li
108.031 147.596 li
108.031 149.216 li
106.519 149.216 li
107.131 149.612 107.563 150.08 107.851 150.584 cv
108.121 151.106 108.265 151.7 108.265 152.384 cv
108.265 153.518 107.923 154.382 107.221 154.958 cv
106.537 155.552 105.511 155.84 104.143 155.84 cv
f
103.081 139.784 mo
103.081 141.098 103.243 141.998 103.531 142.502 cv
103.837 143.006 104.341 143.258 105.061 143.258 cv
105.637 143.258 106.105 143.078 106.429 142.7 cv
106.771 142.322 106.933 141.8 106.933 141.152 cv
106.933 140.252 106.627 139.532 105.979 138.992 cv
105.349 138.452 104.503 138.182 103.441 138.182 cv
103.081 138.182 li
103.081 139.784 li
102.415 136.562 mo
108.031 136.562 li
108.031 138.182 li
106.537 138.182 li
107.149 138.56 107.581 139.028 107.851 139.568 cv
108.121 140.108 108.265 140.792 108.265 141.584 cv
108.265 142.592 107.995 143.402 107.437 143.996 cv
106.879 144.59 106.123 144.878 105.169 144.878 cv
104.071 144.878 103.243 144.518 102.667 143.762 cv
102.109 143.024 101.821 141.926 101.821 140.45 cv
101.821 138.182 li
101.659 138.182 li
100.921 138.182 100.345 138.434 99.9306 138.92 cv
99.5346 139.406 99.3186 140.09 99.3186 140.972 cv
99.3186 141.548 99.3906 142.088 99.5346 142.628 cv
99.6786 143.168 99.8766 143.672 100.129 144.158 cv
98.6346 144.158 li
98.4186 143.582 98.2386 143.006 98.1306 142.448 cv
98.0226 141.89 97.9506 141.35 97.9506 140.81 cv
97.9506 139.388 98.3286 138.326 99.0666 137.624 cv
99.8046 136.922 100.921 136.562 102.415 136.562 cv
f
94.3506 133.232 mo
94.3506 131.612 li
108.031 131.612 li
108.031 133.232 li
94.3506 133.232 li
f
96.3666 120.65 mo
101.299 120.65 li
101.299 118.418 li
101.299 117.59 101.101 116.96 100.669 116.51 cv
100.237 116.06 99.6246 115.826 98.8326 115.826 cv
98.0406 115.826 97.4466 116.06 97.0146 116.51 cv
96.5826 116.96 96.3666 117.59 96.3666 118.418 cv
96.3666 120.65 li
94.9086 122.432 mo
94.9086 118.418 li
94.9086 116.96 95.2506 115.844 95.9166 115.088 cv
96.5826 114.332 97.5546 113.954 98.8326 113.954 cv
100.129 113.954 101.119 114.332 101.767 115.088 cv
102.433 115.844 102.757 116.96 102.757 118.418 cv
102.757 120.65 li
108.031 120.65 li
108.031 122.432 li
94.9086 122.432 li
f
102.703 103.226 mo
103.495 103.226 li
103.495 110.66 li
104.611 110.588 105.475 110.264 106.051 109.652 cv
106.627 109.058 106.915 108.23 106.915 107.15 cv
106.915 106.538 106.843 105.926 106.699 105.35 cv
106.555 104.774 106.321 104.18 105.997 103.604 cv
107.527 103.604 li
107.779 104.18 107.977 104.774 108.085 105.386 cv
108.193 105.998 108.265 106.628 108.265 107.24 cv
108.265 108.824 107.815 110.066 106.915 110.984 cv
106.015 111.902 104.773 112.352 103.207 112.352 cv
101.605 112.352 100.327 111.92 99.3726 111.056 cv
98.4366 110.192 97.9506 109.004 97.9506 107.528 cv
97.9506 106.196 98.3826 105.152 99.2286 104.378 cv
100.093 103.622 101.245 103.226 102.703 103.226 cv
102.235 104.846 mo
101.353 104.864 100.651 105.116 100.111 105.584 cv
99.5886 106.07 99.3186 106.718 99.3186 107.51 cv
99.3186 108.41 99.5886 109.13 100.093 109.67 cv
100.597 110.21 101.317 110.534 102.235 110.606 cv
102.235 104.846 li
f
99.6966 94.8737 mo
99.5886 95.0537 99.5166 95.2517 99.4626 95.4677 cv
99.4266 95.6837 99.3906 95.9177 99.3906 96.1697 cv
99.3906 97.0877 99.6966 97.7897 100.291 98.2757 cv
100.885 98.7797 101.731 99.0137 102.847 99.0137 cv
108.031 99.0137 li
108.031 100.634 li
98.1846 100.634 li
98.1846 99.0137 li
99.7146 99.0137 li
99.1206 98.6897 98.6706 98.2397 98.3826 97.6997 cv
98.0946 97.1597 97.9506 96.4937 97.9506 95.7017 cv
97.9506 95.5937 97.9686 95.4677 97.9686 95.3237 cv
97.9866 95.1977 98.0046 95.0537 98.0406 94.8737 cv
99.6966 94.8737 li
f
98.5626 86.0898 mo
100.075 86.0898 li
99.8226 86.5578 99.6426 87.0078 99.5166 87.4758 cv
99.3906 87.9438 99.3186 88.3938 99.3186 88.8618 cv
99.3186 89.9058 99.6606 90.7338 100.327 91.3098 cv
100.993 91.8858 101.929 92.1738 103.117 92.1738 cv
104.323 92.1738 105.259 91.8858 105.925 91.3098 cv
106.591 90.7338 106.915 89.9058 106.915 88.8618 cv
106.915 88.3938 106.861 87.9438 106.735 87.4758 cv
106.609 87.0078 106.411 86.5578 106.159 86.0898 cv
107.653 86.0898 li
107.869 86.5578 108.031 87.0258 108.121 87.4938 cv
108.211 87.9798 108.265 88.5018 108.265 89.0418 cv
108.265 90.5178 107.815 91.7058 106.879 92.5698 cv
105.961 93.4518 104.701 93.8838 103.117 93.8838 cv
101.515 93.8838 100.255 93.4518 99.3366 92.5698 cv
98.4186 91.6878 97.9506 90.4818 97.9506 88.9338 cv
97.9506 88.4298 98.0046 87.9438 98.1126 87.4758 cv
98.2206 87.0078 98.3646 86.5398 98.5626 86.0898 cv
f
102.703 74.8577 mo
103.495 74.8577 li
103.495 82.2917 li
104.611 82.2197 105.475 81.8957 106.051 81.2837 cv
106.627 80.6897 106.915 79.8617 106.915 78.7817 cv
106.915 78.1697 106.843 77.5577 106.699 76.9817 cv
106.555 76.4057 106.321 75.8117 105.997 75.2357 cv
107.527 75.2357 li
107.779 75.8117 107.977 76.4057 108.085 77.0177 cv
108.193 77.6297 108.265 78.2597 108.265 78.8717 cv
108.265 80.4557 107.815 81.6977 106.915 82.6157 cv
106.015 83.5337 104.773 83.9837 103.207 83.9837 cv
101.605 83.9837 100.327 83.5517 99.3726 82.6877 cv
98.4366 81.8237 97.9506 80.6357 97.9506 79.1597 cv
97.9506 77.8277 98.3826 76.7837 99.2286 76.0097 cv
100.093 75.2537 101.245 74.8577 102.703 74.8577 cv
102.235 76.4777 mo
101.353 76.4957 100.651 76.7477 100.111 77.2157 cv
99.5886 77.7017 99.3186 78.3497 99.3186 79.1417 cv
99.3186 80.0417 99.5886 80.7617 100.093 81.3017 cv
100.597 81.8417 101.317 82.1657 102.235 82.2377 cv
102.235 76.4777 li
f
102.091 64.0216 mo
108.031 64.0216 li
108.031 65.6416 li
102.145 65.6416 li
101.209 65.6416 100.525 65.8396 100.057 66.1996 cv
99.5886 66.5596 99.3546 67.0996 99.3546 67.8196 cv
99.3546 68.7016 99.6426 69.3856 100.201 69.8896 cv
100.759 70.3936 101.515 70.6456 102.469 70.6456 cv
108.031 70.6456 li
108.031 72.2656 li
98.1846 72.2656 li
98.1846 70.6456 li
99.7146 70.6456 li
99.1386 70.2676 98.6886 69.8176 98.4006 69.2776 cv
98.1126 68.7556 97.9506 68.1436 97.9506 67.4596 cv
97.9506 66.3436 98.3106 65.4796 99.0126 64.9036 cv
99.7146 64.3276 100.741 64.0216 102.091 64.0216 cv
f
95.3946 59.1976 mo
98.1846 59.1976 li
98.1846 55.8676 li
99.4446 55.8676 li
99.4446 59.1976 li
104.791 59.1976 li
105.601 59.1976 106.123 59.0896 106.339 58.8736 cv
106.573 58.6576 106.681 58.2076 106.681 57.5236 cv
106.681 55.8676 li
108.031 55.8676 li
108.031 57.5236 li
108.031 58.7836 107.797 59.6476 107.329 60.1156 cv
106.861 60.5836 106.015 60.8176 104.791 60.8176 cv
99.4446 60.8176 li
99.4446 62.0056 li
98.1846 62.0056 li
98.1846 60.8176 li
95.3946 60.8176 li
95.3946 59.1976 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
