%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: timescales_cartoon.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: Vy
%%CreationDate: 4/6/2015, 2:55:17 PM
%%BoundingBox: 0 0 576 576
%%HiResBoundingBox: 0 0 576 576
%%CropBox: 0 0 576 576
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 842 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2015-02-04T00:28:58-05:00"
   xmp:CreatorTool="matplotlib 1.4.2, http://matplotlib.org"
   xmp:ModifyDate="2015-02-04T00:31:35-06:00"
   xmp:MetadataDate="2015-02-04T00:31:35-06:00"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:5e845465-04ee-42bd-a01c-b50ad689d330"
   xmpMM:InstanceID="uuid:c4e07f5b-df2c-4117-894d-9aba7f980510"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -576 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 576 li
576 576 li
576 0 li
cp
clp
gsave
0 576 mo
576 576 li
576 0 li
0 0 li
cp
clp
0 576 mo
576 576 li
576 0 li
0 0 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
25.4312 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.4312 19.8 li
cp
/1 
[/DeviceCMYK] /CSA add_res
.0560006 .0654307 .0525521 0 cmyk
f
196.044 422.029 mo
192.514 409.716 li
196.044 409.716 li
196.044 327.628 li
196.044 409.716 li
199.574 409.716 li
cp
1 /0 /CSD get_res sepcs
1 sep
f
1.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
196.044 422.029 mo
192.514 409.716 li
196.044 409.716 li
196.044 327.628 li
196.044 409.716 li
199.574 409.716 li
cp
@
78.3801 422.029 mo
74.8501 409.716 li
78.3801 409.716 li
78.3801 286.585 li
78.3801 409.716 li
81.9101 409.716 li
cp
f
78.3801 422.029 mo
74.8501 409.716 li
78.3801 409.716 li
78.3801 286.585 li
78.3801 409.716 li
81.9101 409.716 li
cp
@
2 lw
2 lc
1 lj
537.27 442.363 mo
419.606 441.738 li
349.007 439.653 li
301.942 436.547 li
278.409 437.026 li
254.876 434.823 li
231.343 432.679 li
219.577 430.288 li
207.81 429.453 li
196.044 426.547 li
184.278 422.813 li
172.511 420.208 li
160.745 417.679 li
148.978 411.626 li
137.212 406.09 li
125.445 402.21 li
113.679 387.286 li
101.913 376.733 li
90.1464 360.539 li
78.3804 330.94 li
66.6134 290.976 li
60.7304 254.743 li
54.8474 178.177 li
48.9644 98.8667 li
43.0804 32.6197 li
1 .836759 .0303349 .00479133 cmyk
@
gsave
533.02 446.613 mo
541.52 446.613 li
541.52 438.113 li
533.02 438.113 li
cp
clp
537.27 446.363 mo
538.331 446.363 539.348 445.942 540.098 445.191 cv
540.849 444.441 541.27 443.424 541.27 442.363 cv
541.27 441.302 540.849 440.285 540.098 439.535 cv
539.348 438.784 538.331 438.363 537.27 438.363 cv
536.209 438.363 535.192 438.784 534.442 439.535 cv
533.691 440.285 533.27 441.302 533.27 442.363 cv
533.27 443.424 533.691 444.441 534.442 445.191 cv
535.192 445.942 536.209 446.363 537.27 446.363 cv
cp
f
.5 lw
0 lc
537.27 446.363 mo
538.331 446.363 539.348 445.942 540.098 445.191 cv
540.849 444.441 541.27 443.424 541.27 442.363 cv
541.27 441.302 540.849 440.285 540.098 439.535 cv
539.348 438.784 538.331 438.363 537.27 438.363 cv
536.209 438.363 535.192 438.784 534.442 439.535 cv
533.691 440.285 533.27 441.302 533.27 442.363 cv
533.27 443.424 533.691 444.441 534.442 445.191 cv
535.192 445.942 536.209 446.363 537.27 446.363 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
415.356 445.987 mo
423.856 445.987 li
423.856 437.487 li
415.356 437.487 li
cp
clp
419.606 445.737 mo
420.667 445.737 421.684 445.316 422.434 444.565 cv
423.185 443.815 423.606 442.798 423.606 441.737 cv
423.606 440.676 423.185 439.659 422.434 438.909 cv
421.684 438.158 420.667 437.737 419.606 437.737 cv
418.545 437.737 417.528 438.158 416.778 438.909 cv
416.027 439.659 415.606 440.676 415.606 441.737 cv
415.606 442.798 416.027 443.815 416.778 444.565 cv
417.528 445.316 418.545 445.737 419.606 445.737 cv
cp
f
.5 lw
0 lc
419.606 445.737 mo
420.667 445.737 421.684 445.316 422.434 444.565 cv
423.185 443.815 423.606 442.798 423.606 441.737 cv
423.606 440.676 423.185 439.659 422.434 438.909 cv
421.684 438.158 420.667 437.737 419.606 437.737 cv
418.545 437.737 417.528 438.158 416.778 438.909 cv
416.027 439.659 415.606 440.676 415.606 441.737 cv
415.606 442.798 416.027 443.815 416.778 444.565 cv
417.528 445.316 418.545 445.737 419.606 445.737 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
344.758 443.903 mo
353.258 443.903 li
353.258 435.403 li
344.758 435.403 li
cp
clp
349.008 443.653 mo
350.069 443.653 351.086 443.232 351.836 442.481 cv
352.587 441.731 353.008 440.714 353.008 439.653 cv
353.008 438.592 352.587 437.575 351.836 436.825 cv
351.086 436.074 350.069 435.653 349.008 435.653 cv
347.947 435.653 346.93 436.074 346.18 436.825 cv
345.429 437.575 345.008 438.592 345.008 439.653 cv
345.008 440.714 345.429 441.731 346.18 442.481 cv
346.93 443.232 347.947 443.653 349.008 443.653 cv
cp
f
.5 lw
0 lc
349.008 443.653 mo
350.069 443.653 351.086 443.232 351.836 442.481 cv
352.587 441.731 353.008 440.714 353.008 439.653 cv
353.008 438.592 352.587 437.575 351.836 436.825 cv
351.086 436.074 350.069 435.653 349.008 435.653 cv
347.947 435.653 346.93 436.074 346.18 436.825 cv
345.429 437.575 345.008 438.592 345.008 439.653 cv
345.008 440.714 345.429 441.731 346.18 442.481 cv
346.93 443.232 347.947 443.653 349.008 443.653 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
297.692 440.797 mo
306.192 440.797 li
306.192 432.297 li
297.692 432.297 li
cp
clp
301.942 440.547 mo
303.003 440.547 304.02 440.126 304.77 439.375 cv
305.521 438.625 305.942 437.608 305.942 436.547 cv
305.942 435.486 305.521 434.469 304.77 433.719 cv
304.02 432.968 303.003 432.547 301.942 432.547 cv
300.881 432.547 299.864 432.968 299.114 433.719 cv
298.363 434.469 297.942 435.486 297.942 436.547 cv
297.942 437.608 298.363 438.625 299.114 439.375 cv
299.864 440.126 300.881 440.547 301.942 440.547 cv
cp
f
.5 lw
0 lc
301.942 440.547 mo
303.003 440.547 304.02 440.126 304.77 439.375 cv
305.521 438.625 305.942 437.608 305.942 436.547 cv
305.942 435.486 305.521 434.469 304.77 433.719 cv
304.02 432.968 303.003 432.547 301.942 432.547 cv
300.881 432.547 299.864 432.968 299.114 433.719 cv
298.363 434.469 297.942 435.486 297.942 436.547 cv
297.942 437.608 298.363 438.625 299.114 439.375 cv
299.864 440.126 300.881 440.547 301.942 440.547 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
274.159 441.276 mo
282.659 441.276 li
282.659 432.776 li
274.159 432.776 li
cp
clp
278.409 441.026 mo
279.47 441.026 280.487 440.605 281.237 439.854 cv
281.988 439.104 282.409 438.087 282.409 437.026 cv
282.409 435.965 281.988 434.948 281.237 434.198 cv
280.487 433.447 279.47 433.026 278.409 433.026 cv
277.348 433.026 276.331 433.447 275.581 434.198 cv
274.83 434.948 274.409 435.965 274.409 437.026 cv
274.409 438.087 274.83 439.104 275.581 439.854 cv
276.331 440.605 277.348 441.026 278.409 441.026 cv
cp
f
.5 lw
0 lc
278.409 441.026 mo
279.47 441.026 280.487 440.605 281.237 439.854 cv
281.988 439.104 282.409 438.087 282.409 437.026 cv
282.409 435.965 281.988 434.948 281.237 434.198 cv
280.487 433.447 279.47 433.026 278.409 433.026 cv
277.348 433.026 276.331 433.447 275.581 434.198 cv
274.83 434.948 274.409 435.965 274.409 437.026 cv
274.409 438.087 274.83 439.104 275.581 439.854 cv
276.331 440.605 277.348 441.026 278.409 441.026 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
250.626 439.072 mo
259.126 439.072 li
259.126 430.572 li
250.626 430.572 li
cp
clp
254.876 438.822 mo
255.937 438.822 256.954 438.401 257.704 437.65 cv
258.455 436.9 258.876 435.883 258.876 434.822 cv
258.876 433.761 258.455 432.744 257.704 431.994 cv
256.954 431.243 255.937 430.822 254.876 430.822 cv
253.815 430.822 252.798 431.243 252.048 431.994 cv
251.297 432.744 250.876 433.761 250.876 434.822 cv
250.876 435.883 251.297 436.9 252.048 437.65 cv
252.798 438.401 253.815 438.822 254.876 438.822 cv
cp
f
.5 lw
0 lc
254.876 438.822 mo
255.937 438.822 256.954 438.401 257.704 437.65 cv
258.455 436.9 258.876 435.883 258.876 434.822 cv
258.876 433.761 258.455 432.744 257.704 431.994 cv
256.954 431.243 255.937 430.822 254.876 430.822 cv
253.815 430.822 252.798 431.243 252.048 431.994 cv
251.297 432.744 250.876 433.761 250.876 434.822 cv
250.876 435.883 251.297 436.9 252.048 437.65 cv
252.798 438.401 253.815 438.822 254.876 438.822 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
227.094 436.928 mo
235.594 436.928 li
235.594 428.428 li
227.094 428.428 li
cp
clp
231.344 436.678 mo
232.405 436.678 233.422 436.257 234.172 435.506 cv
234.923 434.756 235.344 433.739 235.344 432.678 cv
235.344 431.617 234.923 430.6 234.172 429.85 cv
233.422 429.099 232.405 428.678 231.344 428.678 cv
230.283 428.678 229.266 429.099 228.516 429.85 cv
227.765 430.6 227.344 431.617 227.344 432.678 cv
227.344 433.739 227.765 434.756 228.516 435.506 cv
229.266 436.257 230.283 436.678 231.344 436.678 cv
cp
f
.5 lw
0 lc
231.344 436.678 mo
232.405 436.678 233.422 436.257 234.172 435.506 cv
234.923 434.756 235.344 433.739 235.344 432.678 cv
235.344 431.617 234.923 430.6 234.172 429.85 cv
233.422 429.099 232.405 428.678 231.344 428.678 cv
230.283 428.678 229.266 429.099 228.516 429.85 cv
227.765 430.6 227.344 431.617 227.344 432.678 cv
227.344 433.739 227.765 434.756 228.516 435.506 cv
229.266 436.257 230.283 436.678 231.344 436.678 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
215.327 434.538 mo
223.827 434.538 li
223.827 426.038 li
215.327 426.038 li
cp
clp
219.577 434.288 mo
220.638 434.288 221.655 433.867 222.405 433.116 cv
223.156 432.366 223.577 431.349 223.577 430.288 cv
223.577 429.227 223.156 428.21 222.405 427.46 cv
221.655 426.709 220.638 426.288 219.577 426.288 cv
218.516 426.288 217.499 426.709 216.749 427.46 cv
215.998 428.21 215.577 429.227 215.577 430.288 cv
215.577 431.349 215.998 432.366 216.749 433.116 cv
217.499 433.867 218.516 434.288 219.577 434.288 cv
cp
f
.5 lw
0 lc
219.577 434.288 mo
220.638 434.288 221.655 433.867 222.405 433.116 cv
223.156 432.366 223.577 431.349 223.577 430.288 cv
223.577 429.227 223.156 428.21 222.405 427.46 cv
221.655 426.709 220.638 426.288 219.577 426.288 cv
218.516 426.288 217.499 426.709 216.749 427.46 cv
215.998 428.21 215.577 429.227 215.577 430.288 cv
215.577 431.349 215.998 432.366 216.749 433.116 cv
217.499 433.867 218.516 434.288 219.577 434.288 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
203.561 433.703 mo
212.061 433.703 li
212.061 425.203 li
203.561 425.203 li
cp
clp
207.811 433.453 mo
208.872 433.453 209.889 433.032 210.639 432.281 cv
211.39 431.531 211.811 430.514 211.811 429.453 cv
211.811 428.392 211.39 427.375 210.639 426.625 cv
209.889 425.874 208.872 425.453 207.811 425.453 cv
206.75 425.453 205.733 425.874 204.983 426.625 cv
204.232 427.375 203.811 428.392 203.811 429.453 cv
203.811 430.514 204.232 431.531 204.983 432.281 cv
205.733 433.032 206.75 433.453 207.811 433.453 cv
cp
f
.5 lw
0 lc
207.811 433.453 mo
208.872 433.453 209.889 433.032 210.639 432.281 cv
211.39 431.531 211.811 430.514 211.811 429.453 cv
211.811 428.392 211.39 427.375 210.639 426.625 cv
209.889 425.874 208.872 425.453 207.811 425.453 cv
206.75 425.453 205.733 425.874 204.983 426.625 cv
204.232 427.375 203.811 428.392 203.811 429.453 cv
203.811 430.514 204.232 431.531 204.983 432.281 cv
205.733 433.032 206.75 433.453 207.811 433.453 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
191.794 430.797 mo
200.294 430.797 li
200.294 422.297 li
191.794 422.297 li
cp
clp
196.044 430.547 mo
197.105 430.547 198.122 430.126 198.872 429.375 cv
199.623 428.625 200.044 427.608 200.044 426.547 cv
200.044 425.486 199.623 424.469 198.872 423.719 cv
198.122 422.968 197.105 422.547 196.044 422.547 cv
194.983 422.547 193.966 422.968 193.216 423.719 cv
192.465 424.469 192.044 425.486 192.044 426.547 cv
192.044 427.608 192.465 428.625 193.216 429.375 cv
193.966 430.126 194.983 430.547 196.044 430.547 cv
cp
f
.5 lw
0 lc
196.044 430.547 mo
197.105 430.547 198.122 430.126 198.872 429.375 cv
199.623 428.625 200.044 427.608 200.044 426.547 cv
200.044 425.486 199.623 424.469 198.872 423.719 cv
198.122 422.968 197.105 422.547 196.044 422.547 cv
194.983 422.547 193.966 422.968 193.216 423.719 cv
192.465 424.469 192.044 425.486 192.044 426.547 cv
192.044 427.608 192.465 428.625 193.216 429.375 cv
193.966 430.126 194.983 430.547 196.044 430.547 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
180.028 427.063 mo
188.528 427.063 li
188.528 418.563 li
180.028 418.563 li
cp
clp
184.278 426.813 mo
185.339 426.813 186.356 426.392 187.106 425.641 cv
187.857 424.891 188.278 423.874 188.278 422.813 cv
188.278 421.752 187.857 420.735 187.106 419.985 cv
186.356 419.234 185.339 418.813 184.278 418.813 cv
183.217 418.813 182.2 419.234 181.45 419.985 cv
180.699 420.735 180.278 421.752 180.278 422.813 cv
180.278 423.874 180.699 424.891 181.45 425.641 cv
182.2 426.392 183.217 426.813 184.278 426.813 cv
cp
f
.5 lw
0 lc
184.278 426.813 mo
185.339 426.813 186.356 426.392 187.106 425.641 cv
187.857 424.891 188.278 423.874 188.278 422.813 cv
188.278 421.752 187.857 420.735 187.106 419.985 cv
186.356 419.234 185.339 418.813 184.278 418.813 cv
183.217 418.813 182.2 419.234 181.45 419.985 cv
180.699 420.735 180.278 421.752 180.278 422.813 cv
180.278 423.874 180.699 424.891 181.45 425.641 cv
182.2 426.392 183.217 426.813 184.278 426.813 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
168.261 424.458 mo
176.761 424.458 li
176.761 415.958 li
168.261 415.958 li
cp
clp
172.511 424.208 mo
173.572 424.208 174.589 423.787 175.339 423.036 cv
176.09 422.286 176.511 421.269 176.511 420.208 cv
176.511 419.147 176.09 418.13 175.339 417.38 cv
174.589 416.629 173.572 416.208 172.511 416.208 cv
171.45 416.208 170.433 416.629 169.683 417.38 cv
168.932 418.13 168.511 419.147 168.511 420.208 cv
168.511 421.269 168.932 422.286 169.683 423.036 cv
170.433 423.787 171.45 424.208 172.511 424.208 cv
cp
f
.5 lw
0 lc
172.511 424.208 mo
173.572 424.208 174.589 423.787 175.339 423.036 cv
176.09 422.286 176.511 421.269 176.511 420.208 cv
176.511 419.147 176.09 418.13 175.339 417.38 cv
174.589 416.629 173.572 416.208 172.511 416.208 cv
171.45 416.208 170.433 416.629 169.683 417.38 cv
168.932 418.13 168.511 419.147 168.511 420.208 cv
168.511 421.269 168.932 422.286 169.683 423.036 cv
170.433 423.787 171.45 424.208 172.511 424.208 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
156.495 421.929 mo
164.995 421.929 li
164.995 413.429 li
156.495 413.429 li
cp
clp
160.745 421.679 mo
161.806 421.679 162.823 421.258 163.573 420.507 cv
164.324 419.757 164.745 418.74 164.745 417.679 cv
164.745 416.618 164.324 415.601 163.573 414.851 cv
162.823 414.1 161.806 413.679 160.745 413.679 cv
159.684 413.679 158.667 414.1 157.917 414.851 cv
157.166 415.601 156.745 416.618 156.745 417.679 cv
156.745 418.74 157.166 419.757 157.917 420.507 cv
158.667 421.258 159.684 421.679 160.745 421.679 cv
cp
f
.5 lw
0 lc
160.745 421.679 mo
161.806 421.679 162.823 421.258 163.573 420.507 cv
164.324 419.757 164.745 418.74 164.745 417.679 cv
164.745 416.618 164.324 415.601 163.573 414.851 cv
162.823 414.1 161.806 413.679 160.745 413.679 cv
159.684 413.679 158.667 414.1 157.917 414.851 cv
157.166 415.601 156.745 416.618 156.745 417.679 cv
156.745 418.74 157.166 419.757 157.917 420.507 cv
158.667 421.258 159.684 421.679 160.745 421.679 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
144.729 415.875 mo
153.229 415.875 li
153.229 407.375 li
144.729 407.375 li
cp
clp
148.979 415.625 mo
150.04 415.625 151.057 415.204 151.807 414.453 cv
152.558 413.703 152.979 412.686 152.979 411.625 cv
152.979 410.564 152.558 409.547 151.807 408.797 cv
151.057 408.046 150.04 407.625 148.979 407.625 cv
147.918 407.625 146.901 408.046 146.151 408.797 cv
145.4 409.547 144.979 410.564 144.979 411.625 cv
144.979 412.686 145.4 413.703 146.151 414.453 cv
146.901 415.204 147.918 415.625 148.979 415.625 cv
cp
f
.5 lw
0 lc
148.979 415.625 mo
150.04 415.625 151.057 415.204 151.807 414.453 cv
152.558 413.703 152.979 412.686 152.979 411.625 cv
152.979 410.564 152.558 409.547 151.807 408.797 cv
151.057 408.046 150.04 407.625 148.979 407.625 cv
147.918 407.625 146.901 408.046 146.151 408.797 cv
145.4 409.547 144.979 410.564 144.979 411.625 cv
144.979 412.686 145.4 413.703 146.151 414.453 cv
146.901 415.204 147.918 415.625 148.979 415.625 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
132.962 410.34 mo
141.462 410.34 li
141.462 401.84 li
132.962 401.84 li
cp
clp
137.212 410.09 mo
138.273 410.09 139.29 409.669 140.04 408.918 cv
140.791 408.168 141.212 407.151 141.212 406.09 cv
141.212 405.029 140.791 404.012 140.04 403.262 cv
139.29 402.511 138.273 402.09 137.212 402.09 cv
136.151 402.09 135.134 402.511 134.384 403.262 cv
133.633 404.012 133.212 405.029 133.212 406.09 cv
133.212 407.151 133.633 408.168 134.384 408.918 cv
135.134 409.669 136.151 410.09 137.212 410.09 cv
cp
f
.5 lw
0 lc
137.212 410.09 mo
138.273 410.09 139.29 409.669 140.04 408.918 cv
140.791 408.168 141.212 407.151 141.212 406.09 cv
141.212 405.029 140.791 404.012 140.04 403.262 cv
139.29 402.511 138.273 402.09 137.212 402.09 cv
136.151 402.09 135.134 402.511 134.384 403.262 cv
133.633 404.012 133.212 405.029 133.212 406.09 cv
133.212 407.151 133.633 408.168 134.384 408.918 cv
135.134 409.669 136.151 410.09 137.212 410.09 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
121.196 406.46 mo
129.696 406.46 li
129.696 397.96 li
121.196 397.96 li
cp
clp
125.446 406.21 mo
126.507 406.21 127.524 405.789 128.274 405.038 cv
129.025 404.288 129.446 403.271 129.446 402.21 cv
129.446 401.149 129.025 400.132 128.274 399.382 cv
127.524 398.631 126.507 398.21 125.446 398.21 cv
124.385 398.21 123.368 398.631 122.618 399.382 cv
121.867 400.132 121.446 401.149 121.446 402.21 cv
121.446 403.271 121.867 404.288 122.618 405.038 cv
123.368 405.789 124.385 406.21 125.446 406.21 cv
cp
f
.5 lw
0 lc
125.446 406.21 mo
126.507 406.21 127.524 405.789 128.274 405.038 cv
129.025 404.288 129.446 403.271 129.446 402.21 cv
129.446 401.149 129.025 400.132 128.274 399.382 cv
127.524 398.631 126.507 398.21 125.446 398.21 cv
124.385 398.21 123.368 398.631 122.618 399.382 cv
121.867 400.132 121.446 401.149 121.446 402.21 cv
121.446 403.271 121.867 404.288 122.618 405.038 cv
123.368 405.789 124.385 406.21 125.446 406.21 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
109.429 391.536 mo
117.929 391.536 li
117.929 383.036 li
109.429 383.036 li
cp
clp
113.679 391.286 mo
114.74 391.286 115.757 390.865 116.507 390.114 cv
117.258 389.364 117.679 388.347 117.679 387.286 cv
117.679 386.225 117.258 385.208 116.507 384.458 cv
115.757 383.707 114.74 383.286 113.679 383.286 cv
112.618 383.286 111.601 383.707 110.851 384.458 cv
110.1 385.208 109.679 386.225 109.679 387.286 cv
109.679 388.347 110.1 389.364 110.851 390.114 cv
111.601 390.865 112.618 391.286 113.679 391.286 cv
cp
f
.5 lw
0 lc
113.679 391.286 mo
114.74 391.286 115.757 390.865 116.507 390.114 cv
117.258 389.364 117.679 388.347 117.679 387.286 cv
117.679 386.225 117.258 385.208 116.507 384.458 cv
115.757 383.707 114.74 383.286 113.679 383.286 cv
112.618 383.286 111.601 383.707 110.851 384.458 cv
110.1 385.208 109.679 386.225 109.679 387.286 cv
109.679 388.347 110.1 389.364 110.851 390.114 cv
111.601 390.865 112.618 391.286 113.679 391.286 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
97.663 380.983 mo
106.163 380.983 li
106.163 372.483 li
97.663 372.483 li
cp
clp
101.913 380.733 mo
102.974 380.733 103.991 380.312 104.741 379.561 cv
105.492 378.811 105.913 377.794 105.913 376.733 cv
105.913 375.672 105.492 374.655 104.741 373.905 cv
103.991 373.154 102.974 372.733 101.913 372.733 cv
100.852 372.733 99.835 373.154 99.085 373.905 cv
98.334 374.655 97.913 375.672 97.913 376.733 cv
97.913 377.794 98.334 378.811 99.085 379.561 cv
99.835 380.312 100.852 380.733 101.913 380.733 cv
cp
f
.5 lw
0 lc
101.913 380.733 mo
102.974 380.733 103.991 380.312 104.741 379.561 cv
105.492 378.811 105.913 377.794 105.913 376.733 cv
105.913 375.672 105.492 374.655 104.741 373.905 cv
103.991 373.154 102.974 372.733 101.913 372.733 cv
100.852 372.733 99.835 373.154 99.085 373.905 cv
98.334 374.655 97.913 375.672 97.913 376.733 cv
97.913 377.794 98.334 378.811 99.085 379.561 cv
99.835 380.312 100.852 380.733 101.913 380.733 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
85.8965 364.789 mo
94.3965 364.789 li
94.3965 356.289 li
85.8965 356.289 li
cp
clp
90.1465 364.539 mo
91.2075 364.539 92.2245 364.118 92.9745 363.367 cv
93.7255 362.617 94.1465 361.6 94.1465 360.539 cv
94.1465 359.478 93.7255 358.461 92.9745 357.711 cv
92.2245 356.96 91.2075 356.539 90.1465 356.539 cv
89.0855 356.539 88.0685 356.96 87.3185 357.711 cv
86.5675 358.461 86.1465 359.478 86.1465 360.539 cv
86.1465 361.6 86.5675 362.617 87.3185 363.367 cv
88.0685 364.118 89.0855 364.539 90.1465 364.539 cv
cp
f
.5 lw
0 lc
90.1465 364.539 mo
91.2075 364.539 92.2245 364.118 92.9745 363.367 cv
93.7255 362.617 94.1465 361.6 94.1465 360.539 cv
94.1465 359.478 93.7255 358.461 92.9745 357.711 cv
92.2245 356.96 91.2075 356.539 90.1465 356.539 cv
89.0855 356.539 88.0685 356.96 87.3185 357.711 cv
86.5675 358.461 86.1465 359.478 86.1465 360.539 cv
86.1465 361.6 86.5675 362.617 87.3185 363.367 cv
88.0685 364.118 89.0855 364.539 90.1465 364.539 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
74.1301 335.189 mo
82.6301 335.189 li
82.6301 326.689 li
74.1301 326.689 li
cp
clp
78.3801 334.939 mo
79.4411 334.939 80.4581 334.518 81.2081 333.767 cv
81.9591 333.017 82.3801 332 82.3801 330.939 cv
82.3801 329.878 81.9591 328.861 81.2081 328.111 cv
80.4581 327.36 79.4411 326.939 78.3801 326.939 cv
77.3191 326.939 76.3021 327.36 75.5521 328.111 cv
74.8011 328.861 74.3801 329.878 74.3801 330.939 cv
74.3801 332 74.8011 333.017 75.5521 333.767 cv
76.3021 334.518 77.3191 334.939 78.3801 334.939 cv
cp
f
.5 lw
0 lc
78.3801 334.939 mo
79.4411 334.939 80.4581 334.518 81.2081 333.767 cv
81.9591 333.017 82.3801 332 82.3801 330.939 cv
82.3801 329.878 81.9591 328.861 81.2081 328.111 cv
80.4581 327.36 79.4411 326.939 78.3801 326.939 cv
77.3191 326.939 76.3021 327.36 75.5521 328.111 cv
74.8011 328.861 74.3801 329.878 74.3801 330.939 cv
74.3801 332 74.8011 333.017 75.5521 333.767 cv
76.3021 334.518 77.3191 334.939 78.3801 334.939 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
62.3637 295.226 mo
70.8637 295.226 li
70.8637 286.726 li
62.3637 286.726 li
cp
clp
66.6137 294.976 mo
67.6747 294.976 68.6917 294.555 69.4417 293.804 cv
70.1927 293.054 70.6137 292.037 70.6137 290.976 cv
70.6137 289.915 70.1927 288.898 69.4417 288.148 cv
68.6917 287.397 67.6747 286.976 66.6137 286.976 cv
65.5527 286.976 64.5357 287.397 63.7857 288.148 cv
63.0347 288.898 62.6137 289.915 62.6137 290.976 cv
62.6137 292.037 63.0347 293.054 63.7857 293.804 cv
64.5357 294.555 65.5527 294.976 66.6137 294.976 cv
cp
f
.5 lw
0 lc
66.6137 294.976 mo
67.6747 294.976 68.6917 294.555 69.4417 293.804 cv
70.1927 293.054 70.6137 292.037 70.6137 290.976 cv
70.6137 289.915 70.1927 288.898 69.4417 288.148 cv
68.6917 287.397 67.6747 286.976 66.6137 286.976 cv
65.5527 286.976 64.5357 287.397 63.7857 288.148 cv
63.0347 288.898 62.6137 289.915 62.6137 290.976 cv
62.6137 292.037 63.0347 293.054 63.7857 293.804 cv
64.5357 294.555 65.5527 294.976 66.6137 294.976 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
56.4805 258.993 mo
64.9805 258.993 li
64.9805 250.493 li
56.4805 250.493 li
cp
clp
60.7305 258.743 mo
61.7915 258.743 62.8085 258.322 63.5585 257.571 cv
64.3095 256.821 64.7305 255.804 64.7305 254.743 cv
64.7305 253.682 64.3095 252.665 63.5585 251.915 cv
62.8085 251.164 61.7915 250.743 60.7305 250.743 cv
59.6695 250.743 58.6525 251.164 57.9025 251.915 cv
57.1515 252.665 56.7305 253.682 56.7305 254.743 cv
56.7305 255.804 57.1515 256.821 57.9025 257.571 cv
58.6525 258.322 59.6695 258.743 60.7305 258.743 cv
cp
f
.5 lw
0 lc
60.7305 258.743 mo
61.7915 258.743 62.8085 258.322 63.5585 257.571 cv
64.3095 256.821 64.7305 255.804 64.7305 254.743 cv
64.7305 253.682 64.3095 252.665 63.5585 251.915 cv
62.8085 251.164 61.7915 250.743 60.7305 250.743 cv
59.6695 250.743 58.6525 251.164 57.9025 251.915 cv
57.1515 252.665 56.7305 253.682 56.7305 254.743 cv
56.7305 255.804 57.1515 256.821 57.9025 257.571 cv
58.6525 258.322 59.6695 258.743 60.7305 258.743 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
50.5973 182.427 mo
59.0973 182.427 li
59.0973 173.927 li
50.5973 173.927 li
cp
clp
54.8473 182.177 mo
55.9083 182.177 56.9253 181.756 57.6753 181.005 cv
58.4263 180.255 58.8473 179.238 58.8473 178.177 cv
58.8473 177.116 58.4263 176.099 57.6753 175.349 cv
56.9253 174.598 55.9083 174.177 54.8473 174.177 cv
53.7863 174.177 52.7693 174.598 52.0193 175.349 cv
51.2683 176.099 50.8473 177.116 50.8473 178.177 cv
50.8473 179.238 51.2683 180.255 52.0193 181.005 cv
52.7693 181.756 53.7863 182.177 54.8473 182.177 cv
cp
f
.5 lw
0 lc
54.8473 182.177 mo
55.9083 182.177 56.9253 181.756 57.6753 181.005 cv
58.4263 180.255 58.8473 179.238 58.8473 178.177 cv
58.8473 177.116 58.4263 176.099 57.6753 175.349 cv
56.9253 174.598 55.9083 174.177 54.8473 174.177 cv
53.7863 174.177 52.7693 174.598 52.0193 175.349 cv
51.2683 176.099 50.8473 177.116 50.8473 178.177 cv
50.8473 179.238 51.2683 180.255 52.0193 181.005 cv
52.7693 181.756 53.7863 182.177 54.8473 182.177 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
44.7141 103.117 mo
53.2141 103.117 li
53.2141 94.6165 li
44.7141 94.6165 li
cp
clp
48.9641 102.867 mo
50.0251 102.867 51.0421 102.446 51.7921 101.695 cv
52.5431 100.945 52.9641 99.9275 52.9641 98.8665 cv
52.9641 97.8055 52.5431 96.7885 51.7921 96.0385 cv
51.0421 95.2875 50.0251 94.8665 48.9641 94.8665 cv
47.9031 94.8665 46.8861 95.2875 46.1361 96.0385 cv
45.3851 96.7885 44.9641 97.8055 44.9641 98.8665 cv
44.9641 99.9275 45.3851 100.945 46.1361 101.695 cv
46.8861 102.446 47.9031 102.867 48.9641 102.867 cv
cp
f
.5 lw
0 lc
48.9641 102.867 mo
50.0251 102.867 51.0421 102.446 51.7921 101.695 cv
52.5431 100.945 52.9641 99.9275 52.9641 98.8665 cv
52.9641 97.8055 52.5431 96.7885 51.7921 96.0385 cv
51.0421 95.2875 50.0251 94.8665 48.9641 94.8665 cv
47.9031 94.8665 46.8861 95.2875 46.1361 96.0385 cv
45.3851 96.7885 44.9641 97.8055 44.9641 98.8665 cv
44.9641 99.9275 45.3851 100.945 46.1361 101.695 cv
46.8861 102.446 47.9031 102.867 48.9641 102.867 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
38.8309 36.8697 mo
47.3309 36.8697 li
47.3309 28.3697 li
38.8309 28.3697 li
cp
clp
43.0809 36.6197 mo
44.1419 36.6197 45.1589 36.1987 45.9089 35.4477 cv
46.6599 34.6977 47.0809 33.6807 47.0809 32.6197 cv
47.0809 31.5587 46.6599 30.5417 45.9089 29.7917 cv
45.1589 29.0407 44.1419 28.6197 43.0809 28.6197 cv
42.0199 28.6197 41.0029 29.0407 40.2529 29.7917 cv
39.5019 30.5417 39.0809 31.5587 39.0809 32.6197 cv
39.0809 33.6807 39.5019 34.6977 40.2529 35.4477 cv
41.0029 36.1987 42.0199 36.6197 43.0809 36.6197 cv
cp
f
.5 lw
0 lc
43.0809 36.6197 mo
44.1419 36.6197 45.1589 36.1987 45.9089 35.4477 cv
46.6599 34.6977 47.0809 33.6807 47.0809 32.6197 cv
47.0809 31.5587 46.6599 30.5417 45.9089 29.7917 cv
45.1589 29.0407 44.1419 28.6197 43.0809 28.6197 cv
42.0199 28.6197 41.0029 29.0407 40.2529 29.7917 cv
39.5019 30.5417 39.0809 31.5587 39.0809 32.6197 cv
39.0809 33.6807 39.5019 34.6977 40.2529 35.4477 cv
41.0029 36.1987 42.0199 36.6197 43.0809 36.6197 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
0 lc
[6 6 ] 0 dsh
-1 430.237 mo
577 430.237 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
537.27 460.196 mo
419.606 466.836 li
349.007 467.569 li
301.942 465.771 li
278.409 466.972 li
254.876 467.652 li
231.343 469.418 li
219.577 467.956 li
207.81 468.639 li
196.044 467.287 li
184.278 466.647 li
172.511 466.801 li
160.745 466.586 li
148.978 464.314 li
137.212 461.897 li
125.445 462.915 li
113.679 457.708 li
101.913 454.198 li
90.1464 449.055 li
78.3804 438.751 li
66.6134 425.262 li
60.7304 410.913 li
54.8474 382.389 li
48.9644 352.477 li
43.0804 331.445 li
.115846 1 1 .0613413 cmyk
@
gsave
533.02 464.446 mo
541.52 464.446 li
541.52 455.946 li
533.02 455.946 li
cp
clp
533.27 464.196 mo
541.27 464.196 li
541.27 456.196 li
533.27 456.196 li
cp
f
.5 lw
0 lc
0 lj
533.27 464.196 mo
541.27 464.196 li
541.27 456.196 li
533.27 456.196 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
415.356 471.086 mo
423.856 471.086 li
423.856 462.586 li
415.356 462.586 li
cp
clp
415.606 470.836 mo
423.606 470.836 li
423.606 462.836 li
415.606 462.836 li
cp
f
.5 lw
0 lc
0 lj
415.606 470.836 mo
423.606 470.836 li
423.606 462.836 li
415.606 462.836 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
344.758 471.819 mo
353.258 471.819 li
353.258 463.319 li
344.758 463.319 li
cp
clp
345.008 471.569 mo
353.008 471.569 li
353.008 463.569 li
345.008 463.569 li
cp
f
.5 lw
0 lc
0 lj
345.008 471.569 mo
353.008 471.569 li
353.008 463.569 li
345.008 463.569 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
297.692 470.021 mo
306.192 470.021 li
306.192 461.521 li
297.692 461.521 li
cp
clp
297.942 469.771 mo
305.942 469.771 li
305.942 461.771 li
297.942 461.771 li
cp
f
.5 lw
0 lc
0 lj
297.942 469.771 mo
305.942 469.771 li
305.942 461.771 li
297.942 461.771 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
274.159 471.221 mo
282.659 471.221 li
282.659 462.721 li
274.159 462.721 li
cp
clp
274.409 470.971 mo
282.409 470.971 li
282.409 462.971 li
274.409 462.971 li
cp
f
.5 lw
0 lc
0 lj
274.409 470.971 mo
282.409 470.971 li
282.409 462.971 li
274.409 462.971 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
250.626 471.902 mo
259.126 471.902 li
259.126 463.402 li
250.626 463.402 li
cp
clp
250.876 471.652 mo
258.876 471.652 li
258.876 463.652 li
250.876 463.652 li
cp
f
.5 lw
0 lc
0 lj
250.876 471.652 mo
258.876 471.652 li
258.876 463.652 li
250.876 463.652 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
227.094 473.668 mo
235.594 473.668 li
235.594 465.168 li
227.094 465.168 li
cp
clp
227.344 473.418 mo
235.344 473.418 li
235.344 465.418 li
227.344 465.418 li
cp
f
.5 lw
0 lc
0 lj
227.344 473.418 mo
235.344 473.418 li
235.344 465.418 li
227.344 465.418 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
215.327 472.206 mo
223.827 472.206 li
223.827 463.706 li
215.327 463.706 li
cp
clp
215.577 471.956 mo
223.577 471.956 li
223.577 463.956 li
215.577 463.956 li
cp
f
.5 lw
0 lc
0 lj
215.577 471.956 mo
223.577 471.956 li
223.577 463.956 li
215.577 463.956 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
203.561 472.889 mo
212.061 472.889 li
212.061 464.389 li
203.561 464.389 li
cp
clp
203.811 472.639 mo
211.811 472.639 li
211.811 464.639 li
203.811 464.639 li
cp
f
.5 lw
0 lc
0 lj
203.811 472.639 mo
211.811 472.639 li
211.811 464.639 li
203.811 464.639 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
191.794 471.537 mo
200.294 471.537 li
200.294 463.037 li
191.794 463.037 li
cp
clp
192.044 471.287 mo
200.044 471.287 li
200.044 463.287 li
192.044 463.287 li
cp
f
.5 lw
0 lc
0 lj
192.044 471.287 mo
200.044 471.287 li
200.044 463.287 li
192.044 463.287 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
180.028 470.896 mo
188.528 470.896 li
188.528 462.396 li
180.028 462.396 li
cp
clp
180.278 470.646 mo
188.278 470.646 li
188.278 462.646 li
180.278 462.646 li
cp
f
.5 lw
0 lc
0 lj
180.278 470.646 mo
188.278 470.646 li
188.278 462.646 li
180.278 462.646 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
168.261 471.051 mo
176.761 471.051 li
176.761 462.551 li
168.261 462.551 li
cp
clp
168.511 470.801 mo
176.511 470.801 li
176.511 462.801 li
168.511 462.801 li
cp
f
.5 lw
0 lc
0 lj
168.511 470.801 mo
176.511 470.801 li
176.511 462.801 li
168.511 462.801 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
156.495 470.836 mo
164.995 470.836 li
164.995 462.336 li
156.495 462.336 li
cp
clp
156.745 470.586 mo
164.745 470.586 li
164.745 462.586 li
156.745 462.586 li
cp
f
.5 lw
0 lc
0 lj
156.745 470.586 mo
164.745 470.586 li
164.745 462.586 li
156.745 462.586 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
144.729 468.564 mo
153.229 468.564 li
153.229 460.064 li
144.729 460.064 li
cp
clp
144.979 468.314 mo
152.979 468.314 li
152.979 460.314 li
144.979 460.314 li
cp
f
.5 lw
0 lc
0 lj
144.979 468.314 mo
152.979 468.314 li
152.979 460.314 li
144.979 460.314 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
132.962 466.147 mo
141.462 466.147 li
141.462 457.647 li
132.962 457.647 li
cp
clp
133.212 465.897 mo
141.212 465.897 li
141.212 457.897 li
133.212 457.897 li
cp
f
.5 lw
0 lc
0 lj
133.212 465.897 mo
141.212 465.897 li
141.212 457.897 li
133.212 457.897 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
121.196 467.165 mo
129.696 467.165 li
129.696 458.665 li
121.196 458.665 li
cp
clp
121.446 466.915 mo
129.446 466.915 li
129.446 458.915 li
121.446 458.915 li
cp
f
.5 lw
0 lc
0 lj
121.446 466.915 mo
129.446 466.915 li
129.446 458.915 li
121.446 458.915 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
109.429 461.958 mo
117.929 461.958 li
117.929 453.458 li
109.429 453.458 li
cp
clp
109.679 461.708 mo
117.679 461.708 li
117.679 453.708 li
109.679 453.708 li
cp
f
.5 lw
0 lc
0 lj
109.679 461.708 mo
117.679 461.708 li
117.679 453.708 li
109.679 453.708 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
97.663 458.448 mo
106.163 458.448 li
106.163 449.948 li
97.663 449.948 li
cp
clp
97.913 458.198 mo
105.913 458.198 li
105.913 450.198 li
97.913 450.198 li
cp
f
.5 lw
0 lc
0 lj
97.913 458.198 mo
105.913 458.198 li
105.913 450.198 li
97.913 450.198 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
85.8965 453.305 mo
94.3965 453.305 li
94.3965 444.805 li
85.8965 444.805 li
cp
clp
86.1465 453.055 mo
94.1465 453.055 li
94.1465 445.055 li
86.1465 445.055 li
cp
f
.5 lw
0 lc
0 lj
86.1465 453.055 mo
94.1465 453.055 li
94.1465 445.055 li
86.1465 445.055 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
74.1301 443.001 mo
82.6301 443.001 li
82.6301 434.501 li
74.1301 434.501 li
cp
clp
74.3801 442.751 mo
82.3801 442.751 li
82.3801 434.751 li
74.3801 434.751 li
cp
f
.5 lw
0 lc
0 lj
74.3801 442.751 mo
82.3801 442.751 li
82.3801 434.751 li
74.3801 434.751 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
62.3637 429.512 mo
70.8637 429.512 li
70.8637 421.012 li
62.3637 421.012 li
cp
clp
62.6137 429.262 mo
70.6137 429.262 li
70.6137 421.262 li
62.6137 421.262 li
cp
f
.5 lw
0 lc
0 lj
62.6137 429.262 mo
70.6137 429.262 li
70.6137 421.262 li
62.6137 421.262 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
56.4805 415.163 mo
64.9805 415.163 li
64.9805 406.663 li
56.4805 406.663 li
cp
clp
56.7305 414.913 mo
64.7305 414.913 li
64.7305 406.913 li
56.7305 406.913 li
cp
f
.5 lw
0 lc
0 lj
56.7305 414.913 mo
64.7305 414.913 li
64.7305 406.913 li
56.7305 406.913 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
50.5973 386.639 mo
59.0973 386.639 li
59.0973 378.139 li
50.5973 378.139 li
cp
clp
50.8473 386.389 mo
58.8473 386.389 li
58.8473 378.389 li
50.8473 378.389 li
cp
f
.5 lw
0 lc
0 lj
50.8473 386.389 mo
58.8473 386.389 li
58.8473 378.389 li
50.8473 378.389 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
44.7141 356.727 mo
53.2141 356.727 li
53.2141 348.227 li
44.7141 348.227 li
cp
clp
44.9641 356.477 mo
52.9641 356.477 li
52.9641 348.477 li
44.9641 348.477 li
cp
f
.5 lw
0 lc
0 lj
44.9641 356.477 mo
52.9641 356.477 li
52.9641 348.477 li
44.9641 348.477 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
38.8309 335.695 mo
47.3309 335.695 li
47.3309 327.195 li
38.8309 327.195 li
cp
clp
39.0809 335.445 mo
47.0809 335.445 li
47.0809 327.445 li
39.0809 327.445 li
cp
f
.5 lw
0 lc
0 lj
39.0809 335.445 mo
47.0809 335.445 li
47.0809 327.445 li
39.0809 327.445 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
1 lw
0 lj
25.4312 19.8 mo
560.803 19.8 li
1 /0 /CSD get_res sepcs
1 sep
@
560.803 512.325 mo
560.803 19.8 li
@
25.4312 512.325 mo
560.803 512.325 li
@
25.4312 512.325 mo
25.4312 19.8 li
@
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
.5 lw
0 lc
1 lj
[1 3 ] 0 dsh
78.3801 512.325 mo
78.3801 19.8 li
@
grestore
78.3801 512.325 mo
78.3801 508.325 li
f
.5 lw
0 lc
1 lj
78.3801 512.325 mo
78.3801 508.325 li
@
78.3801 19.8 mo
78.3801 23.8 li
f
78.3801 19.8 mo
78.3801 23.8 li
@
57.188 529.868 mo
60.408 529.868 li
60.408 518.748 li
56.908 519.448 li
56.908 517.648 li
60.388 516.948 li
62.368 516.948 li
62.368 529.868 li
65.588 529.868 li
65.588 531.528 li
57.188 531.528 li
57.188 529.868 li
f
73.788 518.248 mo
72.768 518.248 72.008 518.748 71.488 519.748 cv
70.968 520.748 70.728 522.248 70.728 524.248 cv
70.728 526.248 70.968 527.748 71.488 528.748 cv
72.008 529.748 72.768 530.248 73.788 530.248 cv
74.808 530.248 75.568 529.748 76.088 528.748 cv
76.588 527.748 76.848 526.248 76.848 524.248 cv
76.848 522.248 76.588 520.748 76.088 519.748 cv
75.568 518.748 74.808 518.248 73.788 518.248 cv
73.788 516.688 mo
75.408 516.688 76.648 517.348 77.528 518.628 cv
78.388 519.928 78.828 521.808 78.828 524.248 cv
78.828 526.708 78.388 528.588 77.528 529.868 cv
76.648 531.148 75.408 531.788 73.788 531.788 cv
72.148 531.788 70.888 531.148 70.028 529.868 cv
69.168 528.588 68.748 526.708 68.748 524.248 cv
68.748 521.808 69.168 519.928 70.028 518.628 cv
70.888 517.348 72.148 516.688 73.788 516.688 cv
f
82.3081 516.948 mo
90.0481 516.948 li
90.0481 518.608 li
84.1081 518.608 li
84.1081 522.188 li
84.3881 522.088 84.6881 522.008 84.9681 521.968 cv
85.2481 521.928 85.5481 521.888 85.8281 521.888 cv
87.4481 521.888 88.7281 522.348 89.6881 523.228 cv
90.6481 524.128 91.1281 525.328 91.1281 526.848 cv
91.1281 528.428 90.6281 529.648 89.6481 530.508 cv
88.6681 531.368 87.2881 531.788 85.5281 531.788 cv
84.9081 531.788 84.2881 531.728 83.6481 531.648 cv
83.0081 531.548 82.3681 531.408 81.6881 531.188 cv
81.6881 529.208 li
82.2681 529.528 82.8681 529.768 83.5081 529.928 cv
84.1281 530.088 84.7881 530.148 85.4881 530.148 cv
86.6081 530.148 87.5081 529.868 88.1681 529.268 cv
88.8081 528.668 89.1481 527.868 89.1481 526.848 cv
89.1481 525.848 88.8081 525.048 88.1681 524.448 cv
87.5081 523.848 86.6081 523.548 85.4881 523.548 cv
84.9681 523.548 84.4281 523.608 83.9081 523.728 cv
83.3881 523.848 82.8481 524.028 82.3081 524.268 cv
82.3081 516.948 li
f
99.2281 518.248 mo
98.2081 518.248 97.4481 518.748 96.9281 519.748 cv
96.4081 520.748 96.1681 522.248 96.1681 524.248 cv
96.1681 526.248 96.4081 527.748 96.9281 528.748 cv
97.4481 529.748 98.2081 530.248 99.2281 530.248 cv
100.248 530.248 101.008 529.748 101.528 528.748 cv
102.028 527.748 102.288 526.248 102.288 524.248 cv
102.288 522.248 102.028 520.748 101.528 519.748 cv
101.008 518.748 100.248 518.248 99.2281 518.248 cv
99.2281 516.688 mo
100.848 516.688 102.088 517.348 102.968 518.628 cv
103.828 519.928 104.268 521.808 104.268 524.248 cv
104.268 526.708 103.828 528.588 102.968 529.868 cv
102.088 531.148 100.848 531.788 99.2281 531.788 cv
97.5881 531.788 96.3281 531.148 95.4681 529.868 cv
94.6081 528.588 94.1881 526.708 94.1881 524.248 cv
94.1881 521.808 94.6081 519.928 95.4681 518.628 cv
96.3281 517.348 97.5881 516.688 99.2281 516.688 cv
f
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
[1 3 ] 0 dsh
196.044 512.325 mo
196.044 19.8 li
@
grestore
196.044 512.325 mo
196.044 508.325 li
f
196.044 512.325 mo
196.044 508.325 li
@
196.044 19.8 mo
196.044 23.8 li
f
196.044 19.8 mo
196.044 23.8 li
@
174.852 529.868 mo
178.072 529.868 li
178.072 518.748 li
174.572 519.448 li
174.572 517.648 li
178.052 516.948 li
180.032 516.948 li
180.032 529.868 li
183.252 529.868 li
183.252 531.528 li
174.852 531.528 li
174.852 529.868 li
f
187.252 516.948 mo
194.992 516.948 li
194.992 518.608 li
189.052 518.608 li
189.052 522.188 li
189.332 522.088 189.632 522.008 189.912 521.968 cv
190.192 521.928 190.492 521.888 190.772 521.888 cv
192.392 521.888 193.672 522.348 194.632 523.228 cv
195.592 524.128 196.072 525.328 196.072 526.848 cv
196.072 528.428 195.572 529.648 194.592 530.508 cv
193.612 531.368 192.232 531.788 190.472 531.788 cv
189.852 531.788 189.232 531.728 188.592 531.648 cv
187.952 531.548 187.312 531.408 186.632 531.188 cv
186.632 529.208 li
187.212 529.528 187.812 529.768 188.452 529.928 cv
189.072 530.088 189.732 530.148 190.432 530.148 cv
191.552 530.148 192.452 529.868 193.112 529.268 cv
193.752 528.668 194.092 527.868 194.092 526.848 cv
194.092 525.848 193.752 525.048 193.112 524.448 cv
192.452 523.848 191.552 523.548 190.432 523.548 cv
189.912 523.548 189.372 523.608 188.852 523.728 cv
188.332 523.848 187.792 524.028 187.252 524.268 cv
187.252 516.948 li
f
199.972 516.948 mo
207.712 516.948 li
207.712 518.608 li
201.772 518.608 li
201.772 522.188 li
202.052 522.088 202.352 522.008 202.632 521.968 cv
202.912 521.928 203.212 521.888 203.492 521.888 cv
205.112 521.888 206.392 522.348 207.352 523.228 cv
208.312 524.128 208.792 525.328 208.792 526.848 cv
208.792 528.428 208.292 529.648 207.312 530.508 cv
206.332 531.368 204.952 531.788 203.192 531.788 cv
202.572 531.788 201.952 531.728 201.312 531.648 cv
200.672 531.548 200.032 531.408 199.352 531.188 cv
199.352 529.208 li
199.932 529.528 200.532 529.768 201.172 529.928 cv
201.792 530.088 202.452 530.148 203.152 530.148 cv
204.272 530.148 205.172 529.868 205.832 529.268 cv
206.472 528.668 206.812 527.868 206.812 526.848 cv
206.812 525.848 206.472 525.048 205.832 524.448 cv
205.172 523.848 204.272 523.548 203.152 523.548 cv
202.632 523.548 202.092 523.608 201.572 523.728 cv
201.052 523.848 200.512 524.028 199.972 524.268 cv
199.972 516.948 li
f
216.892 518.248 mo
215.872 518.248 215.112 518.748 214.592 519.748 cv
214.072 520.748 213.832 522.248 213.832 524.248 cv
213.832 526.248 214.072 527.748 214.592 528.748 cv
215.112 529.748 215.872 530.248 216.892 530.248 cv
217.912 530.248 218.672 529.748 219.192 528.748 cv
219.692 527.748 219.952 526.248 219.952 524.248 cv
219.952 522.248 219.692 520.748 219.192 519.748 cv
218.672 518.748 217.912 518.248 216.892 518.248 cv
216.892 516.688 mo
218.512 516.688 219.752 517.348 220.632 518.628 cv
221.492 519.928 221.932 521.808 221.932 524.248 cv
221.932 526.708 221.492 528.588 220.632 529.868 cv
219.752 531.148 218.512 531.788 216.892 531.788 cv
215.252 531.788 213.992 531.148 213.132 529.868 cv
212.272 528.588 211.852 526.708 211.852 524.248 cv
211.852 521.808 212.272 519.928 213.132 518.628 cv
213.992 517.348 215.252 516.688 216.892 516.688 cv
f
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
[1 3 ] 0 dsh
537.27 512.325 mo
537.27 19.8 li
@
grestore
537.27 512.325 mo
537.27 508.325 li
f
537.27 512.325 mo
537.27 508.325 li
@
537.27 19.8 mo
537.27 23.8 li
f
537.27 19.8 mo
537.27 23.8 li
@
521.383 523.668 mo
522.323 523.868 523.063 524.288 523.583 524.928 cv
524.103 525.568 524.383 526.368 524.383 527.288 cv
524.383 528.728 523.883 529.848 522.903 530.628 cv
521.903 531.408 520.503 531.788 518.683 531.788 cv
518.063 531.788 517.423 531.728 516.783 531.608 cv
516.143 531.508 515.463 531.328 514.783 531.088 cv
514.783 529.188 li
515.323 529.508 515.923 529.748 516.583 529.908 cv
517.223 530.068 517.903 530.148 518.623 530.148 cv
519.863 530.148 520.803 529.908 521.443 529.428 cv
522.083 528.948 522.423 528.228 522.423 527.288 cv
522.423 526.448 522.123 525.768 521.523 525.288 cv
520.923 524.808 520.083 524.548 519.003 524.548 cv
517.303 524.548 li
517.303 522.928 li
519.083 522.928 li
520.043 522.928 520.783 522.748 521.303 522.348 cv
521.823 521.968 522.083 521.408 522.083 520.668 cv
522.083 519.928 521.803 519.348 521.283 518.948 cv
520.743 518.548 519.983 518.348 519.003 518.348 cv
518.463 518.348 517.883 518.408 517.263 518.528 cv
516.643 518.648 515.963 518.828 515.223 519.068 cv
515.223 517.308 li
515.963 517.108 516.663 516.948 517.323 516.848 cv
517.963 516.748 518.583 516.688 519.183 516.688 cv
520.663 516.688 521.843 517.028 522.723 517.708 cv
523.603 518.388 524.043 519.308 524.043 520.468 cv
524.043 521.268 523.803 521.948 523.343 522.508 cv
522.883 523.068 522.223 523.468 521.383 523.668 cv
f
532.343 518.248 mo
531.323 518.248 530.563 518.748 530.043 519.748 cv
529.523 520.748 529.283 522.248 529.283 524.248 cv
529.283 526.248 529.523 527.748 530.043 528.748 cv
530.563 529.748 531.323 530.248 532.343 530.248 cv
533.363 530.248 534.123 529.748 534.643 528.748 cv
535.143 527.748 535.403 526.248 535.403 524.248 cv
535.403 522.248 535.143 520.748 534.643 519.748 cv
534.123 518.748 533.363 518.248 532.343 518.248 cv
532.343 516.688 mo
533.963 516.688 535.203 517.348 536.083 518.628 cv
536.943 519.928 537.383 521.808 537.383 524.248 cv
537.383 526.708 536.943 528.588 536.083 529.868 cv
535.203 531.148 533.963 531.788 532.343 531.788 cv
530.703 531.788 529.443 531.148 528.583 529.868 cv
527.723 528.588 527.303 526.708 527.303 524.248 cv
527.303 521.808 527.723 519.928 528.583 518.628 cv
529.443 517.348 530.703 516.688 532.343 516.688 cv
f
545.063 518.248 mo
544.043 518.248 543.283 518.748 542.763 519.748 cv
542.243 520.748 542.003 522.248 542.003 524.248 cv
542.003 526.248 542.243 527.748 542.763 528.748 cv
543.283 529.748 544.043 530.248 545.063 530.248 cv
546.083 530.248 546.843 529.748 547.363 528.748 cv
547.863 527.748 548.123 526.248 548.123 524.248 cv
548.123 522.248 547.863 520.748 547.363 519.748 cv
546.843 518.748 546.083 518.248 545.063 518.248 cv
545.063 516.688 mo
546.683 516.688 547.923 517.348 548.803 518.628 cv
549.663 519.928 550.103 521.808 550.103 524.248 cv
550.103 526.708 549.663 528.588 548.803 529.868 cv
547.923 531.148 546.683 531.788 545.063 531.788 cv
543.423 531.788 542.163 531.148 541.303 529.868 cv
540.443 528.588 540.023 526.708 540.023 524.248 cv
540.023 521.808 540.443 519.928 541.303 518.628 cv
542.163 517.348 543.423 516.688 545.063 516.688 cv
f
557.783 518.248 mo
556.763 518.248 556.003 518.748 555.483 519.748 cv
554.963 520.748 554.723 522.248 554.723 524.248 cv
554.723 526.248 554.963 527.748 555.483 528.748 cv
556.003 529.748 556.763 530.248 557.783 530.248 cv
558.803 530.248 559.563 529.748 560.083 528.748 cv
560.583 527.748 560.843 526.248 560.843 524.248 cv
560.843 522.248 560.583 520.748 560.083 519.748 cv
559.563 518.748 558.803 518.248 557.783 518.248 cv
557.783 516.688 mo
559.403 516.688 560.643 517.348 561.523 518.628 cv
562.383 519.928 562.823 521.808 562.823 524.248 cv
562.823 526.708 562.383 528.588 561.523 529.868 cv
560.643 531.148 559.403 531.788 557.783 531.788 cv
556.143 531.788 554.883 531.148 554.023 529.868 cv
553.163 528.588 552.743 526.708 552.743 524.248 cv
552.743 521.808 553.163 519.928 554.023 518.628 cv
554.883 517.348 556.143 516.688 557.783 516.688 cv
f
268.13 556.898 mo
268.174 556.7 li
268.262 556.502 li
268.438 556.414 li
269.692 556.414 270.528 556.392 270.946 556.304 cv
271.342 556.216 271.562 555.996 271.65 555.666 cv
274.664 543.588 li
274.708 543.412 274.752 543.258 274.752 543.104 cv
274.752 542.994 274.488 542.928 273.982 542.928 cv
272.706 542.928 li
271.716 542.928 270.946 543.082 270.418 543.39 cv
269.89 543.698 269.494 544.094 269.252 544.578 cv
268.988 545.062 268.68 545.876 268.284 546.998 cv
268.24 547.13 268.152 547.196 268.064 547.196 cv
267.866 547.196 li
267.712 547.196 267.646 547.108 267.646 546.91 cv
269.208 542.356 li
269.23 542.224 269.296 542.158 269.428 542.158 cv
282.43 542.158 li
282.562 542.158 282.65 542.268 282.65 542.444 cv
281.924 546.998 li
281.836 547.13 li
281.704 547.196 li
281.506 547.196 li
281.352 547.196 281.286 547.108 281.286 546.91 cv
281.44 545.876 281.528 545.15 281.528 544.71 cv
281.528 544.204 281.418 543.808 281.198 543.544 cv
280.978 543.28 280.692 543.126 280.362 543.038 cv
280.01 542.972 279.57 542.928 279.02 542.928 cv
277.722 542.928 li
277.326 542.928 277.062 542.972 276.93 543.038 cv
276.798 543.126 276.666 543.324 276.578 543.676 cv
273.564 555.754 li
273.542 555.842 li
273.52 555.952 li
273.52 556.15 273.63 556.26 273.85 556.304 cv
274.224 556.392 275.038 556.414 276.292 556.414 cv
276.424 556.414 276.512 556.524 276.512 556.7 cv
276.446 556.92 276.402 557.052 276.38 557.096 cv
276.336 557.162 276.27 557.184 276.138 557.184 cv
268.35 557.184 li
268.196 557.184 268.13 557.096 268.13 556.898 cv
f
290.287 562.662 mo
290.287 540.684 li
293.301 540.684 li
293.301 541.564 li
291.167 541.564 li
291.167 561.782 li
293.301 561.782 li
293.301 562.662 li
290.287 562.662 li
f
294.819 557.184 mo
294.665 557.184 294.599 557.096 294.599 556.898 cv
294.643 556.7 li
294.731 556.502 li
294.885 556.414 li
295.765 556.414 296.403 556.37 296.755 556.26 cv
296.931 556.216 297.085 556.018 297.173 555.666 cv
300.187 543.588 li
300.209 543.456 300.231 543.346 300.231 543.28 cv
300.231 543.126 300.143 543.038 299.967 543.016 cv
299.681 542.972 299.153 542.928 298.383 542.928 cv
298.229 542.928 298.163 542.84 298.163 542.642 cv
298.207 542.466 298.251 542.334 298.295 542.268 cv
298.317 542.202 298.405 542.158 298.537 542.158 cv
304.455 542.158 li
304.587 542.158 304.675 542.268 304.675 542.444 cv
304.631 542.642 li
304.543 542.84 li
304.389 542.928 li
303.487 542.928 302.871 542.994 302.519 543.082 cv
302.321 543.17 302.189 543.368 302.101 543.676 cv
300.319 550.804 li
308.943 544.138 li
308.943 544.116 309.031 544.028 309.207 543.852 cv
309.383 543.676 309.471 543.522 309.471 543.346 cv
309.471 543.082 309.207 542.928 308.723 542.928 cv
308.569 542.928 308.503 542.84 308.503 542.642 cv
308.525 542.532 308.547 542.444 308.569 542.378 cv
308.657 542.224 li
308.877 542.158 li
313.145 542.158 li
313.299 542.246 li
313.365 542.444 li
313.321 542.642 li
313.211 542.862 li
313.057 542.928 li
311.979 542.928 310.813 543.434 309.537 544.424 cv
309.493 544.446 li
309.449 544.446 li
309.427 544.468 li
304.895 547.988 li
308.195 555.71 li
308.371 556.04 308.591 556.238 308.833 556.304 cv
309.053 556.392 309.405 556.414 309.889 556.414 cv
310.021 556.414 310.109 556.524 310.109 556.7 cv
310.065 556.876 310.021 557.008 309.977 557.074 cv
309.933 557.162 309.845 557.184 309.735 557.184 cv
304.631 557.184 li
304.499 557.184 304.433 557.096 304.433 556.898 cv
304.433 556.766 304.455 556.634 304.499 556.546 cv
304.521 556.458 304.587 556.414 304.719 556.414 cv
305.071 556.414 305.401 556.392 305.665 556.304 cv
305.929 556.238 306.061 556.062 306.061 555.776 cv
306.039 555.556 li
303.311 549.198 li
300.099 551.684 li
299.087 555.754 li
299.043 555.93 299.043 556.04 299.043 556.062 cv
299.043 556.216 299.131 556.304 299.307 556.326 cv
299.571 556.392 300.099 556.414 300.891 556.414 cv
301.023 556.414 301.111 556.524 301.111 556.7 cv
301.067 556.92 301.023 557.052 301.001 557.096 cv
300.957 557.162 300.869 557.184 300.737 557.184 cv
294.819 557.184 li
f
312.947 562.662 mo
312.947 561.782 li
315.081 561.782 li
315.081 541.564 li
312.947 541.564 li
312.947 540.684 li
315.961 540.684 li
315.961 562.662 li
312.947 562.662 li
f
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
[1 3 ] 0 dsh
25.4312 512.325 mo
560.803 512.325 li
@
grestore
25.4312 512.325 mo
29.4312 512.325 li
f
25.4312 512.325 mo
29.4312 512.325 li
@
560.803 512.325 mo
556.803 512.325 li
f
560.803 512.325 mo
556.803 512.325 li
@
17.713 504.568 mo
16.693 504.568 15.933 505.068 15.413 506.068 cv
14.893 507.068 14.653 508.568 14.653 510.568 cv
14.653 512.568 14.893 514.068 15.413 515.068 cv
15.933 516.068 16.693 516.568 17.713 516.568 cv
18.733 516.568 19.493 516.068 20.013 515.068 cv
20.513 514.068 20.773 512.568 20.773 510.568 cv
20.773 508.568 20.513 507.068 20.013 506.068 cv
19.493 505.068 18.733 504.568 17.713 504.568 cv
17.713 503.008 mo
19.333 503.008 20.573 503.668 21.453 504.948 cv
22.313 506.248 22.753 508.128 22.753 510.568 cv
22.753 513.028 22.313 514.908 21.453 516.188 cv
20.573 517.468 19.333 518.108 17.713 518.108 cv
16.073 518.108 14.813 517.468 13.953 516.188 cv
13.093 514.908 12.673 513.028 12.673 510.568 cv
12.673 508.128 13.093 506.248 13.953 504.948 cv
14.813 503.668 16.073 503.008 17.713 503.008 cv
f
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
[1 3 ] 0 dsh
25.4312 430.237 mo
560.803 430.237 li
@
grestore
25.4312 430.237 mo
29.4312 430.237 li
f
25.4312 430.237 mo
29.4312 430.237 li
@
560.803 430.237 mo
556.803 430.237 li
f
560.803 430.237 mo
556.803 430.237 li
@
15.239 434.101 mo
18.459 434.101 li
18.459 422.981 li
14.959 423.681 li
14.959 421.881 li
18.439 421.181 li
20.419 421.181 li
20.419 434.101 li
23.639 434.101 li
23.639 435.761 li
15.239 435.761 li
15.239 434.101 li
f
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
[1 3 ] 0 dsh
25.4312 348.15 mo
560.803 348.15 li
@
grestore
25.4312 348.15 mo
29.4312 348.15 li
f
25.4312 348.15 mo
29.4312 348.15 li
@
560.803 348.15 mo
556.803 348.15 li
f
560.803 348.15 mo
556.803 348.15 li
@
16.021 352.013 mo
22.901 352.013 li
22.901 353.673 li
13.641 353.673 li
13.641 352.013 li
14.381 351.253 15.401 350.213 16.701 348.893 cv
17.981 347.593 18.801 346.753 19.141 346.373 cv
19.781 345.673 20.221 345.073 20.461 344.573 cv
20.701 344.093 20.841 343.593 20.841 343.113 cv
20.841 342.353 20.561 341.713 20.021 341.233 cv
19.481 340.753 18.781 340.493 17.901 340.493 cv
17.281 340.493 16.621 340.613 15.941 340.813 cv
15.261 341.033 14.521 341.353 13.741 341.793 cv
13.741 339.793 li
14.541 339.473 15.281 339.233 15.961 339.073 cv
16.641 338.913 17.281 338.833 17.861 338.833 cv
19.361 338.833 20.561 339.213 21.461 339.973 cv
22.361 340.733 22.821 341.733 22.821 342.993 cv
22.821 343.593 22.701 344.173 22.481 344.693 cv
22.261 345.233 21.861 345.873 21.261 346.593 cv
21.101 346.793 20.581 347.333 19.701 348.233 cv
18.821 349.133 17.601 350.393 16.021 352.013 cv
f
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
[1 3 ] 0 dsh
25.4312 266.063 mo
560.803 266.063 li
@
grestore
25.4312 266.063 mo
29.4312 266.063 li
f
25.4312 266.063 mo
29.4312 266.063 li
@
560.803 266.063 mo
556.803 266.063 li
f
560.803 266.063 mo
556.803 266.063 li
@
19.958 263.726 mo
20.898 263.926 21.638 264.346 22.158 264.986 cv
22.678 265.626 22.958 266.426 22.958 267.346 cv
22.958 268.786 22.458 269.906 21.478 270.686 cv
20.478 271.466 19.078 271.846 17.258 271.846 cv
16.638 271.846 15.998 271.786 15.358 271.666 cv
14.718 271.566 14.038 271.386 13.358 271.146 cv
13.358 269.246 li
13.898 269.566 14.498 269.806 15.158 269.966 cv
15.798 270.126 16.478 270.206 17.198 270.206 cv
18.438 270.206 19.378 269.966 20.018 269.486 cv
20.658 269.006 20.998 268.286 20.998 267.346 cv
20.998 266.506 20.698 265.826 20.098 265.346 cv
19.498 264.866 18.658 264.606 17.578 264.606 cv
15.878 264.606 li
15.878 262.986 li
17.658 262.986 li
18.618 262.986 19.358 262.806 19.878 262.406 cv
20.398 262.026 20.658 261.466 20.658 260.726 cv
20.658 259.986 20.378 259.406 19.858 259.006 cv
19.318 258.606 18.558 258.406 17.578 258.406 cv
17.038 258.406 16.458 258.466 15.838 258.586 cv
15.218 258.706 14.538 258.886 13.798 259.126 cv
13.798 257.366 li
14.538 257.166 15.238 257.006 15.898 256.906 cv
16.538 256.806 17.158 256.746 17.758 256.746 cv
19.238 256.746 20.418 257.086 21.298 257.766 cv
22.178 258.446 22.618 259.366 22.618 260.526 cv
22.618 261.326 22.378 262.006 21.918 262.566 cv
21.458 263.126 20.798 263.526 19.958 263.726 cv
f
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
[1 3 ] 0 dsh
25.4312 183.975 mo
560.803 183.975 li
@
grestore
25.4312 183.975 mo
29.4312 183.975 li
f
25.4312 183.975 mo
29.4312 183.975 li
@
560.803 183.975 mo
556.803 183.975 li
f
560.803 183.975 mo
556.803 183.975 li
@
18.366 176.638 mo
13.386 184.418 li
18.366 184.418 li
18.366 176.638 li
17.846 174.918 mo
20.326 174.918 li
20.326 184.418 li
22.406 184.418 li
22.406 186.058 li
20.326 186.058 li
20.326 189.498 li
18.366 189.498 li
18.366 186.058 li
11.786 186.058 li
11.786 184.158 li
17.846 174.918 li
f
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
[1 3 ] 0 dsh
25.4312 101.888 mo
560.803 101.888 li
@
grestore
25.4312 101.888 mo
29.4312 101.888 li
f
25.4312 101.888 mo
29.4312 101.888 li
@
560.803 101.888 mo
556.803 101.888 li
f
560.803 101.888 mo
556.803 101.888 li
@
14.154 92.831 mo
21.894 92.831 li
21.894 94.491 li
15.954 94.491 li
15.954 98.071 li
16.234 97.971 16.534 97.891 16.814 97.851 cv
17.094 97.811 17.394 97.771 17.674 97.771 cv
19.294 97.771 20.574 98.231 21.534 99.111 cv
22.494 100.011 22.974 101.211 22.974 102.731 cv
22.974 104.311 22.474 105.531 21.494 106.391 cv
20.514 107.251 19.134 107.671 17.374 107.671 cv
16.754 107.671 16.134 107.611 15.494 107.531 cv
14.854 107.431 14.214 107.291 13.534 107.071 cv
13.534 105.091 li
14.114 105.411 14.714 105.651 15.354 105.811 cv
15.974 105.971 16.634 106.031 17.334 106.031 cv
18.454 106.031 19.354 105.751 20.014 105.151 cv
20.654 104.551 20.994 103.751 20.994 102.731 cv
20.994 101.731 20.654 100.931 20.014 100.331 cv
19.354 99.731 18.454 99.431 17.334 99.431 cv
16.814 99.431 16.274 99.491 15.754 99.611 cv
15.234 99.731 14.694 99.911 14.154 100.151 cv
14.154 92.831 li
f
gsave
25.431 512.325 mo
560.803 512.325 li
560.803 19.8 li
25.431 19.8 li
cp
clp
[1 3 ] 0 dsh
25.4312 19.8 mo
560.803 19.8 li
@
grestore
25.4312 19.8 mo
29.4312 19.8 li
f
25.4312 19.8 mo
29.4312 19.8 li
@
560.803 19.8 mo
556.803 19.8 li
f
560.803 19.8 mo
556.803 19.8 li
@
17.953 17.243 mo
17.073 17.243 16.373 17.563 15.853 18.163 cv
15.333 18.763 15.073 19.603 15.073 20.643 cv
15.073 21.703 15.333 22.543 15.853 23.143 cv
16.373 23.743 17.073 24.043 17.953 24.043 cv
18.833 24.043 19.533 23.743 20.053 23.143 cv
20.573 22.543 20.833 21.703 20.833 20.643 cv
20.833 19.603 20.573 18.763 20.053 18.163 cv
19.533 17.563 18.833 17.243 17.953 17.243 cv
21.873 11.063 mo
21.873 12.863 li
21.373 12.623 20.873 12.443 20.373 12.323 cv
19.853 12.203 19.353 12.143 18.873 12.143 cv
17.553 12.143 16.553 12.583 15.873 13.463 cv
15.193 14.343 14.793 15.683 14.713 17.443 cv
15.093 16.883 15.573 16.443 16.153 16.143 cv
16.733 15.843 17.373 15.683 18.073 15.683 cv
19.533 15.683 20.693 16.143 21.533 17.023 cv
22.373 17.903 22.813 19.123 22.813 20.643 cv
22.813 22.143 22.353 23.343 21.473 24.243 cv
20.593 25.143 19.413 25.583 17.953 25.583 cv
16.273 25.583 14.973 24.943 14.093 23.663 cv
13.193 22.383 12.753 20.503 12.753 18.043 cv
12.753 15.743 13.293 13.903 14.393 12.543 cv
15.473 11.183 16.953 10.483 18.793 10.483 cv
19.273 10.483 19.773 10.543 20.293 10.623 cv
20.793 10.723 21.313 10.863 21.873 11.063 cv
f
190.134 309.963 mo
190.134 309.913 190.134 309.838 190.184 309.738 cv
190.209 309.638 190.234 309.563 190.284 309.513 cv
190.334 309.463 190.384 309.413 190.484 309.413 cv
191.909 309.413 192.859 309.388 193.334 309.288 cv
193.784 309.188 194.034 308.938 194.134 308.563 cv
197.559 294.838 li
197.609 294.638 197.659 294.463 197.659 294.288 cv
197.659 294.163 197.359 294.088 196.784 294.088 cv
195.334 294.088 li
194.209 294.088 193.334 294.263 192.734 294.613 cv
192.134 294.963 191.684 295.413 191.409 295.963 cv
191.109 296.513 190.759 297.438 190.309 298.713 cv
190.259 298.863 190.159 298.938 190.059 298.938 cv
189.834 298.938 li
189.659 298.938 189.584 298.838 189.584 298.613 cv
191.359 293.438 li
191.384 293.288 191.459 293.213 191.609 293.213 cv
206.384 293.213 li
206.534 293.213 206.634 293.338 206.634 293.538 cv
205.809 298.713 li
205.709 298.863 li
205.559 298.938 li
205.334 298.938 li
205.159 298.938 205.084 298.838 205.084 298.613 cv
205.259 297.438 205.359 296.613 205.359 296.113 cv
205.359 295.538 205.234 295.088 204.984 294.788 cv
204.734 294.488 204.409 294.313 204.034 294.213 cv
203.634 294.138 203.134 294.088 202.509 294.088 cv
201.034 294.088 li
200.584 294.088 200.284 294.138 200.134 294.213 cv
199.984 294.313 199.834 294.538 199.734 294.938 cv
196.309 308.663 li
196.284 308.763 li
196.259 308.888 li
196.259 309.113 196.384 309.238 196.634 309.288 cv
197.059 309.388 197.984 309.413 199.409 309.413 cv
199.559 309.413 199.659 309.538 199.659 309.738 cv
199.584 309.988 199.534 310.138 199.509 310.188 cv
199.459 310.263 199.384 310.288 199.234 310.288 cv
190.384 310.288 li
190.209 310.288 190.134 310.188 190.134 309.963 cv
f
204.372 316.665 mo
204.249 316.665 204.197 316.595 204.197 316.438 cv
204.232 316.193 204.319 316.053 204.424 316.053 cv
204.879 316.053 205.281 315.965 205.632 315.773 cv
205.982 315.598 206.279 315.3 206.542 314.898 cv
206.576 314.863 li
212.824 304.328 li
212.911 304.205 213.016 304.135 213.156 304.135 cv
213.384 304.135 li
213.489 304.17 li
213.577 304.24 li
213.611 304.328 li
214.679 315.633 li
214.679 315.685 214.697 315.755 214.749 315.86 cv
214.854 316 215.292 316.053 216.061 316.053 cv
216.167 316.053 216.236 316.14 216.236 316.28 cv
216.202 316.438 216.167 316.543 216.132 316.595 cv
216.096 316.648 216.044 316.665 215.939 316.665 cv
211.564 316.665 li
211.459 316.665 211.406 316.595 211.406 316.438 cv
211.459 316.193 211.529 316.053 211.634 316.053 cv
212.544 316.053 213.034 315.895 213.104 315.58 cv
212.841 312.693 li
208.519 312.693 li
207.119 315.038 li
207.031 315.178 206.997 315.318 206.997 315.475 cv
206.997 315.685 207.084 315.842 207.294 315.93 cv
207.486 316.018 207.697 316.053 207.941 316.053 cv
208.046 316.053 208.117 316.14 208.117 316.28 cv
208.064 316.455 208.029 316.56 208.012 316.595 cv
207.977 316.648 207.924 316.665 207.819 316.665 cv
204.372 316.665 li
208.869 312.08 mo
212.771 312.08 li
212.247 306.41 li
208.869 312.08 li
f
76 273.023 mo
76 272.973 76 272.898 76.05 272.798 cv
76.075 272.698 76.1 272.623 76.15 272.573 cv
76.2 272.523 76.25 272.473 76.35 272.473 cv
77.775 272.473 78.725 272.448 79.2 272.348 cv
79.65 272.248 79.9 271.998 80 271.623 cv
83.425 257.898 li
83.475 257.698 83.525 257.523 83.525 257.348 cv
83.525 257.223 83.225 257.148 82.65 257.148 cv
81.2 257.148 li
80.075 257.148 79.2 257.323 78.6 257.673 cv
78 258.023 77.55 258.473 77.275 259.023 cv
76.975 259.573 76.625 260.498 76.175 261.773 cv
76.125 261.923 76.025 261.998 75.925 261.998 cv
75.7 261.998 li
75.525 261.998 75.45 261.898 75.45 261.673 cv
77.225 256.498 li
77.25 256.348 77.325 256.273 77.475 256.273 cv
92.25 256.273 li
92.4 256.273 92.5 256.398 92.5 256.598 cv
91.675 261.773 li
91.575 261.923 li
91.425 261.998 li
91.2 261.998 li
91.025 261.998 90.95 261.898 90.95 261.673 cv
91.125 260.498 91.225 259.673 91.225 259.173 cv
91.225 258.598 91.1 258.148 90.85 257.848 cv
90.6 257.548 90.275 257.373 89.9 257.273 cv
89.5 257.198 89 257.148 88.375 257.148 cv
86.9 257.148 li
86.45 257.148 86.15 257.198 86 257.273 cv
85.85 257.373 85.7 257.598 85.6 257.998 cv
82.175 271.723 li
82.15 271.823 li
82.125 271.948 li
82.125 272.173 82.25 272.298 82.5 272.348 cv
82.925 272.448 83.85 272.473 85.275 272.473 cv
85.425 272.473 85.525 272.598 85.525 272.798 cv
85.45 273.048 85.4 273.198 85.375 273.248 cv
85.325 273.323 85.25 273.348 85.1 273.348 cv
76.25 273.348 li
76.075 273.348 76 273.248 76 273.023 cv
f
90.3075 279.725 mo
90.185 279.725 90.1325 279.655 90.1325 279.498 cv
90.1675 279.34 li
90.2375 279.183 li
90.36 279.113 li
91.06 279.113 91.5675 279.078 91.8475 278.99 cv
91.9875 278.955 92.11 278.798 92.18 278.518 cv
94.5775 268.91 li
94.595 268.805 94.6125 268.718 94.6125 268.665 cv
94.6125 268.543 94.5425 268.473 94.4025 268.455 cv
94.175 268.42 93.755 268.385 93.1425 268.385 cv
93.02 268.385 92.9675 268.315 92.9675 268.158 cv
93.0025 268 li
93.0725 267.843 li
93.195 267.773 li
99.4775 267.773 li
100.283 267.773 101 267.983 101.613 268.368 cv
102.225 268.77 102.698 269.313 103.013 269.978 cv
103.328 270.643 103.503 271.378 103.503 272.183 cv
103.503 273.093 103.31 273.985 102.943 274.878 cv
102.575 275.77 102.05 276.593 101.385 277.328 cv
100.72 278.063 99.95 278.658 99.11 279.078 cv
98.2525 279.515 97.3775 279.725 96.485 279.725 cv
90.3075 279.725 li
93.58 278.973 mo
93.58 279.078 93.7725 279.113 94.175 279.113 cv
96.205 279.113 li
96.8525 279.113 97.4825 278.99 98.0775 278.71 cv
98.6725 278.448 99.215 278.08 99.705 277.608 cv
100.143 277.17 100.528 276.593 100.86 275.875 cv
101.193 275.175 101.455 274.423 101.648 273.653 cv
101.823 272.883 101.928 272.165 101.928 271.518 cv
101.928 271.045 101.858 270.625 101.718 270.24 cv
101.578 269.855 101.368 269.54 101.123 269.26 cv
100.878 268.98 100.563 268.77 100.178 268.613 cv
99.7925 268.473 99.355 268.385 98.8825 268.385 cv
96.9575 268.385 li
96.6425 268.385 96.4325 268.42 96.3275 268.473 cv
96.2225 268.525 96.1175 268.7 96.0475 268.98 cv
93.65 278.588 li
93.5975 278.728 93.58 278.868 93.58 278.973 cv
f
380.918 413.82 mo
533.918 413.82 li
533.918 299.82 li
380.918 299.82 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lj
380.918 413.82 mo
533.918 413.82 li
533.918 299.82 li
380.918 299.82 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2 lw
2 lc
1 lj
392.918 318.32 mo
434.918 318.32 li
1 .836759 .0303349 .00479133 cmyk
@
gsave
388.668 322.57 mo
397.168 322.57 li
397.168 314.07 li
388.668 314.07 li
cp
clp
392.918 322.32 mo
393.979 322.32 394.996 321.899 395.746 321.148 cv
396.497 320.398 396.918 319.381 396.918 318.32 cv
396.918 317.259 396.497 316.242 395.746 315.492 cv
394.996 314.741 393.979 314.32 392.918 314.32 cv
391.857 314.32 390.84 314.741 390.09 315.492 cv
389.339 316.242 388.918 317.259 388.918 318.32 cv
388.918 319.381 389.339 320.398 390.09 321.148 cv
390.84 321.899 391.857 322.32 392.918 322.32 cv
cp
f
.5 lw
0 lc
392.918 322.32 mo
393.979 322.32 394.996 321.899 395.746 321.148 cv
396.497 320.398 396.918 319.381 396.918 318.32 cv
396.918 317.259 396.497 316.242 395.746 315.492 cv
394.996 314.741 393.979 314.32 392.918 314.32 cv
391.857 314.32 390.84 314.741 390.09 315.492 cv
389.339 316.242 388.918 317.259 388.918 318.32 cv
388.918 319.381 389.339 320.398 390.09 321.148 cv
390.84 321.899 391.857 322.32 392.918 322.32 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
430.668 322.57 mo
439.168 322.57 li
439.168 314.07 li
430.668 314.07 li
cp
clp
434.918 322.32 mo
435.979 322.32 436.996 321.899 437.746 321.148 cv
438.497 320.398 438.918 319.381 438.918 318.32 cv
438.918 317.259 438.497 316.242 437.746 315.492 cv
436.996 314.741 435.979 314.32 434.918 314.32 cv
433.857 314.32 432.84 314.741 432.09 315.492 cv
431.339 316.242 430.918 317.259 430.918 318.32 cv
430.918 319.381 431.339 320.398 432.09 321.148 cv
432.84 321.899 433.857 322.32 434.918 322.32 cv
cp
f
.5 lw
0 lc
434.918 322.32 mo
435.979 322.32 436.996 321.899 437.746 321.148 cv
438.497 320.398 438.918 319.381 438.918 318.32 cv
438.918 317.259 438.497 316.242 437.746 315.492 cv
436.996 314.741 435.979 314.32 434.918 314.32 cv
433.857 314.32 432.84 314.741 432.09 315.492 cv
431.339 316.242 430.918 317.259 430.918 318.32 cv
430.918 319.381 431.339 320.398 432.09 321.148 cv
432.84 321.899 433.857 322.32 434.918 322.32 cv
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
471.194 311.561 mo
471.215 311.33 li
473.42 304.127 li
471.53 304.127 li
471.005 304.127 470.522 304.295 470.081 304.61 cv
469.64 304.946 469.283 305.345 468.989 305.828 cv
468.863 305.912 li
468.611 305.912 li
468.485 305.912 468.422 305.849 468.422 305.702 cv
468.464 305.576 li
468.926 304.82 469.409 304.169 469.934 303.623 cv
470.438 303.098 471.026 302.825 471.698 302.825 cv
478.145 302.825 li
478.292 302.825 478.418 302.888 478.523 302.972 cv
478.607 303.077 478.67 303.203 478.67 303.35 cv
478.67 303.56 478.586 303.749 478.439 303.896 cv
478.292 304.064 478.124 304.127 477.914 304.127 cv
474.113 304.127 li
472.706 311.372 li
472.643 311.603 472.538 311.792 472.391 311.918 cv
472.244 312.044 472.055 312.128 471.824 312.128 cv
471.635 312.128 471.488 312.065 471.362 311.96 cv
471.236 311.876 471.194 311.729 471.194 311.561 cv
1 /0 /CSD get_res sepcs
1 sep
f
477.845 317.233 mo
477.742 317.233 477.698 317.174 477.698 317.042 cv
477.727 316.924 li
477.771 316.777 li
477.889 316.719 li
478.815 316.719 479.359 316.424 479.521 315.822 cv
481.431 308.148 li
481.461 307.943 li
481.461 307.84 481.402 307.781 481.285 307.766 cv
481.093 307.737 480.741 307.707 480.226 307.707 cv
480.123 307.707 480.079 307.649 480.079 307.516 cv
480.108 307.384 li
480.167 307.252 li
480.27 307.193 li
482.857 307.193 li
482.96 307.193 483.019 307.252 483.048 307.355 cv
484.195 315.778 li
489.546 307.355 li
489.605 307.252 489.708 307.193 489.825 307.193 cv
492.324 307.193 li
492.412 307.193 492.471 307.266 492.471 307.384 cv
492.427 307.516 li
492.368 307.663 li
492.28 307.707 li
491.677 307.707 491.266 307.751 491.031 307.81 cv
490.898 307.854 490.81 307.987 490.751 308.207 cv
488.737 316.277 li
488.708 316.38 488.708 316.454 488.708 316.483 cv
488.723 316.586 li
488.767 316.63 li
488.884 316.66 li
489.061 316.704 489.414 316.719 489.943 316.719 cv
490.031 316.719 490.09 316.792 490.09 316.91 cv
490.046 317.057 490.016 317.145 490.002 317.174 cv
489.84 317.233 li
486.003 317.233 li
485.9 317.233 485.856 317.174 485.856 317.042 cv
485.886 316.91 li
485.944 316.777 li
486.047 316.719 li
486.635 316.719 487.062 316.689 487.297 316.616 cv
487.414 316.586 487.517 316.454 487.576 316.219 cv
489.693 307.707 li
483.754 317.071 li
483.695 317.189 483.592 317.233 483.46 317.233 cv
483.328 317.233 483.254 317.189 483.254 317.071 cv
482.005 307.825 li
479.991 315.881 li
479.961 315.983 li
479.947 316.101 li
479.947 316.366 480.05 316.527 480.27 316.601 cv
480.491 316.689 480.77 316.719 481.093 316.719 cv
481.182 316.719 481.24 316.792 481.24 316.91 cv
481.211 317.042 481.182 317.13 481.152 317.174 cv
480.991 317.233 li
477.845 317.233 li
f
473.194 335.349 mo
473.215 335.118 li
475.42 327.915 li
473.53 327.915 li
473.005 327.915 472.522 328.083 472.081 328.398 cv
471.64 328.734 471.283 329.133 470.989 329.616 cv
470.863 329.7 li
470.611 329.7 li
470.485 329.7 470.422 329.637 470.422 329.49 cv
470.464 329.364 li
470.926 328.608 471.409 327.957 471.934 327.411 cv
472.438 326.886 473.026 326.613 473.698 326.613 cv
480.145 326.613 li
480.292 326.613 480.418 326.676 480.523 326.76 cv
480.607 326.865 480.67 326.991 480.67 327.138 cv
480.67 327.348 480.586 327.537 480.439 327.684 cv
480.292 327.852 480.124 327.915 479.914 327.915 cv
476.113 327.915 li
474.706 335.16 li
474.643 335.391 474.538 335.58 474.391 335.706 cv
474.244 335.832 474.055 335.916 473.824 335.916 cv
473.635 335.916 473.488 335.853 473.362 335.748 cv
473.236 335.664 473.194 335.517 473.194 335.349 cv
f
479.742 339.83 mo
479.742 339.698 li
479.771 339.536 li
479.786 339.404 li
481.609 332.128 li
481.638 331.966 481.668 331.833 481.682 331.731 cv
481.682 331.584 481.359 331.495 480.727 331.495 cv
480.624 331.495 480.58 331.437 480.58 331.304 cv
480.609 331.172 li
480.668 331.04 li
480.785 330.981 li
482.77 330.819 li
482.888 330.819 482.946 330.893 482.946 331.01 cv
480.83 339.463 li
480.756 339.624 480.727 339.86 480.727 340.168 cv
480.727 340.595 480.859 340.801 481.153 340.801 cv
481.447 340.801 481.682 340.624 481.829 340.242 cv
481.976 339.86 482.123 339.404 482.241 338.86 cv
482.358 338.772 li
482.535 338.772 li
482.623 338.831 li
482.667 338.919 li
482.549 339.389 482.432 339.771 482.344 340.036 cv
482.255 340.315 482.108 340.58 481.903 340.815 cv
481.697 341.05 481.432 341.168 481.124 341.168 cv
480.727 341.168 480.403 341.036 480.139 340.801 cv
479.874 340.551 479.742 340.227 479.742 339.83 cv
f
485.196 339.272 mo
485.196 339.698 485.298 340.065 485.519 340.359 cv
485.739 340.654 486.048 340.801 486.46 340.801 cv
487.048 340.801 487.606 340.668 488.15 340.404 cv
488.679 340.139 489.12 339.757 489.459 339.286 cv
489.576 339.242 li
489.723 339.331 li
489.797 339.478 li
489.767 339.566 li
489.414 340.065 488.929 340.462 488.327 340.742 cv
487.709 341.021 487.077 341.168 486.43 341.168 cv
485.96 341.168 485.534 341.05 485.181 340.845 cv
484.828 340.639 484.549 340.345 484.358 339.963 cv
484.152 339.595 484.064 339.169 484.064 338.698 cv
484.064 338.037 484.24 337.375 484.608 336.729 cv
484.975 336.082 485.46 335.553 486.078 335.141 cv
486.695 334.729 487.342 334.524 488.018 334.524 cv
488.459 334.524 488.856 334.641 489.209 334.847 cv
489.561 335.068 489.738 335.376 489.738 335.788 cv
489.738 336.052 489.65 336.288 489.503 336.479 cv
489.341 336.67 489.135 336.758 488.871 336.758 cv
488.709 336.758 488.577 336.714 488.474 336.611 cv
488.356 336.523 488.312 336.391 488.312 336.229 cv
488.312 335.994 488.385 335.802 488.562 335.641 cv
488.724 335.479 488.915 335.391 489.15 335.391 cv
489.179 335.391 li
489.062 335.229 488.885 335.112 488.679 335.023 cv
488.459 334.95 488.238 334.906 488.003 334.906 cv
487.43 334.906 486.93 335.156 486.504 335.641 cv
486.063 336.141 485.739 336.729 485.519 337.405 cv
485.298 338.081 485.196 338.713 485.196 339.272 cv
f
467.918 324.733 mo
491.357 324.733 li
491.357 322.858 li
467.918 322.858 li
cp
f
392.918 372.32 mo
434.918 372.32 li
.115846 1 1 .0613413 cmyk
@
388.918 376.32 mo
396.918 376.32 li
396.918 368.32 li
388.918 368.32 li
cp
f
.5 lw
0 lc
0 lj
388.918 376.32 mo
396.918 376.32 li
396.918 368.32 li
388.918 368.32 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
430.918 376.32 mo
438.918 376.32 li
438.918 368.32 li
430.918 368.32 li
cp
.115846 1 1 .0613413 cmyk
f
430.918 376.32 mo
438.918 376.32 li
438.918 368.32 li
430.918 368.32 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
489.194 365.561 mo
489.215 365.33 li
491.42 358.127 li
489.53 358.127 li
489.005 358.127 488.522 358.295 488.081 358.61 cv
487.64 358.946 487.283 359.345 486.989 359.828 cv
486.863 359.912 li
486.611 359.912 li
486.485 359.912 486.422 359.849 486.422 359.702 cv
486.464 359.576 li
486.926 358.82 487.409 358.169 487.934 357.623 cv
488.438 357.098 489.026 356.825 489.698 356.825 cv
496.145 356.825 li
496.292 356.825 496.418 356.888 496.523 356.972 cv
496.607 357.077 496.67 357.203 496.67 357.35 cv
496.67 357.56 496.586 357.749 496.439 357.896 cv
496.292 358.064 496.124 358.127 495.914 358.127 cv
492.113 358.127 li
490.706 365.372 li
490.643 365.603 490.538 365.792 490.391 365.918 cv
490.244 366.044 490.055 366.128 489.824 366.128 cv
489.635 366.128 489.488 366.065 489.362 365.96 cv
489.236 365.876 489.194 365.729 489.194 365.561 cv
f
495.845 371.233 mo
495.742 371.233 495.698 371.174 495.698 371.042 cv
495.727 370.924 li
495.771 370.777 li
495.889 370.719 li
496.815 370.719 497.359 370.424 497.521 369.822 cv
499.431 362.148 li
499.461 361.943 li
499.461 361.84 499.402 361.781 499.285 361.766 cv
499.093 361.737 498.741 361.707 498.226 361.707 cv
498.123 361.707 498.079 361.649 498.079 361.516 cv
498.108 361.384 li
498.167 361.252 li
498.27 361.193 li
500.857 361.193 li
500.96 361.193 501.019 361.252 501.048 361.355 cv
502.195 369.778 li
507.546 361.355 li
507.605 361.252 507.708 361.193 507.825 361.193 cv
510.324 361.193 li
510.412 361.193 510.471 361.266 510.471 361.384 cv
510.427 361.516 li
510.368 361.663 li
510.28 361.707 li
509.677 361.707 509.266 361.751 509.031 361.81 cv
508.898 361.854 508.81 361.987 508.751 362.207 cv
506.737 370.277 li
506.708 370.38 506.708 370.454 506.708 370.483 cv
506.723 370.586 li
506.767 370.63 li
506.884 370.66 li
507.061 370.704 507.414 370.719 507.943 370.719 cv
508.031 370.719 508.09 370.792 508.09 370.91 cv
508.046 371.057 508.016 371.145 508.002 371.174 cv
507.84 371.233 li
504.003 371.233 li
503.9 371.233 503.856 371.174 503.856 371.042 cv
503.886 370.91 li
503.944 370.777 li
504.047 370.719 li
504.635 370.719 505.062 370.689 505.297 370.616 cv
505.414 370.586 505.517 370.454 505.576 370.219 cv
507.693 361.707 li
501.754 371.071 li
501.695 371.189 501.592 371.233 501.46 371.233 cv
501.328 371.233 501.254 371.189 501.254 371.071 cv
500.005 361.825 li
497.991 369.881 li
497.961 369.983 li
497.947 370.101 li
497.947 370.366 498.05 370.527 498.27 370.601 cv
498.491 370.689 498.77 370.719 499.093 370.719 cv
499.182 370.719 499.24 370.792 499.24 370.91 cv
499.211 371.042 499.182 371.13 499.152 371.174 cv
498.991 371.233 li
495.845 371.233 li
f
471.194 401.977 mo
471.215 401.746 li
473.42 394.543 li
471.53 394.543 li
471.005 394.543 470.522 394.711 470.081 395.026 cv
469.64 395.362 469.283 395.761 468.989 396.244 cv
468.863 396.328 li
468.611 396.328 li
468.485 396.328 468.422 396.265 468.422 396.118 cv
468.464 395.992 li
468.926 395.236 469.409 394.585 469.934 394.039 cv
470.438 393.514 471.026 393.241 471.698 393.241 cv
478.145 393.241 li
478.292 393.241 478.418 393.304 478.523 393.388 cv
478.607 393.493 478.67 393.619 478.67 393.766 cv
478.67 393.976 478.586 394.165 478.439 394.312 cv
478.292 394.48 478.124 394.543 477.914 394.543 cv
474.113 394.543 li
472.706 401.788 li
472.643 402.019 472.538 402.208 472.391 402.334 cv
472.244 402.46 472.055 402.544 471.824 402.544 cv
471.635 402.544 471.488 402.481 471.362 402.376 cv
471.236 402.292 471.194 402.145 471.194 401.977 cv
f
484.847 395.264 mo
484.288 394.823 483.818 394.338 483.436 393.779 cv
483.039 393.221 482.716 392.618 482.466 392 cv
482.216 391.383 482.025 390.722 481.907 390.031 cv
481.775 389.354 481.716 388.664 481.716 387.958 cv
481.716 387.252 481.775 386.561 481.907 385.871 cv
482.025 385.194 482.216 384.533 482.48 383.886 cv
482.73 383.254 483.054 382.651 483.451 382.093 cv
483.847 381.534 484.318 381.049 484.847 380.637 cv
484.921 380.608 li
485.053 380.608 li
485.126 380.652 li
485.17 380.74 li
485.141 380.828 li
484.656 381.299 484.259 381.813 483.936 382.343 cv
483.612 382.872 483.362 383.445 483.171 384.048 cv
482.98 384.665 482.848 385.283 482.76 385.929 cv
482.671 386.576 482.627 387.252 482.627 387.958 cv
482.627 391.074 483.451 393.426 485.126 395.043 cv
485.17 395.161 li
485.126 395.249 li
485.053 395.293 li
484.921 395.293 li
484.847 395.264 li
f
486.685 391.633 mo
486.582 391.633 486.538 391.574 486.538 391.442 cv
486.567 391.31 li
486.626 391.177 li
486.729 391.118 li
487.317 391.118 487.743 391.089 487.978 391.016 cv
488.096 390.986 488.199 390.854 488.257 390.619 cv
490.271 382.548 li
490.301 382.343 li
490.301 382.24 490.242 382.181 490.124 382.166 cv
489.933 382.137 489.58 382.107 489.066 382.107 cv
488.963 382.107 488.919 382.049 488.919 381.916 cv
488.948 381.784 li
489.007 381.652 li
489.11 381.593 li
496.872 381.593 li
496.96 381.593 497.019 381.666 497.019 381.784 cv
496.666 384.827 li
496.607 384.915 li
496.519 384.959 li
496.387 384.959 li
496.284 384.959 496.24 384.9 496.24 384.768 cv
496.298 384.327 496.328 383.974 496.328 383.68 cv
496.328 383.195 496.21 382.842 496.004 382.607 cv
495.799 382.372 495.534 382.24 495.211 382.181 cv
494.887 382.137 494.446 382.107 493.888 382.107 cv
492.315 382.107 li
492.05 382.107 491.874 382.137 491.785 382.181 cv
491.697 382.225 491.609 382.372 491.55 382.607 cv
490.609 386.356 li
491.712 386.356 li
492.065 386.356 492.359 386.341 492.594 386.297 cv
492.814 386.267 493.006 386.194 493.153 386.076 cv
493.3 385.974 493.417 385.812 493.52 385.606 cv
493.608 385.4 493.711 385.121 493.799 384.768 cv
493.946 384.636 li
494.079 384.636 li
494.167 384.636 494.226 384.709 494.226 384.827 cv
493.329 388.458 li
493.182 388.59 li
493.05 388.59 li
492.947 388.59 492.903 388.531 492.903 388.399 cv
492.961 388.149 li
492.976 388.09 492.991 387.987 493.02 387.855 cv
493.035 387.737 493.05 387.62 493.05 387.517 cv
493.05 387.238 492.917 387.061 492.667 386.988 cv
492.418 386.914 492.094 386.87 491.697 386.87 cv
490.492 386.87 li
489.536 390.677 li
489.507 390.78 489.507 390.824 489.507 390.824 cv
489.507 390.942 489.536 391.016 489.61 391.016 cv
489.86 391.089 490.36 391.118 491.109 391.118 cv
491.197 391.118 491.256 391.192 491.256 391.31 cv
491.212 391.457 491.183 391.545 491.168 391.574 cv
491.006 391.633 li
486.685 391.633 li
f
496.137 391.633 mo
496.034 391.633 495.99 391.574 495.99 391.442 cv
496.019 391.31 li
496.078 391.177 li
496.181 391.118 li
496.769 391.118 497.195 391.089 497.43 391.016 cv
497.548 390.986 497.651 390.854 497.71 390.619 cv
499.724 382.548 li
499.753 382.343 li
499.753 382.24 499.694 382.181 499.577 382.166 cv
499.385 382.137 499.033 382.107 498.518 382.107 cv
498.415 382.107 498.371 382.049 498.371 381.916 cv
498.401 381.799 498.43 381.711 498.459 381.666 cv
498.621 381.593 li
502.957 381.593 li
503.046 381.593 503.09 381.666 503.09 381.784 cv
503.075 381.887 503.06 381.96 503.046 382.019 cv
502.899 382.107 li
502.164 382.107 501.679 382.137 501.443 382.181 cv
501.208 382.225 501.061 382.372 501.002 382.607 cv
498.988 390.677 li
498.944 390.795 498.93 390.913 498.93 391.001 cv
498.93 391.089 499.091 391.118 499.43 391.118 cv
500.797 391.118 li
501.561 391.118 502.178 390.971 502.664 390.663 cv
503.134 390.354 503.487 390.001 503.722 389.619 cv
503.957 389.237 504.148 388.84 504.31 388.428 cv
504.457 388.017 504.574 387.796 504.648 387.782 cv
504.78 387.782 li
504.868 387.782 504.927 387.855 504.927 387.973 cv
503.619 391.53 li
503.487 391.633 li
496.137 391.633 li
f
506.162 391.633 mo
506.059 391.633 506.015 391.574 506.015 391.442 cv
506.044 391.31 li
506.103 391.177 li
506.206 391.118 li
506.794 391.118 507.22 391.089 507.456 391.016 cv
507.573 390.986 507.676 390.854 507.735 390.619 cv
509.749 382.548 li
509.778 382.343 li
509.778 382.24 509.719 382.181 509.602 382.166 cv
509.411 382.137 509.058 382.107 508.543 382.107 cv
508.44 382.107 508.396 382.049 508.396 381.916 cv
508.426 381.784 li
508.485 381.652 li
508.587 381.593 li
513.865 381.593 li
514.541 381.593 515.144 381.769 515.658 382.093 cv
516.173 382.431 516.57 382.887 516.834 383.445 cv
517.099 384.004 517.246 384.621 517.246 385.297 cv
517.246 386.062 517.084 386.811 516.775 387.561 cv
516.467 388.311 516.026 389.002 515.467 389.619 cv
514.909 390.236 514.262 390.736 513.556 391.089 cv
512.836 391.457 512.101 391.633 511.351 391.633 cv
506.162 391.633 li
508.911 391.001 mo
508.911 391.089 509.073 391.118 509.411 391.118 cv
511.116 391.118 li
511.66 391.118 512.189 391.016 512.689 390.78 cv
513.189 390.56 513.644 390.251 514.056 389.854 cv
514.423 389.487 514.747 389.002 515.026 388.399 cv
515.305 387.811 515.526 387.179 515.688 386.532 cv
515.835 385.885 515.923 385.283 515.923 384.739 cv
515.923 384.342 515.864 383.989 515.746 383.666 cv
515.629 383.342 515.452 383.078 515.247 382.842 cv
515.041 382.607 514.776 382.431 514.453 382.298 cv
514.129 382.181 513.762 382.107 513.365 382.107 cv
511.748 382.107 li
511.483 382.107 511.307 382.137 511.219 382.181 cv
511.131 382.225 511.042 382.372 510.984 382.607 cv
508.97 390.677 li
508.926 390.795 508.911 390.913 508.911 391.001 cv
f
518.554 395.293 mo
518.422 395.161 li
518.451 395.073 li
520.127 393.426 520.965 391.074 520.965 387.958 cv
520.965 384.842 520.127 382.475 518.481 380.858 cv
518.422 380.74 li
518.466 380.652 li
518.554 380.608 li
518.686 380.608 li
518.76 380.637 li
519.465 381.196 520.053 381.872 520.524 382.666 cv
520.994 383.46 521.332 384.312 521.553 385.209 cv
521.759 386.106 521.876 387.017 521.876 387.958 cv
521.876 388.664 521.817 389.34 521.7 390.016 cv
521.582 390.692 521.391 391.339 521.141 391.986 cv
520.877 392.633 520.553 393.221 520.171 393.779 cv
519.774 394.338 519.304 394.823 518.76 395.264 cv
518.686 395.293 li
518.554 395.293 li
f
478.243 408.321 mo
478.243 408.144 478.272 407.953 478.36 407.747 cv
479.551 404.587 li
479.669 404.234 479.742 403.94 479.742 403.705 cv
479.742 403.411 479.624 403.264 479.419 403.264 cv
479.036 403.264 478.713 403.47 478.463 403.867 cv
478.199 404.278 478.022 404.719 477.905 405.204 cv
477.787 405.292 li
477.611 405.292 li
477.493 405.16 li
477.493 405.116 li
477.64 404.528 477.89 404.014 478.213 403.558 cv
478.537 403.117 478.948 402.882 479.448 402.882 cv
479.801 402.882 480.095 402.999 480.33 403.234 cv
480.565 403.47 480.698 403.749 480.698 404.102 cv
480.698 404.293 480.653 404.484 480.58 404.675 cv
479.389 407.836 li
479.242 408.159 479.183 408.453 479.183 408.718 cv
479.183 409.012 479.286 409.159 479.522 409.159 cv
479.904 409.159 480.212 408.953 480.477 408.541 cv
480.727 408.13 480.903 407.689 481.021 407.218 cv
481.139 407.13 li
481.315 407.13 li
481.403 407.174 li
481.447 407.262 li
481.432 407.306 li
481.286 407.865 481.05 408.379 480.727 408.835 cv
480.389 409.306 479.977 409.526 479.492 409.526 cv
479.139 409.526 478.845 409.408 478.61 409.188 cv
478.36 408.953 478.243 408.673 478.243 408.321 cv
479.904 400.471 mo
479.904 400.265 479.977 400.089 480.154 399.912 cv
480.33 399.751 480.521 399.662 480.727 399.662 cv
480.889 399.662 481.021 399.721 481.139 399.824 cv
481.241 399.927 481.3 400.059 481.3 400.206 cv
481.3 400.427 481.212 400.618 481.036 400.78 cv
480.859 400.956 480.668 401.029 480.462 401.029 cv
480.301 401.029 480.168 400.985 480.065 400.868 cv
479.948 400.765 479.904 400.633 479.904 400.471 cv
f
483.873 407.63 mo
483.873 408.056 483.976 408.424 484.196 408.718 cv
484.417 409.012 484.725 409.159 485.137 409.159 cv
485.725 409.159 486.283 409.026 486.827 408.762 cv
487.357 408.497 487.798 408.115 488.136 407.644 cv
488.253 407.6 li
488.4 407.689 li
488.474 407.836 li
488.444 407.924 li
488.092 408.424 487.606 408.82 487.004 409.1 cv
486.386 409.379 485.754 409.526 485.107 409.526 cv
484.637 409.526 484.211 409.408 483.858 409.203 cv
483.505 408.997 483.226 408.703 483.035 408.321 cv
482.829 407.953 482.741 407.527 482.741 407.056 cv
482.741 406.395 482.917 405.733 483.285 405.087 cv
483.652 404.44 484.137 403.911 484.755 403.499 cv
485.372 403.087 486.019 402.882 486.695 402.882 cv
487.136 402.882 487.533 402.999 487.886 403.205 cv
488.239 403.426 488.415 403.734 488.415 404.146 cv
488.415 404.41 488.327 404.646 488.18 404.837 cv
488.018 405.028 487.812 405.116 487.548 405.116 cv
487.386 405.116 487.254 405.072 487.151 404.969 cv
487.033 404.881 486.989 404.749 486.989 404.587 cv
486.989 404.352 487.063 404.161 487.239 403.999 cv
487.401 403.837 487.592 403.749 487.827 403.749 cv
487.856 403.749 li
487.739 403.587 487.562 403.47 487.357 403.381 cv
487.136 403.308 486.915 403.264 486.68 403.264 cv
486.107 403.264 485.607 403.514 485.181 403.999 cv
484.74 404.499 484.417 405.087 484.196 405.763 cv
483.976 406.439 483.873 407.071 483.873 407.63 cv
f
491.458 409.526 mo
490.988 409.526 490.576 409.408 490.223 409.203 cv
489.856 408.997 489.576 408.703 489.385 408.321 cv
489.179 407.953 489.091 407.527 489.091 407.056 cv
489.091 406.395 489.268 405.733 489.65 405.087 cv
490.017 404.44 490.502 403.911 491.12 403.499 cv
491.737 403.087 492.384 402.882 493.06 402.882 cv
493.413 402.882 493.736 402.955 494.03 403.073 cv
494.31 403.19 494.56 403.367 494.765 403.587 cv
494.971 403.822 495.133 404.087 495.251 404.381 cv
495.368 404.69 495.427 405.013 495.427 405.366 cv
495.427 405.88 495.309 406.38 495.104 406.88 cv
494.883 407.38 494.589 407.821 494.222 408.232 cv
493.839 408.644 493.413 408.953 492.928 409.188 cv
492.443 409.408 491.958 409.526 491.458 409.526 cv
491.487 409.159 mo
491.928 409.159 492.325 409.012 492.678 408.718 cv
493.031 408.424 493.34 408.041 493.575 407.586 cv
493.81 407.145 493.986 406.66 494.104 406.16 cv
494.222 405.66 494.295 405.204 494.295 404.793 cv
494.295 404.381 494.177 404.014 493.972 403.72 cv
493.766 403.426 493.442 403.264 493.031 403.264 cv
492.458 403.264 491.958 403.514 491.531 403.999 cv
491.09 404.499 490.767 405.087 490.547 405.763 cv
490.326 406.439 490.223 407.071 490.223 407.63 cv
490.223 408.056 490.326 408.424 490.547 408.718 cv
490.767 409.012 491.076 409.159 491.487 409.159 cv
f
496.897 408.482 mo
497.161 408.938 497.691 409.159 498.484 409.159 cv
498.823 409.159 499.146 409.1 499.455 408.982 cv
499.763 408.865 500.028 408.688 500.234 408.453 cv
500.44 408.218 500.542 407.938 500.542 407.6 cv
500.542 407.35 500.44 407.145 500.263 406.983 cv
500.087 406.821 499.866 406.704 499.602 406.645 cv
498.808 406.483 li
498.44 406.395 498.146 406.233 497.911 405.983 cv
497.676 405.733 497.558 405.425 497.558 405.072 cv
497.558 404.646 497.676 404.263 497.911 403.925 cv
498.146 403.587 498.455 403.323 498.837 403.146 cv
499.219 402.97 499.631 402.882 500.057 402.882 cv
500.498 402.882 500.895 402.999 501.248 403.205 cv
501.601 403.426 501.777 403.734 501.777 404.146 cv
501.777 404.381 501.704 404.572 501.586 404.749 cv
501.454 404.925 501.277 404.998 501.057 404.998 cv
500.925 404.998 500.807 404.969 500.719 404.881 cv
500.631 404.793 500.587 404.69 500.587 404.557 cv
500.587 404.44 500.616 404.337 500.675 404.219 cv
500.734 404.116 500.822 404.028 500.939 403.969 cv
501.042 403.911 501.16 403.867 501.277 403.867 cv
501.189 403.661 501.028 403.514 500.792 403.411 cv
500.557 403.323 500.293 403.264 500.028 403.264 cv
499.763 403.264 499.513 403.323 499.278 403.411 cv
499.028 403.514 498.823 403.661 498.676 403.852 cv
498.529 404.058 498.455 404.278 498.455 404.543 cv
498.455 404.719 498.514 404.881 498.631 405.013 cv
498.749 405.145 498.911 405.234 499.102 405.292 cv
499.954 405.469 li
500.219 405.528 500.469 405.631 500.704 405.778 cv
500.925 405.925 501.101 406.116 501.233 406.336 cv
501.366 406.557 501.439 406.807 501.439 407.086 cv
501.439 407.453 501.336 407.821 501.13 408.174 cv
500.925 408.526 500.675 408.806 500.381 409.012 cv
499.852 409.364 499.219 409.526 498.47 409.526 cv
497.941 409.526 497.47 409.408 497.029 409.173 cv
496.588 408.938 496.382 408.585 496.382 408.115 cv
496.382 407.85 496.456 407.63 496.603 407.424 cv
496.75 407.218 496.97 407.115 497.25 407.115 cv
497.397 407.115 497.529 407.174 497.647 407.262 cv
497.749 407.365 497.808 407.497 497.808 407.644 cv
497.808 407.88 497.72 408.071 497.558 408.232 cv
497.382 408.409 497.191 408.482 496.97 408.482 cv
496.897 408.482 li
f
467.918 378.733 mo
526.884 378.733 li
526.884 376.858 li
467.918 376.858 li
cp
f
157.719 275.417 mo
546.651 275.417 li
546.651 31.6084 li
157.719 31.6084 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
394.174 50.5229 mo
394.174 45.7903 398.003 41.9606 402.736 41.9606 cv
407.469 41.9606 411.298 45.7903 411.298 50.5229 cv
411.298 55.2556 407.469 59.0852 402.736 59.0852 cv
398.003 59.0852 394.174 55.2556 394.174 50.5229 cv
cp
1 /0 /CSD get_res sepcs
.353 sep
ef
385.079 68.6634 mo
385.079 63.963 388.909 60.1495 393.642 60.1495 cv
398.374 60.1495 402.204 63.963 402.204 68.6634 cv
402.204 73.3638 398.374 77.1773 393.642 77.1773 cv
388.909 77.1773 385.079 73.3638 385.079 68.6634 cv
cp
ef
413.814 54.1026 mo
413.814 49.37 417.627 45.5403 422.328 45.5403 cv
427.028 45.5403 430.842 49.37 430.842 54.1026 cv
430.842 58.8353 427.028 62.6649 422.328 62.6649 cv
417.627 62.6649 413.814 58.8353 413.814 54.1026 cv
cp
ef
265.787 204.291 mo
281.993 192.502 li
298.198 204.291 li
292.006 223.365 li
271.979 223.365 li
cp
.658473 .297063 0 0 cmyk
ef
313.195 221.261 mo
332.972 224.381 li
336.092 244.162 li
318.242 253.267 li
304.084 239.115 li
cp
.0357671 .644617 1 .000762951 cmyk
ef
246.051 204.534 mo
266.078 204.521 li
272.254 223.57 li
256.048 235.357 li
239.851 223.592 li
cp
.00482185 .265995 1 0 cmyk
ef
273.173 230.38 mo
291.926 223.357 li
304.374 239.04 li
293.321 255.754 li
274.035 250.402 li
cp
.644037 .112551 1 .0062562 cmyk
ef
254.186 167.727 mo
273.269 173.798 li
273.366 193.825 li
254.339 200.13 li
242.487 184.005 li
cp
.0357671 .644617 1 .000762951 cmyk
ef
471.863 218.126 mo
488.069 206.338 li
504.274 218.126 li
498.082 237.201 li
478.055 237.201 li
cp
ef
425.625 199.106 mo
445.652 199.092 li
451.828 218.142 li
435.615 229.928 li
419.425 218.163 li
cp
.00482185 .265995 1 0 cmyk
ef
452.127 218.02 mo
472.154 218.007 li
478.329 237.056 li
462.124 248.843 li
445.927 237.078 li
cp
.644037 .112551 1 .0062562 cmyk
ef
494.188 187.262 mo
514.215 187.246 li
520.391 206.299 li
504.178 218.085 li
487.988 206.321 li
cp
.00482185 .265995 1 0 cmyk
ef
488.117 168.557 mo
504.323 156.802 li
520.528 168.557 li
514.336 187.568 li
494.309 187.568 li
cp
.644037 .112551 1 .0062562 cmyk
ef
429.777 248.603 mo
445.983 236.814 li
462.188 248.603 li
455.996 267.677 li
435.969 267.677 li
cp
.658473 .297063 0 0 cmyk
ef
435.663 168.436 mo
455.69 168.428 li
461.866 187.471 li
445.652 199.261 li
429.463 187.496 li
cp
.0357671 .644617 1 .000762951 cmyk
ef
445.644 199.223 mo
461.801 187.471 li
477.959 199.223 li
471.791 218.238 li
451.812 218.238 li
cp
.658473 .297063 0 0 cmyk
ef
296.07 66.6317 mo
296.07 61.9313 299.883 58.1177 304.584 58.1177 cv
309.284 58.1177 313.098 61.9313 313.098 66.6317 cv
313.098 71.3321 309.284 75.1456 304.584 75.1456 cv
299.883 75.1456 296.07 71.3321 296.07 66.6317 cv
cp
1 /0 /CSD get_res sepcs
.353 sep
ef
330.222 117.377 mo
330.222 112.644 334.036 108.814 338.736 108.814 cv
343.437 108.814 347.25 112.644 347.25 117.377 cv
347.25 122.109 343.437 125.939 338.736 125.939 cv
334.036 125.939 330.222 122.109 330.222 117.377 cv
cp
ef
276.14 80.8054 mo
276.14 76.0728 279.953 72.2431 284.654 72.2431 cv
289.354 72.2431 293.167 76.0728 293.167 80.8054 cv
293.167 85.5381 289.354 89.3677 284.654 89.3677 cv
279.953 89.3677 276.14 85.5381 276.14 80.8054 cv
cp
ef
255.726 83.7079 mo
255.726 78.9753 259.555 75.1456 264.288 75.1456 cv
269.02 75.1456 272.85 78.9753 272.85 83.7079 cv
272.85 88.4406 269.02 92.2702 264.288 92.2702 cv
259.555 92.2702 255.726 88.4406 255.726 83.7079 cv
cp
ef
202.223 45.9757 mo
202.223 41.2431 206.057 37.4135 210.785 37.4135 cv
215.514 37.4135 219.348 41.2431 219.348 45.9757 cv
219.348 50.7084 215.514 54.538 210.785 54.538 cv
206.057 54.538 202.223 50.7084 202.223 45.9757 cv
cp
ef
232.699 129.277 mo
232.699 124.544 236.533 120.715 241.261 120.715 cv
245.994 120.715 249.824 124.544 249.824 129.277 cv
249.824 134.009 245.994 137.839 241.261 137.839 cv
236.533 137.839 232.699 134.009 232.699 129.277 cv
cp
ef
493.148 104.993 mo
493.148 100.26 496.978 96.4305 501.711 96.4305 cv
506.443 96.4305 510.273 100.26 510.273 104.993 cv
510.273 109.725 506.443 113.555 501.711 113.555 cv
496.978 113.555 493.148 109.725 493.148 104.993 cv
cp
ef
487.247 84.24 mo
487.247 79.5396 491.076 75.7261 495.809 75.7261 cv
500.541 75.7261 504.371 79.5396 504.371 84.24 cv
504.371 88.9404 500.541 92.754 495.809 92.754 cv
491.076 92.754 487.247 88.9404 487.247 84.24 cv
cp
ef
476.798 117.57 mo
476.798 112.837 480.627 109.008 485.36 109.008 cv
490.093 109.008 493.922 112.837 493.922 117.57 cv
493.922 122.303 490.093 126.132 485.36 126.132 cv
480.627 126.132 476.798 122.303 476.798 117.57 cv
cp
ef
459.77 105.525 mo
459.77 100.824 463.583 97.0109 468.284 97.0109 cv
472.984 97.0109 476.798 100.824 476.798 105.525 cv
476.798 110.225 472.984 114.039 468.284 114.039 cv
463.583 114.039 459.77 110.225 459.77 105.525 cv
cp
ef
465.962 84.24 mo
465.962 79.5396 469.775 75.7261 474.476 75.7261 cv
479.176 75.7261 482.99 79.5396 482.99 84.24 cv
482.99 88.9404 479.176 92.754 474.476 92.754 cv
469.775 92.754 465.962 88.9404 465.962 84.24 cv
cp
ef
434.034 128.116 mo
434.034 123.383 437.864 119.554 442.597 119.554 cv
447.329 119.554 451.159 123.383 451.159 128.116 cv
451.159 132.848 447.329 136.678 442.597 136.678 cv
437.864 136.678 434.034 132.848 434.034 128.116 cv
cp
ef
508.435 117.183 mo
508.435 112.451 512.264 108.621 516.997 108.621 cv
521.73 108.621 525.559 112.451 525.559 117.183 cv
525.559 121.916 521.73 125.745 516.997 125.745 cv
512.264 125.745 508.435 121.916 508.435 117.183 cv
cp
ef
501.759 135.372 mo
501.759 130.639 505.572 126.81 510.273 126.81 cv
514.973 126.81 518.787 130.639 518.787 135.372 cv
518.787 140.105 514.973 143.934 510.273 143.934 cv
505.572 143.934 501.759 140.105 501.759 135.372 cv
cp
ef
482.216 135.372 mo
482.216 130.639 486.045 126.81 490.778 126.81 cv
495.51 126.81 499.34 130.639 499.34 135.372 cv
499.34 140.105 495.51 143.934 490.778 143.934 cv
486.045 143.934 482.216 140.105 482.216 135.372 cv
cp
ef
4.83746 lw
484.634 116.828 mo
500.84 105.041 li
517.045 116.828 li
510.853 135.904 li
490.826 135.904 li
cp
.0357671 .644617 1 .000762951 cmyk
@
474.75 86.0299 mo
494.769 86.0137 li
500.945 105.065 li
484.739 116.853 li
468.55 105.081 li
cp
@
509.886 47.572 mo
509.886 42.8716 513.699 39.0581 518.4 39.0581 cv
523.1 39.0581 526.914 42.8716 526.914 47.572 cv
526.914 52.2725 523.1 56.086 518.4 56.086 cv
513.699 56.086 509.886 52.2725 509.886 47.572 cv
cp
1 /0 /CSD get_res sepcs
.353 sep
ef
526.043 107.944 mo
526.043 103.243 529.873 99.4297 534.605 99.4297 cv
539.338 99.4297 543.168 103.243 543.168 107.944 cv
543.168 112.644 539.338 116.458 534.605 116.458 cv
529.873 116.458 526.043 112.644 526.043 107.944 cv
cp
ef
301.391 89.1742 mo
301.391 84.4738 305.205 80.6603 309.905 80.6603 cv
314.605 80.6603 318.419 84.4738 318.419 89.1742 cv
318.419 93.8746 314.605 97.6882 309.905 97.6882 cv
305.205 97.6882 301.391 93.8746 301.391 89.1742 cv
cp
ef
285.041 101.8 mo
285.041 97.0674 288.854 93.2377 293.554 93.2377 cv
298.255 93.2377 302.068 97.0674 302.068 101.8 cv
302.068 106.533 298.255 110.362 293.554 110.362 cv
288.854 110.362 285.041 106.533 285.041 101.8 cv
cp
ef
316.678 101.365 mo
316.678 96.6642 320.491 92.8507 325.191 92.8507 cv
329.892 92.8507 333.705 96.6642 333.705 101.365 cv
333.705 106.065 329.892 109.879 325.191 109.879 cv
320.491 109.879 316.678 106.065 316.678 101.365 cv
cp
ef
309.905 119.553 mo
309.905 114.853 313.735 111.04 318.467 111.04 cv
323.2 111.04 327.03 114.853 327.03 119.553 cv
327.03 124.254 323.2 128.067 318.467 128.067 cv
313.735 128.067 309.905 124.254 309.905 119.553 cv
cp
ef
290.458 119.553 mo
290.458 114.853 294.272 111.04 298.972 111.04 cv
303.673 111.04 307.486 114.853 307.486 119.553 cv
307.486 124.254 303.673 128.067 298.972 128.067 cv
294.272 128.067 290.458 124.254 290.458 119.553 cv
cp
ef
292.78 101.058 mo
308.986 89.271 li
325.191 101.058 li
319 120.134 li
298.972 120.134 li
cp
.0357671 .644617 1 .000762951 cmyk
@
351.507 84.4577 mo
377.194 84.4577 li
377.194 81.0473 li
384.015 87.8681 li
377.194 94.689 li
377.194 91.2785 li
351.507 91.2785 li
cp
1 /0 /CSD get_res sepcs
1 sep
ef
.773994 lw
351.507 84.4577 mo
377.194 84.4577 li
377.194 81.0473 li
384.015 87.8681 li
377.194 94.689 li
377.194 91.2785 li
351.507 91.2785 li
cp
@
351.411 213.618 mo
377.194 213.618 li
377.194 210.208 li
384.015 217.028 li
377.194 223.849 li
377.194 220.439 li
351.411 220.439 li
cp
ef
351.411 213.618 mo
377.194 213.618 li
377.194 210.208 li
384.015 217.028 li
377.194 223.849 li
377.194 220.439 li
351.411 220.439 li
cp
@
%ADOBeginSubsetFont: OTKIXY+Cambria#20Math-KSCms-UHC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (OTKIXY+Cambria#20Math-KSCms-UHC-H)
%%Title: (OTKIXY+Cambria#20Math-KSCms-UHC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /OTKIXY+Cambria#20Math-KSCms-UHC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1475 -2464 2868 3117} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 7320 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6472030318CD4127C796377DABFD8006FC8CD7AAF1086964
F20EE651118638C13AC909581621FA1FBAC552E6A16F7B4972529EBE8A80E782
DD8AB05FDEEBDFC49979639D0FF68DCB6E7F422169AA9A2DB1DEF4F4B413623F
5F563C56D612D674F82D41A71448843BD967EEE7B9B5E5851CDE54BA3652F7BD
EAFCDD43D27FDE0DE42D02A7D2B502434D5DE03C37B40825A9A0E097F17F7836
8B6C52A18DA8C4E8168AC56AD15BCF0B69C17FC31C7A04A95D974197259FB36A
E72A5300CDD86C2372DFF50F7695D6D8E6898504FD1B1E5E543A89FFBE60F42D
9B97A8DA995D7DC487489AC6073B6078ACF7C0324D45E66DA26D3EFF3411DA7F
D9C5DE33005> |
1846 <001C60D8A8C9B7C8C152359027A17BEB194BB4B7A458766DC00F4B8ED8
7A0953DD93BB2789E3C7D1085E4FC39809C4126DF8E69DD1E9393903F64D6E18
C690EE0FD59C6AD12C54BD2A23739922E3896456FA41C85CFEA7054DC4DDC26C
62812AD4C6573DF2BB343B34BB1BAD120211A6A76956507DCB6D6E3142F721BD
ED8EA637FB47F14C92986B8EF2185C95F3FE67974BCF5CDD0C847884A86B5209
5E2D3C0D16E1BD55D177> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /OTKIXY+Cambria#20Math-KSCms-UHC-H-Identity-H /Identity-H 0 [/OTKIXY+Cambria#20Math-KSCms-UHC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/OTKIXY+Cambria#20Math-KSCms-UHC-H-Identity-H findfont [35.5244 0 0 -35.5244 0 0 ]msf
166.465 101.35 mo
(\0076)sh
%ADOBeginSubsetFont: OTKIXY+Cambria#20Math-KSCms-UHC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OTKIXY+Cambria#20Math-KSCms-UHC-H 1 GetGlyphDirectory
3002 <001C60D8A8C9B64B6A2420074899BCE082D52DD5E46B56FE1EAD23B01E
78B41B956E68730FD0F8D8801A826CBAF48D26415B16E8BDFE2ABAE621AAEEE7
E65800B58866E2D2E3962E574543CF8AB900DE559B566C40C67724CFEB542BE0
36129431CB0DE0A96FFD16DCB9D7A10E2536D9DC7AE8A1E04ED3B2B28214223E
90F6A2920E3250EA5C5C6AB9A8564D0737CDFE0E6CB6C413CD314A89C3E739A7
DCABB2998D3B4E24239A5A965D8C1A2C8F99ACF8347AA08F4E9B015412D89427
7F2CCFF79D95322999ED3E3B029E8D990C93CEDF086E058B525104C09E3F6748
CB79FE8BE9EB285C32FBFD7D88E66DFF700BE8> |
!
end
end end
%ADOEndSubsetFont
/OTKIXY+Cambria#20Math-KSCms-UHC-H-Identity-H findfont [25.9467 0 0 -25.9467 0 0 ]msf
182.04 108.606 mo
(\013\272)sh
/OTKIXY+Cambria#20Math-KSCms-UHC-H-Identity-H findfont [35.5244 0 0 -35.5244 0 0 ]msf
166.561 231.912 mo
(\0076)sh
%ADOBeginSubsetFont: OTKIXY+Cambria#20Math-KSCms-UHC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/OTKIXY+Cambria#20Math-KSCms-UHC-H 1 GetGlyphDirectory
3005 <001C60D8A8C9B601B62931E2DDF35DCAB2A9BAB3D5A080EED273631A65
8A1B4B28CD39E12B725A97E02350EF601F2E8981D254F24E306927FBE580AD3E
7943D476C425CB29FCFFCCDD2DB949FC96EFA726E16940553A459AD81DD4EA39
FECFE96C629772D357E695F061F39C4D3FEBF2336D640B155D56807ABA23E58C
8D9E74DEC5A522669CD9AC845CDCE84F50E5C21A1F84E5D72860BF02825912BB
4685CBAB86E8341EA70DE5CC71B6E471FAE9892A8B515B8F50FA2A398B4BB513
AFFA210073D856B33049F9BCE251F91318C6C66FD779300D3B18963E073BD67F
4BC0DDAEAEFCB6FA33E1ECFFE146002CE00F0F1C08A660BEB6224C3CF8F935D2
01DC04> |
!
end
end end
%ADOEndSubsetFont
/OTKIXY+Cambria#20Math-KSCms-UHC-H-Identity-H findfont [25.9467 0 0 -25.9467 0 0 ]msf
183.879 239.168 mo
(\013\275)sh
gsave
157.719 275.417 mo
546.651 275.417 li
546.651 31.6085 li
157.719 31.6085 li
cp
eclp
1.83824 lw
157.767 275.465 mo
546.699 275.465 li
546.699 31.6568 li
157.767 31.6568 li
cp
@
grestore
gsave
157.719 275.417 mo
546.651 275.417 li
546.651 31.6085 li
157.719 31.6085 li
cp
eclp
1.83824 lw
157.767 153.561 mo
546.683 153.561 li
@
grestore
265.787 99.091 mo
265.787 94.3584 269.601 90.5287 274.301 90.5287 cv
279.002 90.5287 282.815 94.3584 282.815 99.091 cv
282.815 103.824 279.002 107.653 274.301 107.653 cv
269.601 107.653 265.787 103.824 265.787 99.091 cv
cp
1 /0 /CSD get_res sepcs
.353 sep
ef
263.949 62.4714 mo
263.949 57.7711 267.763 53.9575 272.463 53.9575 cv
277.164 53.9575 280.977 57.7711 280.977 62.4714 cv
280.977 67.1718 277.164 70.9854 272.463 70.9854 cv
267.763 70.9854 263.949 67.1718 263.949 62.4714 cv
cp
ef
247.212 45.2501 mo
247.212 40.5497 251.041 36.7361 255.774 36.7361 cv
260.507 36.7361 264.336 40.5497 264.336 45.2501 cv
264.336 49.9505 260.507 53.764 255.774 53.764 cv
251.041 53.764 247.212 49.9505 247.212 45.2501 cv
cp
ef
268.787 121.247 mo
268.787 116.514 272.6 112.684 277.301 112.684 cv
282.001 112.684 285.815 116.514 285.815 121.247 cv
285.815 125.979 282.001 129.809 277.301 129.809 cv
272.6 129.809 268.787 125.979 268.787 121.247 cv
cp
ef
279.332 47.3302 mo
279.332 42.5976 283.162 38.7679 287.895 38.7679 cv
292.627 38.7679 296.457 42.5976 296.457 47.3302 cv
296.457 52.0629 292.627 55.8925 287.895 55.8925 cv
283.162 55.8925 279.332 52.0629 279.332 47.3302 cv
cp
ef
323.063 135.275 mo
323.063 130.543 326.893 126.713 331.625 126.713 cv
336.358 126.713 340.188 130.543 340.188 135.275 cv
340.188 140.008 336.358 143.838 331.625 143.838 cv
326.893 143.838 323.063 140.008 323.063 135.275 cv
cp
ef
212.866 64.8902 mo
212.866 60.1898 216.678 56.3763 221.38 56.3763 cv
226.082 56.3763 229.893 60.1898 229.893 64.8902 cv
229.893 69.5906 226.082 73.4041 221.38 73.4041 cv
216.678 73.4041 212.866 69.5906 212.866 64.8902 cv
cp
ef
250.211 120.086 mo
250.211 115.353 254.04 111.523 258.773 111.523 cv
263.506 111.523 267.335 115.353 267.335 120.086 cv
267.335 124.818 263.506 128.648 258.773 128.648 cv
254.04 128.648 250.211 124.818 250.211 120.086 cv
cp
ef
287.943 138.516 mo
287.943 133.816 291.757 130.002 296.457 130.002 cv
301.157 130.002 304.971 133.816 304.971 138.516 cv
304.971 143.217 301.157 147.03 296.457 147.03 cv
291.757 147.03 287.943 143.217 287.943 138.516 cv
cp
ef
243.535 68.6634 mo
243.535 63.963 247.365 60.1495 252.097 60.1495 cv
256.83 60.1495 260.66 63.963 260.66 68.6634 cv
260.66 73.3638 256.83 77.1773 252.097 77.1773 cv
247.365 77.1773 243.535 73.3638 243.535 68.6634 cv
cp
ef
328.191 81.2408 mo
328.191 76.5404 332.004 72.7269 336.705 72.7269 cv
341.405 72.7269 345.219 76.5404 345.219 81.2408 cv
345.219 85.9412 341.405 89.7547 336.705 89.7547 cv
332.004 89.7547 328.191 85.9412 328.191 81.2408 cv
cp
ef
216.542 141.709 mo
216.542 137.009 220.354 133.195 225.056 133.195 cv
229.758 133.195 233.57 137.009 233.57 141.709 cv
233.57 146.409 229.758 150.223 225.056 150.223 cv
220.354 150.223 216.542 146.409 216.542 141.709 cv
cp
ef
200.869 128.358 mo
200.869 123.657 204.681 119.844 209.383 119.844 cv
214.085 119.844 217.897 123.657 217.897 128.358 cv
217.897 133.058 214.085 136.872 209.383 136.872 cv
204.681 136.872 200.869 133.058 200.869 128.358 cv
cp
ef
305.455 136.243 mo
305.455 131.51 309.284 127.68 314.017 127.68 cv
318.75 127.68 322.579 131.51 322.579 136.243 cv
322.579 140.975 318.75 144.805 314.017 144.805 cv
309.284 144.805 305.455 140.975 305.455 136.243 cv
cp
ef
303.81 45.7822 mo
303.81 41.0496 307.623 37.2199 312.324 37.2199 cv
317.024 37.2199 320.838 41.0496 320.838 45.7822 cv
320.838 50.5148 317.024 54.3445 312.324 54.3445 cv
307.623 54.3445 303.81 50.5148 303.81 45.7822 cv
cp
ef
254.758 138.323 mo
254.758 133.622 258.588 129.809 263.32 129.809 cv
268.053 129.809 271.883 133.622 271.883 138.323 cv
271.883 143.023 268.053 146.837 263.32 146.837 cv
258.588 146.837 254.758 143.023 254.758 138.323 cv
cp
ef
329.835 56.086 mo
329.835 51.3856 333.665 47.5721 338.398 47.5721 cv
343.13 47.5721 346.96 51.3856 346.96 56.086 cv
346.96 60.7864 343.13 64.5999 338.398 64.5999 cv
333.665 64.5999 329.835 60.7864 329.835 56.086 cv
cp
ef
313.098 67.3089 mo
313.098 62.6085 316.927 58.795 321.66 58.795 cv
326.393 58.795 330.222 62.6085 330.222 67.3089 cv
330.222 72.0093 326.393 75.8228 321.66 75.8228 cv
316.927 75.8228 313.098 72.0093 313.098 67.3089 cv
cp
ef
385.853 116.312 mo
385.853 111.58 389.683 107.75 394.416 107.75 cv
399.148 107.75 402.978 111.58 402.978 116.312 cv
402.978 121.045 399.148 124.875 394.416 124.875 cv
389.683 124.875 385.853 121.045 385.853 116.312 cv
cp
ef
500.501 71.4691 mo
500.501 66.7687 504.331 62.9552 509.063 62.9552 cv
513.796 62.9552 517.626 66.7687 517.626 71.4691 cv
517.626 76.1695 513.796 79.9831 509.063 79.9831 cv
504.331 79.9831 500.501 76.1695 500.501 71.4691 cv
cp
ef
438.872 44.7663 mo
438.872 40.0659 442.685 36.2524 447.386 36.2524 cv
452.086 36.2524 455.9 40.0659 455.9 44.7663 cv
455.9 49.4667 452.086 53.2803 447.386 53.2803 cv
442.685 53.2803 438.872 49.4667 438.872 44.7663 cv
cp
ef
415.265 139.097 mo
415.265 134.396 419.095 130.583 423.827 130.583 cv
428.56 130.583 432.39 134.396 432.39 139.097 cv
432.39 143.797 428.56 147.611 423.827 147.611 cv
419.095 147.611 415.265 143.797 415.265 139.097 cv
cp
ef
457.061 124.681 mo
457.061 119.981 460.874 116.167 465.575 116.167 cv
470.275 116.167 474.089 119.981 474.089 124.681 cv
474.089 129.382 470.275 133.195 465.575 133.195 cv
460.874 133.195 457.061 129.382 457.061 124.681 cv
cp
ef
476.507 64.9869 mo
476.507 60.2866 480.337 56.473 485.07 56.473 cv
489.802 56.473 493.632 60.2866 493.632 64.9869 cv
493.632 69.6873 489.802 73.5009 485.07 73.5009 cv
480.337 73.5009 476.507 69.6873 476.507 64.9869 cv
cp
ef
405.977 120.811 mo
405.977 116.111 409.807 112.297 414.539 112.297 cv
419.272 112.297 423.102 116.111 423.102 120.811 cv
423.102 125.512 419.272 129.325 414.539 129.325 cv
409.807 129.325 405.977 125.512 405.977 120.811 cv
cp
ef
440.42 109.782 mo
440.42 105.081 444.25 101.268 448.982 101.268 cv
453.715 101.268 457.544 105.081 457.544 109.782 cv
457.544 114.482 453.715 118.296 448.982 118.296 cv
444.25 118.296 440.42 114.482 440.42 109.782 cv
cp
ef
512.498 91.0125 mo
512.498 86.3121 516.328 82.4985 521.06 82.4985 cv
525.793 82.4985 529.623 86.3121 529.623 91.0125 cv
529.623 95.7129 525.793 99.5264 521.06 99.5264 cv
516.328 99.5264 512.498 95.7129 512.498 91.0125 cv
cp
ef
485.118 45.3468 mo
485.118 40.6464 488.932 36.8329 493.632 36.8329 cv
498.332 36.8329 502.146 40.6464 502.146 45.3468 cv
502.146 50.0472 498.332 53.8608 493.632 53.8608 cv
488.932 53.8608 485.118 50.0472 485.118 45.3468 cv
cp
ef
460.35 47.7172 mo
460.35 42.9846 464.18 39.1549 468.912 39.1549 cv
473.645 39.1549 477.475 42.9846 477.475 47.7172 cv
477.475 52.4498 473.645 56.2795 468.912 56.2795 cv
464.18 56.2795 460.35 52.4498 460.35 47.7172 cv
cp
ef
436.55 64.0678 mo
436.55 59.3351 440.38 55.5055 445.112 55.5055 cv
449.845 55.5055 453.674 59.3351 453.674 64.0678 cv
453.674 68.8004 449.845 72.6301 445.112 72.6301 cv
440.38 72.6301 436.55 68.8004 436.55 64.0678 cv
cp
ef
449.805 142.193 mo
449.805 137.492 453.618 133.679 458.318 133.679 cv
463.019 133.679 466.832 137.492 466.832 142.193 cv
466.832 146.893 463.019 150.707 458.318 150.707 cv
453.618 150.707 449.805 146.893 449.805 142.193 cv
cp
ef
522.367 138.952 mo
522.367 134.219 526.18 130.389 530.88 130.389 cv
535.581 130.389 539.394 134.219 539.394 138.952 cv
539.394 143.684 535.581 147.514 530.88 147.514 cv
526.18 147.514 522.367 143.684 522.367 138.952 cv
cp
ef
521.883 65.2288 mo
521.883 60.4962 525.712 56.6665 530.445 56.6665 cv
535.178 56.6665 539.007 60.4962 539.007 65.2288 cv
539.007 69.9614 535.178 73.7911 530.445 73.7911 cv
525.712 73.7911 521.883 69.9614 521.883 65.2288 cv
cp
ef
392.819 138.274 mo
392.819 133.542 396.633 129.712 401.333 129.712 cv
406.034 129.712 409.847 133.542 409.847 138.274 cv
409.847 143.007 406.034 146.837 401.333 146.837 cv
396.633 146.837 392.819 143.007 392.819 138.274 cv
cp
ef
243.342 245.715 mo
243.342 241.013 247.171 237.201 251.904 237.201 cv
256.637 237.201 260.466 241.013 260.466 245.715 cv
260.466 250.417 256.637 254.228 251.904 254.228 cv
247.171 254.228 243.342 250.417 243.342 245.715 cv
cp
ef
223.218 239.861 mo
223.218 235.133 227.051 231.299 231.78 231.299 cv
236.509 231.299 240.342 235.133 240.342 239.861 cv
240.342 244.59 236.509 248.424 231.78 248.424 cv
227.051 248.424 223.218 244.59 223.218 239.861 cv
cp
ef
223.411 204.983 mo
223.411 200.281 227.223 196.469 231.925 196.469 cv
236.627 196.469 240.439 200.281 240.439 204.983 cv
240.439 209.685 236.627 213.497 231.925 213.497 cv
227.223 213.497 223.411 209.685 223.411 204.983 cv
cp
ef
225.153 179.683 mo
225.153 174.951 228.986 171.121 233.715 171.121 cv
238.448 171.121 242.277 174.951 242.277 179.683 cv
242.277 184.416 238.448 188.245 233.715 188.245 cv
228.986 188.245 225.153 184.416 225.153 179.683 cv
cp
ef
235.698 163.768 mo
235.698 159.068 239.528 155.254 244.261 155.254 cv
248.993 155.254 252.823 159.068 252.823 163.768 cv
252.823 168.468 248.993 172.282 244.261 172.282 cv
239.528 172.282 235.698 168.468 235.698 163.768 cv
cp
ef
255.822 262.065 mo
255.822 257.363 259.652 253.551 264.385 253.551 cv
269.117 253.551 272.947 257.363 272.947 262.065 cv
272.947 266.767 269.117 270.579 264.385 270.579 cv
259.652 270.579 255.822 266.767 255.822 262.065 cv
cp
ef
226.314 258.195 mo
226.314 253.493 230.126 249.681 234.828 249.681 cv
239.528 249.681 243.342 253.493 243.342 258.195 cv
243.342 262.897 239.528 266.709 234.828 266.709 cv
230.126 266.709 226.314 262.897 226.314 258.195 cv
cp
ef
200.772 250.649 mo
200.772 245.947 204.606 242.135 209.334 242.135 cv
214.063 242.135 217.897 245.947 217.897 250.649 cv
217.897 255.351 214.063 259.163 209.334 259.163 cv
204.606 259.163 200.772 255.351 200.772 250.649 cv
cp
ef
202.61 195.115 mo
202.61 190.414 206.422 186.601 211.124 186.601 cv
215.826 186.601 219.638 190.414 219.638 195.115 cv
219.638 199.817 215.826 203.629 211.124 203.629 cv
206.422 203.629 202.61 199.817 202.61 195.115 cv
cp
ef
203.094 169.815 mo
203.094 165.082 206.906 161.252 211.608 161.252 cv
216.31 161.252 220.122 165.082 220.122 169.815 cv
220.122 174.547 216.31 178.377 211.608 178.377 cv
206.906 178.377 203.094 174.547 203.094 169.815 cv
cp
ef
211.318 222.591 mo
211.318 217.889 215.151 214.078 219.88 214.078 cv
224.609 214.078 228.442 217.889 228.442 222.591 cv
228.442 227.293 224.609 231.105 219.88 231.105 cv
215.151 231.105 211.318 227.293 211.318 222.591 cv
cp
ef
270.335 163.623 mo
270.335 158.89 274.164 155.06 278.897 155.06 cv
283.63 155.06 287.459 158.89 287.459 163.623 cv
287.459 168.355 283.63 172.185 278.897 172.185 cv
274.164 172.185 270.335 168.355 270.335 163.623 cv
cp
ef
283.976 183.988 mo
283.976 179.288 287.79 175.475 292.49 175.475 cv
297.191 175.475 301.004 179.288 301.004 183.988 cv
301.004 188.689 297.191 192.502 292.49 192.502 cv
287.79 192.502 283.976 188.689 283.976 183.988 cv
cp
ef
469.445 258.195 mo
469.445 253.493 473.274 249.681 478.007 249.681 cv
482.74 249.681 486.569 253.493 486.569 258.195 cv
486.569 262.897 482.74 266.709 478.007 266.709 cv
473.274 266.709 469.445 262.897 469.445 258.195 cv
cp
ef
329.739 188.439 mo
329.739 183.739 333.552 179.925 338.253 179.925 cv
342.953 179.925 346.767 183.739 346.767 188.439 cv
346.767 193.139 342.953 196.953 338.253 196.953 cv
333.552 196.953 329.739 193.139 329.739 188.439 cv
cp
ef
324.224 260.033 mo
324.224 255.331 328.038 251.52 332.738 251.52 cv
337.438 251.52 341.252 255.331 341.252 260.033 cv
341.252 264.735 337.438 268.547 332.738 268.547 cv
328.038 268.547 324.224 264.735 324.224 260.033 cv
cp
ef
317.452 170.589 mo
317.452 165.856 321.281 162.026 326.014 162.026 cv
330.746 162.026 334.576 165.856 334.576 170.589 cv
334.576 175.321 330.746 179.151 326.014 179.151 cv
321.281 179.151 317.452 175.321 317.452 170.589 cv
cp
ef
320.548 209.288 mo
320.548 204.56 324.377 200.726 329.11 200.726 cv
333.842 200.726 337.672 204.56 337.672 209.288 cv
337.672 214.017 333.842 217.851 329.11 217.851 cv
324.377 217.851 320.548 214.017 320.548 209.288 cv
cp
ef
296.941 163.623 mo
296.941 158.89 300.77 155.06 305.503 155.06 cv
310.236 155.06 314.065 158.89 314.065 163.623 cv
314.065 168.355 310.236 172.185 305.503 172.185 cv
300.77 172.185 296.941 168.355 296.941 163.623 cv
cp
ef
298.102 260.033 mo
298.102 255.331 301.931 251.52 306.664 251.52 cv
311.397 251.52 315.226 255.331 315.226 260.033 cv
315.226 264.735 311.397 268.547 306.664 268.547 cv
301.931 268.547 298.102 264.735 298.102 260.033 cv
cp
ef
305.745 186.456 mo
305.745 181.723 309.558 177.893 314.259 177.893 cv
318.959 177.893 322.773 181.723 322.773 186.456 cv
322.773 191.188 318.959 195.018 314.259 195.018 cv
309.558 195.018 305.745 191.188 305.745 186.456 cv
cp
ef
298.876 209.385 mo
298.876 204.657 302.689 200.823 307.39 200.823 cv
312.09 200.823 315.904 204.657 315.904 209.385 cv
315.904 214.114 312.09 217.948 307.39 217.948 cv
302.689 217.948 298.876 214.114 298.876 209.385 cv
cp
ef
505.822 262.791 mo
505.822 258.062 509.636 254.228 514.336 254.228 cv
519.037 254.228 522.85 258.062 522.85 262.791 cv
522.85 267.519 519.037 271.353 514.336 271.353 cv
509.636 271.353 505.822 267.519 505.822 262.791 cv
cp
ef
488.698 248.424 mo
488.698 243.722 492.527 239.91 497.26 239.91 cv
501.993 239.91 505.822 243.722 505.822 248.424 cv
505.822 253.126 501.993 256.937 497.26 256.937 cv
492.527 256.937 488.698 253.126 488.698 248.424 cv
cp
ef
507.661 229.993 mo
507.661 225.264 511.49 221.431 516.223 221.431 cv
520.956 221.431 524.785 225.264 524.785 229.993 cv
524.785 234.721 520.956 238.555 516.223 238.555 cv
511.49 238.555 507.661 234.721 507.661 229.993 cv
cp
ef
414.007 167.444 mo
414.007 162.744 417.821 158.93 422.521 158.93 cv
427.222 158.93 431.035 162.744 431.035 167.444 cv
431.035 172.145 427.222 175.958 422.521 175.958 cv
417.821 175.958 414.007 172.145 414.007 167.444 cv
cp
ef
459.576 164.058 mo
459.576 159.358 463.39 155.544 468.09 155.544 cv
472.791 155.544 476.604 159.358 476.604 164.058 cv
476.604 168.759 472.791 172.572 468.09 172.572 cv
463.39 172.572 459.576 168.759 459.576 164.058 cv
cp
ef
469.251 181.086 mo
469.251 176.386 473.065 172.572 477.765 172.572 cv
482.465 172.572 486.279 176.386 486.279 181.086 cv
486.279 185.786 482.465 189.6 477.765 189.6 cv
473.065 189.6 469.251 185.786 469.251 181.086 cv
cp
ef
410.041 190.809 mo
410.041 186.077 413.87 182.247 418.603 182.247 cv
423.336 182.247 427.165 186.077 427.165 190.809 cv
427.165 195.538 423.336 199.372 418.603 199.372 cv
413.87 199.372 410.041 195.538 410.041 190.809 cv
cp
ef
409.847 236.572 mo
409.847 231.843 413.661 228.009 418.361 228.009 cv
423.061 228.009 426.875 231.843 426.875 236.572 cv
426.875 241.3 423.061 245.134 418.361 245.134 cv
413.661 245.134 409.847 241.3 409.847 236.572 cv
cp
ef
409.654 256.55 mo
409.654 251.848 413.467 248.037 418.168 248.037 cv
422.868 248.037 426.681 251.848 426.681 256.55 cv
426.681 261.252 422.868 265.064 418.168 265.064 cv
413.467 265.064 409.654 261.252 409.654 256.55 cv
cp
ef
518.497 185.827 mo
518.497 181.126 522.31 177.313 527.01 177.313 cv
531.711 177.313 535.524 181.126 535.524 185.827 cv
535.524 190.527 531.711 194.341 527.01 194.341 cv
522.31 194.341 518.497 190.527 518.497 185.827 cv
cp
ef
240.786 81.8858 mo
244.672 79.2171 249.993 80.2007 252.662 84.0949 cv
255.33 87.981 254.347 93.2941 250.461 95.9628 cv
246.567 98.6395 241.253 97.6479 238.585 93.7618 cv
235.912 89.8757 236.899 84.5545 240.786 81.8858 cv
cp
ef
221.127 75.5487 mo
225.015 72.88 230.331 73.8717 233.002 77.7578 cv
235.672 81.6439 234.685 86.9571 230.797 89.6338 cv
226.91 92.3025 221.592 91.3108 218.922 87.4247 cv
216.252 83.5386 217.239 78.2254 221.127 75.5487 cv
cp
ef
239.383 101.381 mo
243.269 98.7121 248.59 99.6957 251.259 103.582 cv
253.928 107.476 252.944 112.789 249.05 115.458 cv
245.164 118.126 239.851 117.143 237.179 113.257 cv
234.508 109.363 235.495 104.049 239.383 101.381 cv
cp
ef
220.558 106.146 mo
224.446 103.469 229.762 104.461 232.432 108.347 cv
235.103 112.233 234.116 117.554 230.228 120.223 cv
226.34 122.891 221.024 121.908 218.354 118.014 cv
215.683 114.127 216.67 108.814 220.558 106.146 cv
cp
ef
209.529 90.0853 mo
213.417 87.4166 218.733 88.4002 221.404 92.2863 cv
224.074 96.1805 223.087 101.494 219.199 104.162 cv
215.312 106.831 209.995 105.847 207.324 101.961 cv
204.654 98.0671 205.641 92.754 209.529 90.0853 cv
cp
ef
4.83746 lw
226.162 81.5713 mo
245.043 88.247 li
244.495 108.266 li
225.283 113.958 li
213.951 97.4624 li
cp
.658473 .297063 0 0 cmyk
@
226.314 45.2501 mo
226.314 40.5497 230.126 36.7361 234.828 36.7361 cv
239.528 36.7361 243.342 40.5497 243.342 45.2501 cv
243.342 49.9505 239.528 53.764 234.828 53.764 cv
230.126 53.764 226.314 49.9505 226.314 45.2501 cv
cp
1 /0 /CSD get_res sepcs
.353 sep
ef
418.426 72.3076 mo
419.119 67.6475 423.465 64.4225 428.133 65.1159 cv
432.793 65.8093 436.018 70.1549 435.324 74.8231 cv
434.631 79.4832 430.285 82.7082 425.625 82.0148 cv
420.957 81.3214 417.732 76.9758 418.426 72.3076 cv
cp
ef
400.398 82.3937 mo
401.091 77.7256 405.437 74.5087 410.105 75.202 cv
414.765 75.8873 417.99 80.233 417.297 84.9011 cv
416.603 89.5693 412.258 92.7862 407.59 92.0928 cv
402.93 91.3995 399.705 87.0538 400.398 82.3937 cv
cp
ef
431.745 86.6184 mo
432.438 81.9503 436.784 78.7253 441.444 79.4187 cv
446.112 80.112 449.329 84.4577 448.644 89.1259 cv
447.95 93.7859 443.605 97.0109 438.936 96.3176 cv
434.276 95.6242 431.051 91.2785 431.745 86.6184 cv
cp
ef
422.408 103.646 mo
423.102 98.9781 427.447 95.7532 432.116 96.4465 cv
436.776 97.1399 440.001 101.486 439.307 106.154 cv
438.614 110.814 434.268 114.039 429.6 113.345 cv
424.94 112.652 421.715 108.306 422.408 103.646 cv
cp
ef
403.139 100.784 mo
403.833 96.116 408.178 92.8991 412.846 93.5844 cv
417.506 94.2778 420.731 98.6234 420.038 103.292 cv
419.345 107.952 414.999 111.177 410.331 110.483 cv
405.671 109.79 402.446 105.444 403.139 100.784 cv
cp
ef
408.235 82.8049 mo
425.988 73.5331 li
440.275 87.5617 li
431.35 105.509 li
411.556 102.566 li
cp
.658473 .297063 0 0 cmyk
@
402.736 50.7003 mo
422.57 53.4737 li
426.036 73.1945 li
408.339 82.6114 li
393.94 68.7118 li
cp
@
453.868 64.9385 mo
453.868 60.2059 457.698 56.3763 462.43 56.3763 cv
467.163 56.3763 470.993 60.2059 470.993 64.9385 cv
470.993 69.6712 467.163 73.5009 462.43 73.5009 cv
457.698 73.5009 453.868 69.6712 453.868 64.9385 cv
cp
1 /0 /CSD get_res sepcs
.353 sep
ef
389.433 241.99 mo
389.433 237.261 393.263 233.427 397.995 233.427 cv
402.728 233.427 406.558 237.261 406.558 241.99 cv
406.558 246.718 402.728 250.552 397.995 250.552 cv
393.263 250.552 389.433 246.718 389.433 241.99 cv
cp
ef
389.53 196.421 mo
389.53 191.688 393.343 187.858 398.044 187.858 cv
402.744 187.858 406.558 191.688 406.558 196.421 cv
406.558 201.149 402.744 204.983 398.044 204.983 cv
393.343 204.983 389.53 201.149 389.53 196.421 cv
cp
ef
393.496 169.621 mo
393.496 164.889 397.31 161.059 402.01 161.059 cv
406.711 161.059 410.524 164.889 410.524 169.621 cv
410.524 174.354 406.711 178.184 402.01 178.184 cv
397.31 178.184 393.496 174.354 393.496 169.621 cv
cp
ef
395.141 218.093 mo
395.141 213.364 398.971 209.53 403.703 209.53 cv
408.436 209.53 412.266 213.364 412.266 218.093 cv
412.266 222.821 408.436 226.655 403.703 226.655 cv
398.971 226.655 395.141 222.821 395.141 218.093 cv
cp
ef
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/OTKIXY+Cambria#20Math-KSCms-UHC-H-Identity-H uf
/OTKIXY+Cambria#20Math-KSCms-UHC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
